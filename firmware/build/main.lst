ARM GAS  /tmp/ccXMDTdb.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB53:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2019 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  24:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  25:Src/main.c    **** 
  26:Src/main.c    **** #define TTIP_AVG_FILTER 0.8f
  27:Src/main.c    **** #define MIN_DUTY 0
  28:Src/main.c    **** #define MAX_DUTY 4050
  29:Src/main.c    **** 
  30:Src/main.c    **** ADC_HandleTypeDef hadc;
  31:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  32:Src/main.c    **** 
  33:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  34:Src/main.c    **** I2C_HandleTypeDef hi2c2;
ARM GAS  /tmp/ccXMDTdb.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** TIM_HandleTypeDef htim1;
  37:Src/main.c    **** 
  38:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_FS;
  39:Src/main.c    **** 
  40:Src/main.c    **** void SystemClock_Config(void);
  41:Src/main.c    **** static void MX_GPIO_Init(void);
  42:Src/main.c    **** static void MX_ADC_Init(void);
  43:Src/main.c    **** static void MX_DMA_Init(void);
  44:Src/main.c    **** static void MX_I2C1_Init(void);
  45:Src/main.c    **** static void MX_I2C2_Init(void);
  46:Src/main.c    **** static void MX_TIM1_Init(void);
  47:Src/main.c    **** static void MX_USB_PCD_Init(void);
  48:Src/main.c    **** 
  49:Src/main.c    **** void reg(void);
  50:Src/main.c    **** void disp_init(void);
  51:Src/main.c    **** void refresh(void);
  52:Src/main.c    **** void clear_screen(void);
  53:Src/main.c    **** void set_screen(void);
  54:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  55:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  56:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  57:Src/main.c    **** 
  58:Src/main.c    **** 
  59:Src/main.c    **** struct status_t{
  60:Src/main.c    ****   float ttip;
  61:Src/main.c    ****   float ttipavg;
  62:Src/main.c    ****   float uin;
  63:Src/main.c    ****   float iin;
  64:Src/main.c    ****   float tref;
  65:Src/main.c    ****   uint8_t button[2];
  66:Src/main.c    **** }s;
  67:Src/main.c    **** 
  68:Src/main.c    **** struct reg_t{
  69:Src/main.c    ****   float target;
  70:Src/main.c    ****   float error;
  71:Src/main.c    ****   float errorprior;
  72:Src/main.c    ****   float ierror;
  73:Src/main.c    ****   float imax;
  74:Src/main.c    ****   float derror;
  75:Src/main.c    ****   int16_t duty;
  76:Src/main.c    ****   float cycletime;
  77:Src/main.c    ****   float Kp;
  78:Src/main.c    ****   float Ki;
  79:Src/main.c    ****   float Kd;
  80:Src/main.c    **** }r = {.Kp = 40.0f,.Ki = 6.0f,.Kd = 12.0f,.cycletime = 0.1f,.imax=200.0f,.target=220.0f};
  81:Src/main.c    **** 
  82:Src/main.c    **** struct tipcal_t{
  83:Src/main.c    ****   float offset;
  84:Src/main.c    ****   float coefficient;
  85:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
  86:Src/main.c    **** 
  87:Src/main.c    **** static uint16_t ADC_raw[4];
  88:Src/main.c    **** 
  89:Src/main.c    **** int main(void)
  90:Src/main.c    **** {
  91:Src/main.c    **** 
ARM GAS  /tmp/ccXMDTdb.s 			page 3


  92:Src/main.c    ****   HAL_Init();
  93:Src/main.c    **** 
  94:Src/main.c    ****   SystemClock_Config();
  95:Src/main.c    **** 
  96:Src/main.c    ****   MX_GPIO_Init();
  97:Src/main.c    ****   MX_DMA_Init();
  98:Src/main.c    ****   MX_ADC_Init();
  99:Src/main.c    ****   MX_I2C1_Init();
 100:Src/main.c    ****   MX_I2C2_Init();
 101:Src/main.c    ****   MX_TIM1_Init();
 102:Src/main.c    ****   MX_USB_PCD_Init();
 103:Src/main.c    **** 
 104:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 105:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 106:Src/main.c    **** 
 107:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 108:Src/main.c    **** 
 109:Src/main.c    ****   HAL_Delay(20);
 110:Src/main.c    ****   disp_init();
 111:Src/main.c    ****   HAL_Delay(60);
 112:Src/main.c    ****   clear_screen();
 113:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 114:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 115:Src/main.c    ****     refresh();
 116:Src/main.c    ****     HAL_Delay(40);
 117:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 118:Src/main.c    ****     NVIC_SystemReset();
 119:Src/main.c    ****   } else {
 120:Src/main.c    ****     draw_string("Otter-Iron", 15, 1 ,1);
 121:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 122:Src/main.c    ****     refresh();
 123:Src/main.c    ****   }
 124:Src/main.c    ****   HAL_Delay(1000);
 125:Src/main.c    **** 
 126:Src/main.c    ****   while (1)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     HAL_Delay(50);
 129:Src/main.c    **** 
 130:Src/main.c    ****     //UI
 131:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 132:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 133:Src/main.c    **** 
 134:Src/main.c    ****     if(s.button[0] == 1){
 135:Src/main.c    ****       r.target -= 5;
 136:Src/main.c    ****       HAL_Delay(50);
 137:Src/main.c    ****     }
 138:Src/main.c    **** 
 139:Src/main.c    ****     if(s.button[1] == 1){
 140:Src/main.c    ****       r.target += 5;
 141:Src/main.c    ****       HAL_Delay(50);
 142:Src/main.c    ****     }
 143:Src/main.c    **** 
 144:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 145:Src/main.c    **** 
 146:Src/main.c    ****     //super shitty display code
 147:Src/main.c    ****     char str1[10] = "          ";
 148:Src/main.c    ****     char str2[10] = "          ";
ARM GAS  /tmp/ccXMDTdb.s 			page 4


 149:Src/main.c    ****     char str3[10] = "          ";
 150:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 151:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 152:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 153:Src/main.c    **** 
 154:Src/main.c    ****     clear_screen();
 155:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 156:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 157:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 158:Src/main.c    ****     if(r.error > 3){
 159:Src/main.c    ****       draw_string("*", 60, 9 ,1);
 160:Src/main.c    ****     } else {
 161:Src/main.c    ****       draw_string(" ", 60, 9 ,1);
 162:Src/main.c    ****     }
 163:Src/main.c    ****     refresh();
 164:Src/main.c    ****   }
 165:Src/main.c    **** }
 166:Src/main.c    **** 
 167:Src/main.c    **** // Main PID controller and ADC readout
 168:Src/main.c    **** void reg(void) {
 169:Src/main.c    **** 
 170:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 171:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 172:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 173:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 174:Src/main.c    **** 
 175:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 176:Src/main.c    **** 
 177:Src/main.c    ****   r.error = r.target - s.ttipavg;
 178:Src/main.c    ****   r.ierror = r.ierror + (r.error*r.cycletime);
 179:Src/main.c    ****   r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 180:Src/main.c    ****   r.derror = (r.error - r.errorprior)/r.cycletime;
 181:Src/main.c    ****   r.duty = r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror;
 182:Src/main.c    ****   r.errorprior = r.error;
 183:Src/main.c    **** 
 184:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 185:Src/main.c    **** 
 186:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 190:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 191:Src/main.c    **** #define OLED_WIDTH        96
 192:Src/main.c    **** #define FRAMEBUFFER_START 17
 193:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 194:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 195:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 196:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 197:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 198:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 199:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 200:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 201:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 202:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 203:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 204:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 205:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
ARM GAS  /tmp/ccXMDTdb.s 			page 5


 206:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 207:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 208:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 209:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 210:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 211:Src/main.c    **** 0x80, 0x33, /*^51*/
 212:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 213:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 214:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 215:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 216:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 217:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 218:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 219:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 220:Src/main.c    **** 0x80, 0xAF /*Display on*/
 221:Src/main.c    **** };
 222:Src/main.c    **** //not Ralim anymore
 223:Src/main.c    **** void disp_init(void) {
 224:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 225:Src/main.c    ****   uint16_t _cnt = 0;
 226:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 227:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 228:Src/main.c    **** }
 229:Src/main.c    **** 
 230:Src/main.c    **** void refresh(void) {
 231:Src/main.c    ****   uint16_t _cnt = 0;
 232:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 233:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 234:Src/main.c    **** }
 235:Src/main.c    **** 
 236:Src/main.c    **** void clear_screen(void) {
 237:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 238:Src/main.c    **** }
 239:Src/main.c    **** void set_screen(void) {
 240:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 241:Src/main.c    **** }
 242:Src/main.c    **** 
 243:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 244:Src/main.c    ****   if(color == 1){
 245:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 246:Src/main.c    ****   } else if (color == 0){
 247:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 248:Src/main.c    ****   }
 249:Src/main.c    **** }
 250:Src/main.c    **** 
 251:Src/main.c    **** #define CHAR_WIDTH 6
 252:Src/main.c    **** #define CHAR_HEIGHT 8
 253:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 254:Src/main.c    ****     c = c & 0x7F;
 255:Src/main.c    ****     if (c < ' ') {
 256:Src/main.c    ****         c = 0;
 257:Src/main.c    ****     } else {
 258:Src/main.c    ****         c -= ' ';
 259:Src/main.c    ****     }
 260:Src/main.c    ****     uint8_t * chr = font[c];
 261:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 262:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
ARM GAS  /tmp/ccXMDTdb.s 			page 6


 263:Src/main.c    ****             if (chr[j] & (1<<i)) {
 264:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 265:Src/main.c    ****             } else {
 266:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 267:Src/main.c    ****             }
 268:Src/main.c    ****         }
 269:Src/main.c    ****     }
 270:Src/main.c    **** }
 271:Src/main.c    **** 
 272:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 273:Src/main.c    ****     while (*str) {
 274:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 275:Src/main.c    ****         x += CHAR_WIDTH;
 276:Src/main.c    ****     }
 277:Src/main.c    **** }
 278:Src/main.c    **** 
 279:Src/main.c    **** void SystemClock_Config(void)
 280:Src/main.c    **** {
 281:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 282:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 283:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 284:Src/main.c    **** 
 285:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 286:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 287:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 288:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 289:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 290:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 291:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 292:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 293:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 294:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 295:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 296:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 297:Src/main.c    **** 
 298:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 299:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 300:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 301:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 302:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 303:Src/main.c    **** 
 304:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 305:Src/main.c    **** 
 306:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 307:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 308:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 309:Src/main.c    **** 
 310:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 311:Src/main.c    **** }
 312:Src/main.c    **** 
 313:Src/main.c    **** static void MX_ADC_Init(void)
 314:Src/main.c    **** {
 315:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 316:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 317:Src/main.c    **** 
 318:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 319:Src/main.c    **** 
ARM GAS  /tmp/ccXMDTdb.s 			page 7


 320:Src/main.c    ****   hadc.Instance = ADC1;
 321:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 322:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 323:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 324:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 325:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 326:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 327:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 328:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 329:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 330:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 331:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 332:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 333:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 334:Src/main.c    ****   HAL_ADC_Init(&hadc);
 335:Src/main.c    **** 
 336:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 337:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 338:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 339:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 340:Src/main.c    **** 
 341:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 342:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 343:Src/main.c    **** 
 344:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 345:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 346:Src/main.c    **** 
 347:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 348:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 349:Src/main.c    **** 
 350:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 351:Src/main.c    **** }
 352:Src/main.c    **** 
 353:Src/main.c    **** static void MX_I2C1_Init(void)
 354:Src/main.c    **** {
 355:Src/main.c    **** 
 356:Src/main.c    ****   hi2c1.Instance = I2C1;
 357:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 358:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 359:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 360:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 361:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 362:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 363:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 364:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 365:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 366:Src/main.c    **** 
 367:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 368:Src/main.c    **** 
 369:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 370:Src/main.c    **** }
 371:Src/main.c    **** 
 372:Src/main.c    **** static void MX_I2C2_Init(void)
 373:Src/main.c    **** {
 374:Src/main.c    **** 
 375:Src/main.c    ****   hi2c2.Instance = I2C2;
 376:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
ARM GAS  /tmp/ccXMDTdb.s 			page 8


 377:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 378:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 379:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 380:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 381:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 382:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 383:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 384:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 385:Src/main.c    **** 
 386:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 387:Src/main.c    **** 
 388:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 389:Src/main.c    **** }
 390:Src/main.c    **** 
 391:Src/main.c    **** static void MX_TIM1_Init(void)
 392:Src/main.c    **** {
 393:Src/main.c    **** 
 394:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 395:Src/main.c    **** 
 396:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 397:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 398:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 399:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 400:Src/main.c    **** 
 401:Src/main.c    ****   htim1.Instance = TIM1;
 402:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 403:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 404:Src/main.c    ****   htim1.Init.Period = 4096;
 405:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 406:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 407:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 408:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 409:Src/main.c    **** 
 410:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 411:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 412:Src/main.c    **** 
 413:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 414:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 415:Src/main.c    **** 
 416:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 417:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 418:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 419:Src/main.c    **** 
 420:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 421:Src/main.c    ****   sConfigOC.Pulse = 50;
 422:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 423:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 424:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 425:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 426:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 427:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 428:Src/main.c    **** 
 429:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 430:Src/main.c    ****   sConfigOC.Pulse = 4090;
 431:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 432:Src/main.c    **** 
 433:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
ARM GAS  /tmp/ccXMDTdb.s 			page 9


 434:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 435:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 436:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 437:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 438:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 439:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 440:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 441:Src/main.c    **** 
 442:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 443:Src/main.c    **** }
 444:Src/main.c    **** /*
 445:Src/main.c    **** static void MX_TIM2_Init(void)
 446:Src/main.c    **** {
 447:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 448:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 449:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 450:Src/main.c    **** 
 451:Src/main.c    ****   htim2.Instance = TIM2;
 452:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 453:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 454:Src/main.c    ****   htim2.Init.Period = 4096;
 455:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 456:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 457:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 458:Src/main.c    **** 
 459:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 460:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 461:Src/main.c    **** 
 462:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 463:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 464:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 465:Src/main.c    **** 
 466:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 467:Src/main.c    ****   sConfigOC.Pulse = 30;
 468:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 469:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 470:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 471:Src/main.c    **** 
 472:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 473:Src/main.c    **** 
 474:Src/main.c    **** }
 475:Src/main.c    **** */
 476:Src/main.c    **** static void MX_USB_PCD_Init(void)
 477:Src/main.c    **** {
 478:Src/main.c    **** 
 479:Src/main.c    ****   hpcd_USB_FS.Instance = USB;
 480:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 481:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 482:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 483:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 484:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 485:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 486:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 487:Src/main.c    **** }
 488:Src/main.c    **** 
 489:Src/main.c    **** static void MX_DMA_Init(void)
 490:Src/main.c    **** {
ARM GAS  /tmp/ccXMDTdb.s 			page 10


 491:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 492:Src/main.c    **** 
 493:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 494:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 495:Src/main.c    ****   /*
 496:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 497:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 498:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 499:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 500:Src/main.c    ****   */
 501:Src/main.c    **** 
 502:Src/main.c    **** }
 503:Src/main.c    **** 
 504:Src/main.c    **** static void MX_GPIO_Init(void)
 505:Src/main.c    **** {
  25              		.loc 1 505 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 00B5     		push	{lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 14, -4
  33 0002 89B0     		sub	sp, sp, #36
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 40
 506:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  36              		.loc 1 506 0
  37 0004 1022     		movs	r2, #16
  38 0006 0021     		movs	r1, #0
  39 0008 04A8     		add	r0, sp, #16
  40 000a FFF7FEFF 		bl	memset
  41              	.LVL0:
  42              	.LBB8:
 507:Src/main.c    **** 
 508:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  43              		.loc 1 508 0
  44 000e 144B     		ldr	r3, .L2
  45 0010 5969     		ldr	r1, [r3, #20]
  46 0012 8020     		movs	r0, #128
  47 0014 8002     		lsls	r0, r0, #10
  48 0016 0143     		orrs	r1, r0
  49 0018 5961     		str	r1, [r3, #20]
  50 001a 5A69     		ldr	r2, [r3, #20]
  51 001c 0240     		ands	r2, r0
  52 001e 0192     		str	r2, [sp, #4]
  53 0020 019A     		ldr	r2, [sp, #4]
  54              	.LBE8:
  55              	.LBB9:
 509:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  56              		.loc 1 509 0
  57 0022 5A69     		ldr	r2, [r3, #20]
  58 0024 8021     		movs	r1, #128
  59 0026 C902     		lsls	r1, r1, #11
  60 0028 0A43     		orrs	r2, r1
  61 002a 5A61     		str	r2, [r3, #20]
  62 002c 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccXMDTdb.s 			page 11


  63 002e 0B40     		ands	r3, r1
  64 0030 0293     		str	r3, [sp, #8]
  65 0032 029B     		ldr	r3, [sp, #8]
  66              	.LBE9:
 510:Src/main.c    **** 
 511:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  67              		.loc 1 511 0
  68 0034 1823     		movs	r3, #24
  69 0036 0393     		str	r3, [sp, #12]
 512:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 513:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  70              		.loc 1 513 0
  71 0038 163B     		subs	r3, r3, #22
  72 003a 0593     		str	r3, [sp, #20]
 514:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  73              		.loc 1 514 0
  74 003c 9020     		movs	r0, #144
  75 003e 03A9     		add	r1, sp, #12
  76 0040 C005     		lsls	r0, r0, #23
  77 0042 FFF7FEFF 		bl	HAL_GPIO_Init
  78              	.LVL1:
 515:Src/main.c    **** 
 516:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
  79              		.loc 1 516 0
  80 0046 8023     		movs	r3, #128
  81 0048 5B01     		lsls	r3, r3, #5
  82 004a 0393     		str	r3, [sp, #12]
 517:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  83              		.loc 1 517 0
  84 004c 0023     		movs	r3, #0
  85 004e 0493     		str	r3, [sp, #16]
 518:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  86              		.loc 1 518 0
  87 0050 0593     		str	r3, [sp, #20]
 519:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
  88              		.loc 1 519 0
  89 0052 03A9     		add	r1, sp, #12
  90 0054 0348     		ldr	r0, .L2+4
  91 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL2:
 520:Src/main.c    **** 
 521:Src/main.c    **** }
  93              		.loc 1 521 0
  94 005a 09B0     		add	sp, sp, #36
  95              		@ sp needed
  96 005c 00BD     		pop	{pc}
  97              	.L3:
  98 005e C046     		.align	2
  99              	.L2:
 100 0060 00100240 		.word	1073876992
 101 0064 00040048 		.word	1207960576
 102              		.cfi_endproc
 103              	.LFE53:
 105              		.section	.text.MX_DMA_Init,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.code	16
ARM GAS  /tmp/ccXMDTdb.s 			page 12


 109              		.thumb_func
 110              		.fpu softvfp
 112              	MX_DMA_Init:
 113              	.LFB52:
 490:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 114              		.loc 1 490 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 00B5     		push	{lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 14, -4
 122 0002 83B0     		sub	sp, sp, #12
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 16
 125              	.LBB10:
 491:Src/main.c    **** 
 126              		.loc 1 491 0
 127 0004 094A     		ldr	r2, .L5
 128 0006 5169     		ldr	r1, [r2, #20]
 129 0008 0123     		movs	r3, #1
 130 000a 1943     		orrs	r1, r3
 131 000c 5161     		str	r1, [r2, #20]
 132 000e 5269     		ldr	r2, [r2, #20]
 133 0010 1340     		ands	r3, r2
 134 0012 0193     		str	r3, [sp, #4]
 135 0014 019B     		ldr	r3, [sp, #4]
 136              	.LBE10:
 493:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 137              		.loc 1 493 0
 138 0016 0022     		movs	r2, #0
 139 0018 0021     		movs	r1, #0
 140 001a 0920     		movs	r0, #9
 141 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 142              	.LVL3:
 494:Src/main.c    ****   /*
 143              		.loc 1 494 0
 144 0020 0920     		movs	r0, #9
 145 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 146              	.LVL4:
 502:Src/main.c    **** 
 147              		.loc 1 502 0
 148 0026 03B0     		add	sp, sp, #12
 149              		@ sp needed
 150 0028 00BD     		pop	{pc}
 151              	.L6:
 152 002a C046     		.align	2
 153              	.L5:
 154 002c 00100240 		.word	1073876992
 155              		.cfi_endproc
 156              	.LFE52:
 158              		.section	.text.MX_ADC_Init,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
ARM GAS  /tmp/ccXMDTdb.s 			page 13


 163              		.fpu softvfp
 165              	MX_ADC_Init:
 166              	.LFB47:
 314:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 167              		.loc 1 314 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 24
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 70B5     		push	{r4, r5, r6, lr}
 172              	.LCFI4:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
 178 0002 86B0     		sub	sp, sp, #24
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 40
 181              	.LBB11:
 315:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 182              		.loc 1 315 0
 183 0004 264B     		ldr	r3, .L8
 184 0006 5A69     		ldr	r2, [r3, #20]
 185 0008 0126     		movs	r6, #1
 186 000a 3243     		orrs	r2, r6
 187 000c 5A61     		str	r2, [r3, #20]
 188 000e 5A69     		ldr	r2, [r3, #20]
 189 0010 3240     		ands	r2, r6
 190 0012 0192     		str	r2, [sp, #4]
 191 0014 019A     		ldr	r2, [sp, #4]
 192              	.LBE11:
 193              	.LBB12:
 316:Src/main.c    **** 
 194              		.loc 1 316 0
 195 0016 9A69     		ldr	r2, [r3, #24]
 196 0018 8021     		movs	r1, #128
 197 001a 8900     		lsls	r1, r1, #2
 198 001c 0A43     		orrs	r2, r1
 199 001e 9A61     		str	r2, [r3, #24]
 200 0020 9B69     		ldr	r3, [r3, #24]
 201 0022 0B40     		ands	r3, r1
 202 0024 0293     		str	r3, [sp, #8]
 203 0026 029B     		ldr	r3, [sp, #8]
 204              	.LBE12:
 318:Src/main.c    **** 
 205              		.loc 1 318 0
 206 0028 0C22     		movs	r2, #12
 207 002a 0021     		movs	r1, #0
 208 002c 03A8     		add	r0, sp, #12
 209 002e FFF7FEFF 		bl	memset
 210              	.LVL5:
 320:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 211              		.loc 1 320 0
 212 0032 1C4C     		ldr	r4, .L8+4
 213 0034 1C4B     		ldr	r3, .L8+8
 214 0036 2360     		str	r3, [r4]
 321:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/ccXMDTdb.s 			page 14


 215              		.loc 1 321 0
 216 0038 0025     		movs	r5, #0
 217 003a 6560     		str	r5, [r4, #4]
 322:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218              		.loc 1 322 0
 219 003c A560     		str	r5, [r4, #8]
 323:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 220              		.loc 1 323 0
 221 003e E560     		str	r5, [r4, #12]
 324:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 222              		.loc 1 324 0
 223 0040 2661     		str	r6, [r4, #16]
 325:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 224              		.loc 1 325 0
 225 0042 0823     		movs	r3, #8
 226 0044 6361     		str	r3, [r4, #20]
 326:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 227              		.loc 1 326 0
 228 0046 A561     		str	r5, [r4, #24]
 327:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 229              		.loc 1 327 0
 230 0048 E561     		str	r5, [r4, #28]
 328:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 231              		.loc 1 328 0
 232 004a 2562     		str	r5, [r4, #32]
 329:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 233              		.loc 1 329 0
 234 004c 6562     		str	r5, [r4, #36]
 330:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 235              		.loc 1 330 0
 236 004e 3833     		adds	r3, r3, #56
 237 0050 A362     		str	r3, [r4, #40]
 331:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 238              		.loc 1 331 0
 239 0052 8023     		movs	r3, #128
 240 0054 DB00     		lsls	r3, r3, #3
 241 0056 E362     		str	r3, [r4, #44]
 332:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 242              		.loc 1 332 0
 243 0058 2663     		str	r6, [r4, #48]
 333:Src/main.c    ****   HAL_ADC_Init(&hadc);
 244              		.loc 1 333 0
 245 005a 6663     		str	r6, [r4, #52]
 334:Src/main.c    **** 
 246              		.loc 1 334 0
 247 005c 2000     		movs	r0, r4
 248 005e FFF7FEFF 		bl	HAL_ADC_Init
 249              	.LVL6:
 336:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 250              		.loc 1 336 0
 251 0062 0395     		str	r5, [sp, #12]
 337:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 252              		.loc 1 337 0
 253 0064 8023     		movs	r3, #128
 254 0066 5B01     		lsls	r3, r3, #5
 255 0068 0493     		str	r3, [sp, #16]
 338:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
ARM GAS  /tmp/ccXMDTdb.s 			page 15


 256              		.loc 1 338 0
 257 006a 0235     		adds	r5, r5, #2
 258 006c 0595     		str	r5, [sp, #20]
 339:Src/main.c    **** 
 259              		.loc 1 339 0
 260 006e 03A9     		add	r1, sp, #12
 261 0070 2000     		movs	r0, r4
 262 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 263              	.LVL7:
 341:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 264              		.loc 1 341 0
 265 0076 0396     		str	r6, [sp, #12]
 342:Src/main.c    **** 
 266              		.loc 1 342 0
 267 0078 03A9     		add	r1, sp, #12
 268 007a 2000     		movs	r0, r4
 269 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 270              	.LVL8:
 344:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 271              		.loc 1 344 0
 272 0080 0395     		str	r5, [sp, #12]
 345:Src/main.c    **** 
 273              		.loc 1 345 0
 274 0082 03A9     		add	r1, sp, #12
 275 0084 2000     		movs	r0, r4
 276 0086 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 277              	.LVL9:
 347:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 278              		.loc 1 347 0
 279 008a 0523     		movs	r3, #5
 280 008c 0393     		str	r3, [sp, #12]
 348:Src/main.c    **** 
 281              		.loc 1 348 0
 282 008e 03A9     		add	r1, sp, #12
 283 0090 2000     		movs	r0, r4
 284 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 285              	.LVL10:
 350:Src/main.c    **** }
 286              		.loc 1 350 0
 287 0096 2000     		movs	r0, r4
 288 0098 FFF7FEFF 		bl	HAL_ADC_MspInit
 289              	.LVL11:
 351:Src/main.c    **** 
 290              		.loc 1 351 0
 291 009c 06B0     		add	sp, sp, #24
 292              		@ sp needed
 293 009e 70BD     		pop	{r4, r5, r6, pc}
 294              	.L9:
 295              		.align	2
 296              	.L8:
 297 00a0 00100240 		.word	1073876992
 298 00a4 00000000 		.word	hadc
 299 00a8 00240140 		.word	1073816576
 300              		.cfi_endproc
 301              	.LFE47:
 303              		.section	.text.MX_I2C1_Init,"ax",%progbits
 304              		.align	1
ARM GAS  /tmp/ccXMDTdb.s 			page 16


 305              		.syntax unified
 306              		.code	16
 307              		.thumb_func
 308              		.fpu softvfp
 310              	MX_I2C1_Init:
 311              	.LFB48:
 354:Src/main.c    **** 
 312              		.loc 1 354 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 10B5     		push	{r4, lr}
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 4, -8
 320              		.cfi_offset 14, -4
 356:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 321              		.loc 1 356 0
 322 0002 0D4C     		ldr	r4, .L11
 323 0004 0D4B     		ldr	r3, .L11+4
 324 0006 2360     		str	r3, [r4]
 357:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 325              		.loc 1 357 0
 326 0008 0D4B     		ldr	r3, .L11+8
 327 000a 6360     		str	r3, [r4, #4]
 358:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 328              		.loc 1 358 0
 329 000c 0023     		movs	r3, #0
 330 000e A360     		str	r3, [r4, #8]
 359:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 331              		.loc 1 359 0
 332 0010 0122     		movs	r2, #1
 333 0012 E260     		str	r2, [r4, #12]
 360:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 334              		.loc 1 360 0
 335 0014 2361     		str	r3, [r4, #16]
 361:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 336              		.loc 1 361 0
 337 0016 6361     		str	r3, [r4, #20]
 362:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 338              		.loc 1 362 0
 339 0018 A361     		str	r3, [r4, #24]
 363:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 340              		.loc 1 363 0
 341 001a E361     		str	r3, [r4, #28]
 364:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 342              		.loc 1 364 0
 343 001c 2362     		str	r3, [r4, #32]
 365:Src/main.c    **** 
 344              		.loc 1 365 0
 345 001e 2000     		movs	r0, r4
 346 0020 FFF7FEFF 		bl	HAL_I2C_Init
 347              	.LVL12:
 367:Src/main.c    **** 
 348              		.loc 1 367 0
 349 0024 0021     		movs	r1, #0
 350 0026 2000     		movs	r0, r4
ARM GAS  /tmp/ccXMDTdb.s 			page 17


 351 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 352              	.LVL13:
 369:Src/main.c    **** }
 353              		.loc 1 369 0
 354 002c 0021     		movs	r1, #0
 355 002e 2000     		movs	r0, r4
 356 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 357              	.LVL14:
 370:Src/main.c    **** 
 358              		.loc 1 370 0
 359              		@ sp needed
 360 0034 10BD     		pop	{r4, pc}
 361              	.L12:
 362 0036 C046     		.align	2
 363              	.L11:
 364 0038 00000000 		.word	hi2c1
 365 003c 00540040 		.word	1073763328
 366 0040 0E090020 		.word	536873230
 367              		.cfi_endproc
 368              	.LFE48:
 370              		.section	.text.MX_I2C2_Init,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.code	16
 374              		.thumb_func
 375              		.fpu softvfp
 377              	MX_I2C2_Init:
 378              	.LFB49:
 373:Src/main.c    **** 
 379              		.loc 1 373 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 10B5     		push	{r4, lr}
 384              	.LCFI7:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 375:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 388              		.loc 1 375 0
 389 0002 0D4C     		ldr	r4, .L14
 390 0004 0D4B     		ldr	r3, .L14+4
 391 0006 2360     		str	r3, [r4]
 376:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 392              		.loc 1 376 0
 393 0008 0D4B     		ldr	r3, .L14+8
 394 000a 6360     		str	r3, [r4, #4]
 377:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 395              		.loc 1 377 0
 396 000c 0023     		movs	r3, #0
 397 000e A360     		str	r3, [r4, #8]
 378:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 398              		.loc 1 378 0
 399 0010 0122     		movs	r2, #1
 400 0012 E260     		str	r2, [r4, #12]
 379:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 401              		.loc 1 379 0
ARM GAS  /tmp/ccXMDTdb.s 			page 18


 402 0014 2361     		str	r3, [r4, #16]
 380:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 403              		.loc 1 380 0
 404 0016 6361     		str	r3, [r4, #20]
 381:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 405              		.loc 1 381 0
 406 0018 A361     		str	r3, [r4, #24]
 382:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 407              		.loc 1 382 0
 408 001a E361     		str	r3, [r4, #28]
 383:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 409              		.loc 1 383 0
 410 001c 2362     		str	r3, [r4, #32]
 384:Src/main.c    **** 
 411              		.loc 1 384 0
 412 001e 2000     		movs	r0, r4
 413 0020 FFF7FEFF 		bl	HAL_I2C_Init
 414              	.LVL15:
 386:Src/main.c    **** 
 415              		.loc 1 386 0
 416 0024 0021     		movs	r1, #0
 417 0026 2000     		movs	r0, r4
 418 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 419              	.LVL16:
 388:Src/main.c    **** }
 420              		.loc 1 388 0
 421 002c 0021     		movs	r1, #0
 422 002e 2000     		movs	r0, r4
 423 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 424              	.LVL17:
 389:Src/main.c    **** 
 425              		.loc 1 389 0
 426              		@ sp needed
 427 0034 10BD     		pop	{r4, pc}
 428              	.L15:
 429 0036 C046     		.align	2
 430              	.L14:
 431 0038 00000000 		.word	hi2c2
 432 003c 00580040 		.word	1073764352
 433 0040 5D3E3020 		.word	540032605
 434              		.cfi_endproc
 435              	.LFE49:
 437              		.section	.text.MX_TIM1_Init,"ax",%progbits
 438              		.align	1
 439              		.syntax unified
 440              		.code	16
 441              		.thumb_func
 442              		.fpu softvfp
 444              	MX_TIM1_Init:
 445              	.LFB50:
 392:Src/main.c    **** 
 446              		.loc 1 392 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 88
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 70B5     		push	{r4, r5, r6, lr}
 451              	.LCFI8:
ARM GAS  /tmp/ccXMDTdb.s 			page 19


 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 4, -16
 454              		.cfi_offset 5, -12
 455              		.cfi_offset 6, -8
 456              		.cfi_offset 14, -4
 457 0002 96B0     		sub	sp, sp, #88
 458              	.LCFI9:
 459              		.cfi_def_cfa_offset 104
 460              	.LBB13:
 394:Src/main.c    **** 
 461              		.loc 1 394 0
 462 0004 354B     		ldr	r3, .L17
 463 0006 9A69     		ldr	r2, [r3, #24]
 464 0008 8025     		movs	r5, #128
 465 000a 2D01     		lsls	r5, r5, #4
 466 000c 2A43     		orrs	r2, r5
 467 000e 9A61     		str	r2, [r3, #24]
 468 0010 9B69     		ldr	r3, [r3, #24]
 469 0012 2B40     		ands	r3, r5
 470 0014 0193     		str	r3, [sp, #4]
 471 0016 019B     		ldr	r3, [sp, #4]
 472              	.LBE13:
 396:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 473              		.loc 1 396 0
 474 0018 1022     		movs	r2, #16
 475 001a 0021     		movs	r1, #0
 476 001c 12A8     		add	r0, sp, #72
 477 001e FFF7FEFF 		bl	memset
 478              	.LVL18:
 397:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 479              		.loc 1 397 0
 480 0022 0822     		movs	r2, #8
 481 0024 0021     		movs	r1, #0
 482 0026 10A8     		add	r0, sp, #64
 483 0028 FFF7FEFF 		bl	memset
 484              	.LVL19:
 398:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 485              		.loc 1 398 0
 486 002c 1C22     		movs	r2, #28
 487 002e 0021     		movs	r1, #0
 488 0030 09A8     		add	r0, sp, #36
 489 0032 FFF7FEFF 		bl	memset
 490              	.LVL20:
 399:Src/main.c    **** 
 491              		.loc 1 399 0
 492 0036 1C22     		movs	r2, #28
 493 0038 0021     		movs	r1, #0
 494 003a 02A8     		add	r0, sp, #8
 495 003c FFF7FEFF 		bl	memset
 496              	.LVL21:
 401:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 497              		.loc 1 401 0
 498 0040 274C     		ldr	r4, .L17+4
 499 0042 284B     		ldr	r3, .L17+8
 500 0044 2360     		str	r3, [r4]
 402:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 501              		.loc 1 402 0
ARM GAS  /tmp/ccXMDTdb.s 			page 20


 502 0046 6560     		str	r5, [r4, #4]
 403:Src/main.c    ****   htim1.Init.Period = 4096;
 503              		.loc 1 403 0
 504 0048 0025     		movs	r5, #0
 505 004a A560     		str	r5, [r4, #8]
 404:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 506              		.loc 1 404 0
 507 004c 8026     		movs	r6, #128
 508 004e 7601     		lsls	r6, r6, #5
 509 0050 E660     		str	r6, [r4, #12]
 405:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 510              		.loc 1 405 0
 511 0052 8023     		movs	r3, #128
 512 0054 9B00     		lsls	r3, r3, #2
 513 0056 2361     		str	r3, [r4, #16]
 406:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 514              		.loc 1 406 0
 515 0058 6561     		str	r5, [r4, #20]
 407:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 516              		.loc 1 407 0
 517 005a 813B     		subs	r3, r3, #129
 518 005c FF3B     		subs	r3, r3, #255
 519 005e A361     		str	r3, [r4, #24]
 408:Src/main.c    **** 
 520              		.loc 1 408 0
 521 0060 2000     		movs	r0, r4
 522 0062 FFF7FEFF 		bl	HAL_TIM_Base_Init
 523              	.LVL22:
 410:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 524              		.loc 1 410 0
 525 0066 1296     		str	r6, [sp, #72]
 411:Src/main.c    **** 
 526              		.loc 1 411 0
 527 0068 12A9     		add	r1, sp, #72
 528 006a 2000     		movs	r0, r4
 529 006c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 530              	.LVL23:
 413:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 531              		.loc 1 413 0
 532 0070 2000     		movs	r0, r4
 533 0072 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 534              	.LVL24:
 414:Src/main.c    **** 
 535              		.loc 1 414 0
 536 0076 2000     		movs	r0, r4
 537 0078 FFF7FEFF 		bl	HAL_TIM_OC_Init
 538              	.LVL25:
 416:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 539              		.loc 1 416 0
 540 007c 1095     		str	r5, [sp, #64]
 417:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 541              		.loc 1 417 0
 542 007e 1195     		str	r5, [sp, #68]
 418:Src/main.c    **** 
 543              		.loc 1 418 0
 544 0080 10A9     		add	r1, sp, #64
 545 0082 2000     		movs	r0, r4
ARM GAS  /tmp/ccXMDTdb.s 			page 21


 546 0084 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 547              	.LVL26:
 420:Src/main.c    ****   sConfigOC.Pulse = 50;
 548              		.loc 1 420 0
 549 0088 6023     		movs	r3, #96
 550 008a 0993     		str	r3, [sp, #36]
 421:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 551              		.loc 1 421 0
 552 008c 2E3B     		subs	r3, r3, #46
 553 008e 0A93     		str	r3, [sp, #40]
 422:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 554              		.loc 1 422 0
 555 0090 0B95     		str	r5, [sp, #44]
 423:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 556              		.loc 1 423 0
 557 0092 0C95     		str	r5, [sp, #48]
 424:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 558              		.loc 1 424 0
 559 0094 0D95     		str	r5, [sp, #52]
 425:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 560              		.loc 1 425 0
 561 0096 0E95     		str	r5, [sp, #56]
 426:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 562              		.loc 1 426 0
 563 0098 0F95     		str	r5, [sp, #60]
 427:Src/main.c    **** 
 564              		.loc 1 427 0
 565 009a 0022     		movs	r2, #0
 566 009c 09A9     		add	r1, sp, #36
 567 009e 2000     		movs	r0, r4
 568 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 569              	.LVL27:
 429:Src/main.c    ****   sConfigOC.Pulse = 4090;
 570              		.loc 1 429 0
 571 00a4 7023     		movs	r3, #112
 572 00a6 0993     		str	r3, [sp, #36]
 430:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 573              		.loc 1 430 0
 574 00a8 0F4B     		ldr	r3, .L17+12
 575 00aa 0A93     		str	r3, [sp, #40]
 431:Src/main.c    **** 
 576              		.loc 1 431 0
 577 00ac 0C22     		movs	r2, #12
 578 00ae 09A9     		add	r1, sp, #36
 579 00b0 2000     		movs	r0, r4
 580 00b2 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 581              	.LVL28:
 433:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 582              		.loc 1 433 0
 583 00b6 0295     		str	r5, [sp, #8]
 434:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 584              		.loc 1 434 0
 585 00b8 0395     		str	r5, [sp, #12]
 435:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 586              		.loc 1 435 0
 587 00ba 0495     		str	r5, [sp, #16]
 436:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
ARM GAS  /tmp/ccXMDTdb.s 			page 22


 588              		.loc 1 436 0
 589 00bc 0595     		str	r5, [sp, #20]
 437:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 590              		.loc 1 437 0
 591 00be 0695     		str	r5, [sp, #24]
 438:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 592              		.loc 1 438 0
 593 00c0 8023     		movs	r3, #128
 594 00c2 9B01     		lsls	r3, r3, #6
 595 00c4 0793     		str	r3, [sp, #28]
 439:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 596              		.loc 1 439 0
 597 00c6 0895     		str	r5, [sp, #32]
 440:Src/main.c    **** 
 598              		.loc 1 440 0
 599 00c8 02A9     		add	r1, sp, #8
 600 00ca 2000     		movs	r0, r4
 601 00cc FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 602              	.LVL29:
 442:Src/main.c    **** }
 603              		.loc 1 442 0
 604 00d0 2000     		movs	r0, r4
 605 00d2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 606              	.LVL30:
 443:Src/main.c    **** /*
 607              		.loc 1 443 0
 608 00d6 16B0     		add	sp, sp, #88
 609              		@ sp needed
 610 00d8 70BD     		pop	{r4, r5, r6, pc}
 611              	.L18:
 612 00da C046     		.align	2
 613              	.L17:
 614 00dc 00100240 		.word	1073876992
 615 00e0 00000000 		.word	htim1
 616 00e4 002C0140 		.word	1073818624
 617 00e8 FA0F0000 		.word	4090
 618              		.cfi_endproc
 619              	.LFE50:
 621              		.section	.text.MX_USB_PCD_Init,"ax",%progbits
 622              		.align	1
 623              		.syntax unified
 624              		.code	16
 625              		.thumb_func
 626              		.fpu softvfp
 628              	MX_USB_PCD_Init:
 629              	.LFB51:
 477:Src/main.c    **** 
 630              		.loc 1 477 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634 0000 10B5     		push	{r4, lr}
 635              	.LCFI10:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 4, -8
 638              		.cfi_offset 14, -4
 479:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
ARM GAS  /tmp/ccXMDTdb.s 			page 23


 639              		.loc 1 479 0
 640 0002 0748     		ldr	r0, .L20
 641 0004 074B     		ldr	r3, .L20+4
 642 0006 0360     		str	r3, [r0]
 480:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 643              		.loc 1 480 0
 644 0008 0823     		movs	r3, #8
 645 000a 4360     		str	r3, [r0, #4]
 481:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 646              		.loc 1 481 0
 647 000c 063B     		subs	r3, r3, #6
 648 000e 8360     		str	r3, [r0, #8]
 482:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 649              		.loc 1 482 0
 650 0010 0361     		str	r3, [r0, #16]
 483:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 651              		.loc 1 483 0
 652 0012 0023     		movs	r3, #0
 653 0014 8361     		str	r3, [r0, #24]
 484:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 654              		.loc 1 484 0
 655 0016 C361     		str	r3, [r0, #28]
 485:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 656              		.loc 1 485 0
 657 0018 0362     		str	r3, [r0, #32]
 486:Src/main.c    **** }
 658              		.loc 1 486 0
 659 001a FFF7FEFF 		bl	HAL_PCD_Init
 660              	.LVL31:
 487:Src/main.c    **** 
 661              		.loc 1 487 0
 662              		@ sp needed
 663 001e 10BD     		pop	{r4, pc}
 664              	.L21:
 665              		.align	2
 666              	.L20:
 667 0020 00000000 		.word	hpcd_USB_FS
 668 0024 005C0040 		.word	1073765376
 669              		.cfi_endproc
 670              	.LFE51:
 672              		.global	__aeabi_ui2f
 673              		.global	__aeabi_f2d
 674              		.global	__aeabi_ddiv
 675              		.global	__aeabi_dmul
 676              		.global	__aeabi_dsub
 677              		.global	__aeabi_d2f
 678              		.global	__aeabi_i2f
 679              		.global	__aeabi_fsub
 680              		.global	__aeabi_fmul
 681              		.global	__aeabi_fdiv
 682              		.global	__aeabi_fadd
 683              		.global	__aeabi_i2d
 684              		.global	__aeabi_fcmpgt
 685              		.global	__aeabi_fcmplt
 686              		.global	__aeabi_f2iz
 687              		.section	.text.reg,"ax",%progbits
 688              		.align	1
ARM GAS  /tmp/ccXMDTdb.s 			page 24


 689              		.global	reg
 690              		.syntax unified
 691              		.code	16
 692              		.thumb_func
 693              		.fpu softvfp
 695              	reg:
 696              	.LFB38:
 168:Src/main.c    **** 
 697              		.loc 1 168 0
 698              		.cfi_startproc
 699              		@ args = 0, pretend = 0, frame = 8
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 702              	.LCFI11:
 703              		.cfi_def_cfa_offset 20
 704              		.cfi_offset 4, -20
 705              		.cfi_offset 5, -16
 706              		.cfi_offset 6, -12
 707              		.cfi_offset 7, -8
 708              		.cfi_offset 14, -4
 709 0002 C646     		mov	lr, r8
 710 0004 00B5     		push	{lr}
 711              	.LCFI12:
 712              		.cfi_def_cfa_offset 24
 713              		.cfi_offset 8, -24
 714 0006 82B0     		sub	sp, sp, #8
 715              	.LCFI13:
 716              		.cfi_def_cfa_offset 32
 170:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 717              		.loc 1 170 0
 718 0008 5B4D     		ldr	r5, .L30
 719 000a E888     		ldrh	r0, [r5, #6]
 720 000c FFF7FEFF 		bl	__aeabi_ui2f
 721              	.LVL32:
 722 0010 FFF7FEFF 		bl	__aeabi_f2d
 723              	.LVL33:
 724 0014 0022     		movs	r2, #0
 725 0016 594B     		ldr	r3, .L30+4
 726 0018 FFF7FEFF 		bl	__aeabi_ddiv
 727              	.LVL34:
 728 001c 584A     		ldr	r2, .L30+8
 729 001e 594B     		ldr	r3, .L30+12
 730 0020 FFF7FEFF 		bl	__aeabi_dmul
 731              	.LVL35:
 732 0024 0022     		movs	r2, #0
 733 0026 584B     		ldr	r3, .L30+16
 734 0028 FFF7FEFF 		bl	__aeabi_dsub
 735              	.LVL36:
 736 002c 574A     		ldr	r2, .L30+20
 737 002e 584B     		ldr	r3, .L30+24
 738 0030 FFF7FEFF 		bl	__aeabi_ddiv
 739              	.LVL37:
 740 0034 FFF7FEFF 		bl	__aeabi_d2f
 741              	.LVL38:
 742 0038 061C     		adds	r6, r0, #0
 743 003a 564C     		ldr	r4, .L30+28
 744 003c 2061     		str	r0, [r4, #16]
ARM GAS  /tmp/ccXMDTdb.s 			page 25


 171:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 745              		.loc 1 171 0
 746 003e 6888     		ldrh	r0, [r5, #2]
 747 0040 554F     		ldr	r7, .L30+32
 748 0042 3B68     		ldr	r3, [r7]
 749 0044 9846     		mov	r8, r3
 750 0046 FFF7FEFF 		bl	__aeabi_i2f
 751              	.LVL39:
 752 004a 4146     		mov	r1, r8
 753 004c FFF7FEFF 		bl	__aeabi_fsub
 754              	.LVL40:
 755 0050 7968     		ldr	r1, [r7, #4]
 756 0052 FFF7FEFF 		bl	__aeabi_fmul
 757              	.LVL41:
 758 0056 5149     		ldr	r1, .L30+36
 759 0058 FFF7FEFF 		bl	__aeabi_fdiv
 760              	.LVL42:
 761 005c 011C     		adds	r1, r0, #0
 762 005e 301C     		adds	r0, r6, #0
 763 0060 FFF7FEFF 		bl	__aeabi_fadd
 764              	.LVL43:
 765 0064 061C     		adds	r6, r0, #0
 766 0066 2060     		str	r0, [r4]
 172:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 767              		.loc 1 172 0
 768 0068 A888     		ldrh	r0, [r5, #4]
 769 006a FFF7FEFF 		bl	__aeabi_i2d
 770              	.LVL44:
 771 006e 0022     		movs	r2, #0
 772 0070 424B     		ldr	r3, .L30+4
 773 0072 FFF7FEFF 		bl	__aeabi_ddiv
 774              	.LVL45:
 775 0076 424A     		ldr	r2, .L30+8
 776 0078 424B     		ldr	r3, .L30+12
 777 007a FFF7FEFF 		bl	__aeabi_dmul
 778              	.LVL46:
 779 007e 404A     		ldr	r2, .L30+8
 780 0080 474B     		ldr	r3, .L30+40
 781 0082 FFF7FEFF 		bl	__aeabi_dmul
 782              	.LVL47:
 783 0086 FFF7FEFF 		bl	__aeabi_d2f
 784              	.LVL48:
 785 008a A060     		str	r0, [r4, #8]
 173:Src/main.c    **** 
 786              		.loc 1 173 0
 787 008c 2888     		ldrh	r0, [r5]
 788 008e FFF7FEFF 		bl	__aeabi_i2d
 789              	.LVL49:
 790 0092 0022     		movs	r2, #0
 791 0094 394B     		ldr	r3, .L30+4
 792 0096 FFF7FEFF 		bl	__aeabi_ddiv
 793              	.LVL50:
 794 009a 394A     		ldr	r2, .L30+8
 795 009c 394B     		ldr	r3, .L30+12
 796 009e FFF7FEFF 		bl	__aeabi_dmul
 797              	.LVL51:
 798 00a2 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  /tmp/ccXMDTdb.s 			page 26


 799              	.LVL52:
 800 00a6 E060     		str	r0, [r4, #12]
 175:Src/main.c    **** 
 801              		.loc 1 175 0
 802 00a8 3E49     		ldr	r1, .L30+44
 803 00aa 6068     		ldr	r0, [r4, #4]
 804 00ac FFF7FEFF 		bl	__aeabi_fmul
 805              	.LVL53:
 806 00b0 051C     		adds	r5, r0, #0
 807 00b2 3D49     		ldr	r1, .L30+48
 808 00b4 301C     		adds	r0, r6, #0
 809 00b6 FFF7FEFF 		bl	__aeabi_fmul
 810              	.LVL54:
 811 00ba 011C     		adds	r1, r0, #0
 812 00bc 281C     		adds	r0, r5, #0
 813 00be FFF7FEFF 		bl	__aeabi_fadd
 814              	.LVL55:
 815 00c2 011C     		adds	r1, r0, #0
 816 00c4 6060     		str	r0, [r4, #4]
 177:Src/main.c    ****   r.ierror = r.ierror + (r.error*r.cycletime);
 817              		.loc 1 177 0
 818 00c6 394C     		ldr	r4, .L30+52
 819 00c8 2068     		ldr	r0, [r4]
 820 00ca FFF7FEFF 		bl	__aeabi_fsub
 821              	.LVL56:
 822 00ce 051C     		adds	r5, r0, #0
 823 00d0 6060     		str	r0, [r4, #4]
 178:Src/main.c    ****   r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 824              		.loc 1 178 0
 825 00d2 E768     		ldr	r7, [r4, #12]
 826 00d4 E669     		ldr	r6, [r4, #28]
 827 00d6 311C     		adds	r1, r6, #0
 828 00d8 FFF7FEFF 		bl	__aeabi_fmul
 829              	.LVL57:
 830 00dc 011C     		adds	r1, r0, #0
 831 00de 381C     		adds	r0, r7, #0
 832 00e0 FFF7FEFF 		bl	__aeabi_fadd
 833              	.LVL58:
 179:Src/main.c    ****   r.derror = (r.error - r.errorprior)/r.cycletime;
 834              		.loc 1 179 0
 835 00e4 2769     		ldr	r7, [r4, #16]
 836 00e6 391C     		adds	r1, r7, #0
 837 00e8 041C     		adds	r4, r0, #0
 838 00ea FFF7FEFF 		bl	__aeabi_fcmpgt
 839              	.LVL59:
 840 00ee 0028     		cmp	r0, #0
 841 00f0 09D1     		bne	.L23
 179:Src/main.c    ****   r.derror = (r.error - r.errorprior)/r.cycletime;
 842              		.loc 1 179 0 is_stmt 0 discriminator 2
 843 00f2 8023     		movs	r3, #128
 844 00f4 1B06     		lsls	r3, r3, #24
 845 00f6 F918     		adds	r1, r7, r3
 846 00f8 0F1C     		adds	r7, r1, #0
 847 00fa 201C     		adds	r0, r4, #0
 848 00fc FFF7FEFF 		bl	__aeabi_fcmplt
 849              	.LVL60:
 850 0100 0028     		cmp	r0, #0
ARM GAS  /tmp/ccXMDTdb.s 			page 27


 851 0102 00D1     		bne	.L23
 852 0104 271C     		adds	r7, r4, #0
 853              	.L23:
 179:Src/main.c    ****   r.derror = (r.error - r.errorprior)/r.cycletime;
 854              		.loc 1 179 0 discriminator 8
 855 0106 294C     		ldr	r4, .L30+52
 856 0108 E760     		str	r7, [r4, #12]
 180:Src/main.c    ****   r.duty = r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror;
 857              		.loc 1 180 0 is_stmt 1 discriminator 8
 858 010a A168     		ldr	r1, [r4, #8]
 859 010c 281C     		adds	r0, r5, #0
 860 010e FFF7FEFF 		bl	__aeabi_fsub
 861              	.LVL61:
 862 0112 311C     		adds	r1, r6, #0
 863 0114 FFF7FEFF 		bl	__aeabi_fdiv
 864              	.LVL62:
 865 0118 061C     		adds	r6, r0, #0
 866 011a 6061     		str	r0, [r4, #20]
 181:Src/main.c    ****   r.errorprior = r.error;
 867              		.loc 1 181 0 discriminator 8
 868 011c 216A     		ldr	r1, [r4, #32]
 869 011e 281C     		adds	r0, r5, #0
 870 0120 FFF7FEFF 		bl	__aeabi_fmul
 871              	.LVL63:
 872 0124 0190     		str	r0, [sp, #4]
 873 0126 391C     		adds	r1, r7, #0
 874 0128 606A     		ldr	r0, [r4, #36]
 875 012a FFF7FEFF 		bl	__aeabi_fmul
 876              	.LVL64:
 877 012e 011C     		adds	r1, r0, #0
 878 0130 0198     		ldr	r0, [sp, #4]
 879 0132 FFF7FEFF 		bl	__aeabi_fadd
 880              	.LVL65:
 881 0136 071C     		adds	r7, r0, #0
 882 0138 A16A     		ldr	r1, [r4, #40]
 883 013a 301C     		adds	r0, r6, #0
 884 013c FFF7FEFF 		bl	__aeabi_fmul
 885              	.LVL66:
 886 0140 011C     		adds	r1, r0, #0
 887 0142 381C     		adds	r0, r7, #0
 888 0144 FFF7FEFF 		bl	__aeabi_fadd
 889              	.LVL67:
 890 0148 FFF7FEFF 		bl	__aeabi_f2iz
 891              	.LVL68:
 892 014c 00B2     		sxth	r0, r0
 182:Src/main.c    **** 
 893              		.loc 1 182 0 discriminator 8
 894 014e A560     		str	r5, [r4, #8]
 184:Src/main.c    **** 
 895              		.loc 1 184 0 discriminator 8
 896 0150 174B     		ldr	r3, .L30+56
 897 0152 9842     		cmp	r0, r3
 898 0154 0EDC     		bgt	.L28
 184:Src/main.c    **** 
 899              		.loc 1 184 0 is_stmt 0 discriminator 1
 900 0156 031C     		adds	r3, r0, #0
 901 0158 0028     		cmp	r0, #0
ARM GAS  /tmp/ccXMDTdb.s 			page 28


 902 015a 09DB     		blt	.L29
 903              	.L26:
 904 015c 1BB2     		sxth	r3, r3
 905              	.L25:
 184:Src/main.c    **** 
 906              		.loc 1 184 0 discriminator 4
 907 015e 134A     		ldr	r2, .L30+52
 908 0160 1383     		strh	r3, [r2, #24]
 186:Src/main.c    **** }
 909              		.loc 1 186 0 is_stmt 1 discriminator 4
 910 0162 144A     		ldr	r2, .L30+60
 911 0164 1268     		ldr	r2, [r2]
 912 0166 5363     		str	r3, [r2, #52]
 187:Src/main.c    **** 
 913              		.loc 1 187 0 discriminator 4
 914 0168 02B0     		add	sp, sp, #8
 915              		@ sp needed
 916 016a 04BC     		pop	{r2}
 917 016c 9046     		mov	r8, r2
 918 016e F0BD     		pop	{r4, r5, r6, r7, pc}
 919              	.L29:
 184:Src/main.c    **** 
 920              		.loc 1 184 0 discriminator 1
 921 0170 0023     		movs	r3, #0
 922 0172 F3E7     		b	.L26
 923              	.L28:
 184:Src/main.c    **** 
 924              		.loc 1 184 0 is_stmt 0
 925 0174 0E4B     		ldr	r3, .L30+56
 926 0176 F2E7     		b	.L25
 927              	.L31:
 928              		.align	2
 929              	.L30:
 930 0178 00000000 		.word	.LANCHOR0
 931 017c 00FEAF40 		.word	1085275648
 932 0180 66666666 		.word	1717986918
 933 0184 66660A40 		.word	1074423398
 934 0188 0000E03F 		.word	1071644672
 935 018c 7B14AE47 		.word	1202590843
 936 0190 E17A843F 		.word	1065646817
 937 0194 00000000 		.word	s
 938 0198 00000000 		.word	.LANCHOR1
 939 019c 00007A44 		.word	1148846080
 940 01a0 66661A40 		.word	1075471974
 941 01a4 CDCC4C3F 		.word	1061997773
 942 01a8 CCCC4C3E 		.word	1045220556
 943 01ac 00000000 		.word	.LANCHOR2
 944 01b0 D20F0000 		.word	4050
 945 01b4 00000000 		.word	htim1
 946              		.cfi_endproc
 947              	.LFE38:
 949              		.section	.text.disp_init,"ax",%progbits
 950              		.align	1
 951              		.global	disp_init
 952              		.syntax unified
 953              		.code	16
 954              		.thumb_func
ARM GAS  /tmp/ccXMDTdb.s 			page 29


 955              		.fpu softvfp
 957              	disp_init:
 958              	.LFB39:
 223:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 959              		.loc 1 223 0 is_stmt 1
 960              		.cfi_startproc
 961              		@ args = 0, pretend = 0, frame = 0
 962              		@ frame_needed = 0, uses_anonymous_args = 0
 963 0000 10B5     		push	{r4, lr}
 964              	.LCFI14:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 4, -8
 967              		.cfi_offset 14, -4
 968 0002 82B0     		sub	sp, sp, #8
 969              	.LCFI15:
 970              		.cfi_def_cfa_offset 16
 224:Src/main.c    ****   uint16_t _cnt = 0;
 971              		.loc 1 224 0
 972 0004 1122     		movs	r2, #17
 973 0006 0E49     		ldr	r1, .L36
 974 0008 0E48     		ldr	r0, .L36+4
 975 000a FFF7FEFF 		bl	memcpy
 976              	.LVL69:
 225:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 977              		.loc 1 225 0
 978 000e 0024     		movs	r4, #0
 979              	.LVL70:
 980              	.L33:
 226:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 981              		.loc 1 226 0 discriminator 1
 982 0010 0D48     		ldr	r0, .L36+8
 983 0012 FFF7FEFF 		bl	HAL_I2C_GetState
 984              	.LVL71:
 985 0016 2028     		cmp	r0, #32
 986 0018 06D0     		beq	.L34
 226:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 987              		.loc 1 226 0 is_stmt 0 discriminator 2
 988 001a 631C     		adds	r3, r4, #1
 989 001c 9BB2     		uxth	r3, r3
 990              	.LVL72:
 991 001e 0B4A     		ldr	r2, .L36+12
 992 0020 9442     		cmp	r4, r2
 993 0022 01D8     		bhi	.L34
 226:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 994              		.loc 1 226 0
 995 0024 1C00     		movs	r4, r3
 996 0026 F3E7     		b	.L33
 997              	.LVL73:
 998              	.L34:
 227:Src/main.c    **** }
 999              		.loc 1 227 0 is_stmt 1
 1000 0028 FA23     		movs	r3, #250
 1001 002a 9B00     		lsls	r3, r3, #2
 1002 002c 0093     		str	r3, [sp]
 1003 002e 3223     		movs	r3, #50
 1004 0030 074A     		ldr	r2, .L36+16
 1005 0032 7821     		movs	r1, #120
ARM GAS  /tmp/ccXMDTdb.s 			page 30


 1006 0034 0448     		ldr	r0, .L36+8
 1007 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1008              	.LVL74:
 228:Src/main.c    **** 
 1009              		.loc 1 228 0
 1010 003a 02B0     		add	sp, sp, #8
 1011              		@ sp needed
 1012 003c 10BD     		pop	{r4, pc}
 1013              	.L37:
 1014 003e C046     		.align	2
 1015              	.L36:
 1016 0040 00000000 		.word	.LANCHOR3
 1017 0044 00000000 		.word	screenBuffer
 1018 0048 00000000 		.word	hi2c1
 1019 004c 10270000 		.word	10000
 1020 0050 00000000 		.word	.LANCHOR4
 1021              		.cfi_endproc
 1022              	.LFE39:
 1024              		.section	.text.refresh,"ax",%progbits
 1025              		.align	1
 1026              		.global	refresh
 1027              		.syntax unified
 1028              		.code	16
 1029              		.thumb_func
 1030              		.fpu softvfp
 1032              	refresh:
 1033              	.LFB40:
 230:Src/main.c    ****   uint16_t _cnt = 0;
 1034              		.loc 1 230 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038 0000 10B5     		push	{r4, lr}
 1039              	.LCFI16:
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 4, -8
 1042              		.cfi_offset 14, -4
 1043 0002 82B0     		sub	sp, sp, #8
 1044              	.LCFI17:
 1045              		.cfi_def_cfa_offset 16
 1046              	.LVL75:
 231:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1047              		.loc 1 231 0
 1048 0004 0024     		movs	r4, #0
 1049              	.LVL76:
 1050              	.L39:
 232:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1051              		.loc 1 232 0 discriminator 1
 1052 0006 0B48     		ldr	r0, .L42
 1053 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1054              	.LVL77:
 1055 000c 2028     		cmp	r0, #32
 1056 000e 06D0     		beq	.L40
 232:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1057              		.loc 1 232 0 is_stmt 0 discriminator 2
 1058 0010 631C     		adds	r3, r4, #1
 1059 0012 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccXMDTdb.s 			page 31


 1060              	.LVL78:
 1061 0014 084A     		ldr	r2, .L42+4
 1062 0016 9442     		cmp	r4, r2
 1063 0018 01D8     		bhi	.L40
 232:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1064              		.loc 1 232 0
 1065 001a 1C00     		movs	r4, r3
 1066 001c F3E7     		b	.L39
 1067              	.LVL79:
 1068              	.L40:
 233:Src/main.c    **** }
 1069              		.loc 1 233 0 is_stmt 1
 1070 001e FA23     		movs	r3, #250
 1071 0020 9B00     		lsls	r3, r3, #2
 1072 0022 0093     		str	r3, [sp]
 1073 0024 D123     		movs	r3, #209
 1074 0026 054A     		ldr	r2, .L42+8
 1075 0028 7821     		movs	r1, #120
 1076 002a 0248     		ldr	r0, .L42
 1077 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1078              	.LVL80:
 234:Src/main.c    **** 
 1079              		.loc 1 234 0
 1080 0030 02B0     		add	sp, sp, #8
 1081              		@ sp needed
 1082 0032 10BD     		pop	{r4, pc}
 1083              	.L43:
 1084              		.align	2
 1085              	.L42:
 1086 0034 00000000 		.word	hi2c1
 1087 0038 10270000 		.word	10000
 1088 003c 00000000 		.word	screenBuffer
 1089              		.cfi_endproc
 1090              	.LFE40:
 1092              		.section	.text.clear_screen,"ax",%progbits
 1093              		.align	1
 1094              		.global	clear_screen
 1095              		.syntax unified
 1096              		.code	16
 1097              		.thumb_func
 1098              		.fpu softvfp
 1100              	clear_screen:
 1101              	.LFB41:
 236:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1102              		.loc 1 236 0
 1103              		.cfi_startproc
 1104              		@ args = 0, pretend = 0, frame = 0
 1105              		@ frame_needed = 0, uses_anonymous_args = 0
 1106 0000 10B5     		push	{r4, lr}
 1107              	.LCFI18:
 1108              		.cfi_def_cfa_offset 8
 1109              		.cfi_offset 4, -8
 1110              		.cfi_offset 14, -4
 237:Src/main.c    **** }
 1111              		.loc 1 237 0
 1112 0002 C022     		movs	r2, #192
 1113 0004 0021     		movs	r1, #0
ARM GAS  /tmp/ccXMDTdb.s 			page 32


 1114 0006 0248     		ldr	r0, .L45
 1115 0008 FFF7FEFF 		bl	memset
 1116              	.LVL81:
 238:Src/main.c    **** void set_screen(void) {
 1117              		.loc 1 238 0
 1118              		@ sp needed
 1119 000c 10BD     		pop	{r4, pc}
 1120              	.L46:
 1121 000e C046     		.align	2
 1122              	.L45:
 1123 0010 11000000 		.word	screenBuffer+17
 1124              		.cfi_endproc
 1125              	.LFE41:
 1127              		.section	.text.set_screen,"ax",%progbits
 1128              		.align	1
 1129              		.global	set_screen
 1130              		.syntax unified
 1131              		.code	16
 1132              		.thumb_func
 1133              		.fpu softvfp
 1135              	set_screen:
 1136              	.LFB42:
 239:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1137              		.loc 1 239 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141 0000 10B5     		push	{r4, lr}
 1142              	.LCFI19:
 1143              		.cfi_def_cfa_offset 8
 1144              		.cfi_offset 4, -8
 1145              		.cfi_offset 14, -4
 240:Src/main.c    **** }
 1146              		.loc 1 240 0
 1147 0002 C022     		movs	r2, #192
 1148 0004 FF21     		movs	r1, #255
 1149 0006 0248     		ldr	r0, .L48
 1150 0008 FFF7FEFF 		bl	memset
 1151              	.LVL82:
 241:Src/main.c    **** 
 1152              		.loc 1 241 0
 1153              		@ sp needed
 1154 000c 10BD     		pop	{r4, pc}
 1155              	.L49:
 1156 000e C046     		.align	2
 1157              	.L48:
 1158 0010 11000000 		.word	screenBuffer+17
 1159              		.cfi_endproc
 1160              	.LFE42:
 1162              		.section	.text.write_pixel,"ax",%progbits
 1163              		.align	1
 1164              		.global	write_pixel
 1165              		.syntax unified
 1166              		.code	16
 1167              		.thumb_func
 1168              		.fpu softvfp
 1170              	write_pixel:
ARM GAS  /tmp/ccXMDTdb.s 			page 33


 1171              	.LFB43:
 243:Src/main.c    ****   if(color == 1){
 1172              		.loc 1 243 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 0
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              	.LVL83:
 1177 0000 30B5     		push	{r4, r5, lr}
 1178              	.LCFI20:
 1179              		.cfi_def_cfa_offset 12
 1180              		.cfi_offset 4, -12
 1181              		.cfi_offset 5, -8
 1182              		.cfi_offset 14, -4
 244:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1183              		.loc 1 244 0
 1184 0002 012A     		cmp	r2, #1
 1185 0004 18D0     		beq	.L53
 246:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1186              		.loc 1 246 0
 1187 0006 002A     		cmp	r2, #0
 1188 0008 15D1     		bne	.L50
 247:Src/main.c    ****   }
 1189              		.loc 1 247 0
 1190 000a CC17     		asrs	r4, r1, #31
 1191 000c 0723     		movs	r3, #7
 1192 000e 1A00     		movs	r2, r3
 1193              	.LVL84:
 1194 0010 2240     		ands	r2, r4
 1195 0012 5218     		adds	r2, r2, r1
 1196 0014 D210     		asrs	r2, r2, #3
 1197 0016 5500     		lsls	r5, r2, #1
 1198 0018 AA18     		adds	r2, r5, r2
 1199 001a 5501     		lsls	r5, r2, #5
 1200 001c 2818     		adds	r0, r5, r0
 1201              	.LVL85:
 1202 001e 1130     		adds	r0, r0, #17
 1203 0020 640F     		lsrs	r4, r4, #29
 1204 0022 0919     		adds	r1, r1, r4
 1205              	.LVL86:
 1206 0024 1940     		ands	r1, r3
 1207 0026 091B     		subs	r1, r1, r4
 1208 0028 09B2     		sxth	r1, r1
 1209 002a 0122     		movs	r2, #1
 1210 002c 8A40     		lsls	r2, r2, r1
 1211 002e 0E49     		ldr	r1, .L54
 1212 0030 0B5C     		ldrb	r3, [r1, r0]
 1213 0032 9343     		bics	r3, r2
 1214 0034 0B54     		strb	r3, [r1, r0]
 1215              	.L50:
 249:Src/main.c    **** 
 1216              		.loc 1 249 0
 1217              		@ sp needed
 1218 0036 30BD     		pop	{r4, r5, pc}
 1219              	.LVL87:
 1220              	.L53:
 245:Src/main.c    ****   } else if (color == 0){
 1221              		.loc 1 245 0
ARM GAS  /tmp/ccXMDTdb.s 			page 34


 1222 0038 CC17     		asrs	r4, r1, #31
 1223 003a 0723     		movs	r3, #7
 1224 003c 1A00     		movs	r2, r3
 1225              	.LVL88:
 1226 003e 2240     		ands	r2, r4
 1227 0040 5218     		adds	r2, r2, r1
 1228 0042 D210     		asrs	r2, r2, #3
 1229 0044 5500     		lsls	r5, r2, #1
 1230 0046 AA18     		adds	r2, r5, r2
 1231 0048 5501     		lsls	r5, r2, #5
 1232 004a 2818     		adds	r0, r5, r0
 1233              	.LVL89:
 1234 004c 1130     		adds	r0, r0, #17
 1235 004e 640F     		lsrs	r4, r4, #29
 1236 0050 0919     		adds	r1, r1, r4
 1237              	.LVL90:
 1238 0052 0B40     		ands	r3, r1
 1239 0054 1B1B     		subs	r3, r3, r4
 1240 0056 1BB2     		sxth	r3, r3
 1241 0058 0122     		movs	r2, #1
 1242 005a 9A40     		lsls	r2, r2, r3
 1243 005c 0249     		ldr	r1, .L54
 1244 005e 0B5C     		ldrb	r3, [r1, r0]
 1245 0060 1343     		orrs	r3, r2
 1246 0062 0B54     		strb	r3, [r1, r0]
 1247 0064 E7E7     		b	.L50
 1248              	.L55:
 1249 0066 C046     		.align	2
 1250              	.L54:
 1251 0068 00000000 		.word	screenBuffer
 1252              		.cfi_endproc
 1253              	.LFE43:
 1255              		.section	.text.draw_char,"ax",%progbits
 1256              		.align	1
 1257              		.global	draw_char
 1258              		.syntax unified
 1259              		.code	16
 1260              		.thumb_func
 1261              		.fpu softvfp
 1263              	draw_char:
 1264              	.LFB44:
 253:Src/main.c    ****     c = c & 0x7F;
 1265              		.loc 1 253 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 0
 1268              		@ frame_needed = 0, uses_anonymous_args = 0
 1269              	.LVL91:
 1270 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1271              	.LCFI21:
 1272              		.cfi_def_cfa_offset 20
 1273              		.cfi_offset 4, -20
 1274              		.cfi_offset 5, -16
 1275              		.cfi_offset 6, -12
 1276              		.cfi_offset 7, -8
 1277              		.cfi_offset 14, -4
 1278 0002 C646     		mov	lr, r8
 1279 0004 00B5     		push	{lr}
ARM GAS  /tmp/ccXMDTdb.s 			page 35


 1280              	.LCFI22:
 1281              		.cfi_def_cfa_offset 24
 1282              		.cfi_offset 8, -24
 1283 0006 0F00     		movs	r7, r1
 1284 0008 9046     		mov	r8, r2
 254:Src/main.c    ****     if (c < ' ') {
 1285              		.loc 1 254 0
 1286 000a 7F23     		movs	r3, #127
 1287              	.LVL92:
 1288 000c 0340     		ands	r3, r0
 1289              	.LVL93:
 255:Src/main.c    ****         c = 0;
 1290              		.loc 1 255 0
 1291 000e 1F2B     		cmp	r3, #31
 1292 0010 08D9     		bls	.L63
 258:Src/main.c    ****     }
 1293              		.loc 1 258 0
 1294 0012 203B     		subs	r3, r3, #32
 1295              	.LVL94:
 1296 0014 DBB2     		uxtb	r3, r3
 1297              	.LVL95:
 1298              	.L57:
 260:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 1299              		.loc 1 260 0
 1300 0016 5A00     		lsls	r2, r3, #1
 1301              	.LVL96:
 1302 0018 D318     		adds	r3, r2, r3
 1303              	.LVL97:
 1304 001a 5E00     		lsls	r6, r3, #1
 1305 001c 114B     		ldr	r3, .L67
 1306 001e F618     		adds	r6, r6, r3
 1307              	.LVL98:
 1308              	.LBB14:
 261:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1309              		.loc 1 261 0
 1310 0020 0025     		movs	r5, #0
 1311 0022 18E0     		b	.L58
 1312              	.LVL99:
 1313              	.L63:
 1314              	.LBE14:
 256:Src/main.c    ****     } else {
 1315              		.loc 1 256 0
 1316 0024 0023     		movs	r3, #0
 1317              	.LVL100:
 1318 0026 F6E7     		b	.L57
 1319              	.LVL101:
 1320              	.L59:
 1321              	.LBB17:
 1322              	.LBB15:
 266:Src/main.c    ****             }
 1323              		.loc 1 266 0
 1324 0028 4346     		mov	r3, r8
 1325 002a 1919     		adds	r1, r3, r4
 1326 002c 7819     		adds	r0, r7, r5
 1327 002e 0022     		movs	r2, #0
 1328 0030 FFF7FEFF 		bl	write_pixel
 1329              	.LVL102:
ARM GAS  /tmp/ccXMDTdb.s 			page 36


 1330              	.L60:
 262:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1331              		.loc 1 262 0 discriminator 2
 1332 0034 0134     		adds	r4, r4, #1
 1333              	.LVL103:
 1334 0036 E4B2     		uxtb	r4, r4
 1335              	.LVL104:
 1336              	.L62:
 262:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1337              		.loc 1 262 0 is_stmt 0 discriminator 1
 1338 0038 072C     		cmp	r4, #7
 1339 003a 0AD8     		bhi	.L65
 263:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 1340              		.loc 1 263 0 is_stmt 1
 1341 003c 735D     		ldrb	r3, [r6, r5]
 1342 003e 2341     		asrs	r3, r3, r4
 1343 0040 DB07     		lsls	r3, r3, #31
 1344 0042 F1D5     		bpl	.L59
 264:Src/main.c    ****             } else {
 1345              		.loc 1 264 0
 1346 0044 4346     		mov	r3, r8
 1347 0046 1919     		adds	r1, r3, r4
 1348 0048 7819     		adds	r0, r7, r5
 1349 004a 0122     		movs	r2, #1
 1350 004c FFF7FEFF 		bl	write_pixel
 1351              	.LVL105:
 1352 0050 F0E7     		b	.L60
 1353              	.L65:
 1354              	.LBE15:
 261:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1355              		.loc 1 261 0 discriminator 2
 1356 0052 0135     		adds	r5, r5, #1
 1357              	.LVL106:
 1358 0054 EDB2     		uxtb	r5, r5
 1359              	.LVL107:
 1360              	.L58:
 261:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1361              		.loc 1 261 0 is_stmt 0 discriminator 1
 1362 0056 052D     		cmp	r5, #5
 1363 0058 01D8     		bhi	.L66
 1364              	.LBB16:
 262:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1365              		.loc 1 262 0 is_stmt 1
 1366 005a 0024     		movs	r4, #0
 1367 005c ECE7     		b	.L62
 1368              	.L66:
 1369              	.LBE16:
 1370              	.LBE17:
 270:Src/main.c    **** 
 1371              		.loc 1 270 0
 1372              		@ sp needed
 1373              	.LVL108:
 1374              	.LVL109:
 1375 005e 04BC     		pop	{r2}
 1376 0060 9046     		mov	r8, r2
 1377 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1378              	.L68:
ARM GAS  /tmp/ccXMDTdb.s 			page 37


 1379              		.align	2
 1380              	.L67:
 1381 0064 00000000 		.word	font
 1382              		.cfi_endproc
 1383              	.LFE44:
 1385              		.section	.text.draw_string,"ax",%progbits
 1386              		.align	1
 1387              		.global	draw_string
 1388              		.syntax unified
 1389              		.code	16
 1390              		.thumb_func
 1391              		.fpu softvfp
 1393              	draw_string:
 1394              	.LFB45:
 272:Src/main.c    ****     while (*str) {
 1395              		.loc 1 272 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              	.LVL110:
 1400 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1401              	.LCFI23:
 1402              		.cfi_def_cfa_offset 24
 1403              		.cfi_offset 3, -24
 1404              		.cfi_offset 4, -20
 1405              		.cfi_offset 5, -16
 1406              		.cfi_offset 6, -12
 1407              		.cfi_offset 7, -8
 1408              		.cfi_offset 14, -4
 1409 0002 0700     		movs	r7, r0
 1410 0004 0C00     		movs	r4, r1
 1411 0006 1600     		movs	r6, r2
 1412 0008 1D00     		movs	r5, r3
 273:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1413              		.loc 1 273 0
 1414 000a 07E0     		b	.L70
 1415              	.LVL111:
 1416              	.L71:
 274:Src/main.c    ****         x += CHAR_WIDTH;
 1417              		.loc 1 274 0
 1418 000c 0137     		adds	r7, r7, #1
 1419              	.LVL112:
 1420 000e 2B00     		movs	r3, r5
 1421 0010 3200     		movs	r2, r6
 1422 0012 2100     		movs	r1, r4
 1423 0014 FFF7FEFF 		bl	draw_char
 1424              	.LVL113:
 275:Src/main.c    ****     }
 1425              		.loc 1 275 0
 1426 0018 0634     		adds	r4, r4, #6
 1427              	.LVL114:
 1428 001a E4B2     		uxtb	r4, r4
 1429              	.LVL115:
 1430              	.L70:
 273:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1431              		.loc 1 273 0
 1432 001c 3878     		ldrb	r0, [r7]
ARM GAS  /tmp/ccXMDTdb.s 			page 38


 1433 001e 0028     		cmp	r0, #0
 1434 0020 F4D1     		bne	.L71
 277:Src/main.c    **** 
 1435              		.loc 1 277 0
 1436              		@ sp needed
 1437              	.LVL116:
 1438              	.LVL117:
 1439 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1440              		.cfi_endproc
 1441              	.LFE45:
 1443              		.section	.text.SystemClock_Config,"ax",%progbits
 1444              		.align	1
 1445              		.global	SystemClock_Config
 1446              		.syntax unified
 1447              		.code	16
 1448              		.thumb_func
 1449              		.fpu softvfp
 1451              	SystemClock_Config:
 1452              	.LFB46:
 280:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1453              		.loc 1 280 0
 1454              		.cfi_startproc
 1455              		@ args = 0, pretend = 0, frame = 96
 1456              		@ frame_needed = 0, uses_anonymous_args = 0
 1457 0000 10B5     		push	{r4, lr}
 1458              	.LCFI24:
 1459              		.cfi_def_cfa_offset 8
 1460              		.cfi_offset 4, -8
 1461              		.cfi_offset 14, -4
 1462 0002 98B0     		sub	sp, sp, #96
 1463              	.LCFI25:
 1464              		.cfi_def_cfa_offset 104
 281:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1465              		.loc 1 281 0
 1466 0004 2C22     		movs	r2, #44
 1467 0006 0021     		movs	r1, #0
 1468 0008 0CA8     		add	r0, sp, #48
 1469 000a FFF7FEFF 		bl	memset
 1470              	.LVL118:
 282:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1471              		.loc 1 282 0
 1472 000e 1024     		movs	r4, #16
 1473 0010 1022     		movs	r2, #16
 1474 0012 0021     		movs	r1, #0
 1475 0014 07A8     		add	r0, sp, #28
 1476 0016 FFF7FEFF 		bl	memset
 1477              	.LVL119:
 283:Src/main.c    **** 
 1478              		.loc 1 283 0
 1479 001a 1C22     		movs	r2, #28
 1480 001c 0021     		movs	r1, #0
 1481 001e 6846     		mov	r0, sp
 1482 0020 FFF7FEFF 		bl	memset
 1483              	.LVL120:
 285:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 1484              		.loc 1 285 0
 1485 0024 3223     		movs	r3, #50
ARM GAS  /tmp/ccXMDTdb.s 			page 39


 1486 0026 0B93     		str	r3, [sp, #44]
 287:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1487              		.loc 1 287 0
 1488 0028 313B     		subs	r3, r3, #49
 1489 002a 0E93     		str	r3, [sp, #56]
 288:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1490              		.loc 1 288 0
 1491 002c 1393     		str	r3, [sp, #76]
 289:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1492              		.loc 1 289 0
 1493 002e 1093     		str	r3, [sp, #64]
 290:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1494              		.loc 1 290 0
 1495 0030 0F94     		str	r4, [sp, #60]
 291:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1496              		.loc 1 291 0
 1497 0032 1194     		str	r4, [sp, #68]
 292:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 1498              		.loc 1 292 0
 1499 0034 0E3C     		subs	r4, r4, #14
 1500 0036 1494     		str	r4, [sp, #80]
 293:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 1501              		.loc 1 293 0
 1502 0038 C022     		movs	r2, #192
 1503 003a 5202     		lsls	r2, r2, #9
 1504 003c 1592     		str	r2, [sp, #84]
 295:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1505              		.loc 1 295 0
 1506 003e 1793     		str	r3, [sp, #92]
 296:Src/main.c    **** 
 1507              		.loc 1 296 0
 1508 0040 0BA8     		add	r0, sp, #44
 1509 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1510              	.LVL121:
 298:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1511              		.loc 1 298 0
 1512 0046 0723     		movs	r3, #7
 1513 0048 0793     		str	r3, [sp, #28]
 300:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1514              		.loc 1 300 0
 1515 004a 0894     		str	r4, [sp, #32]
 301:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1516              		.loc 1 301 0
 1517 004c 0024     		movs	r4, #0
 1518 004e 0994     		str	r4, [sp, #36]
 302:Src/main.c    **** 
 1519              		.loc 1 302 0
 1520 0050 0A94     		str	r4, [sp, #40]
 304:Src/main.c    **** 
 1521              		.loc 1 304 0
 1522 0052 0121     		movs	r1, #1
 1523 0054 07A8     		add	r0, sp, #28
 1524 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1525              	.LVL122:
 306:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1526              		.loc 1 306 0
 1527 005a 044B     		ldr	r3, .L73
ARM GAS  /tmp/ccXMDTdb.s 			page 40


 1528 005c 0093     		str	r3, [sp]
 307:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1529              		.loc 1 307 0
 1530 005e 0494     		str	r4, [sp, #16]
 308:Src/main.c    **** 
 1531              		.loc 1 308 0
 1532 0060 0694     		str	r4, [sp, #24]
 310:Src/main.c    **** }
 1533              		.loc 1 310 0
 1534 0062 6846     		mov	r0, sp
 1535 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1536              	.LVL123:
 311:Src/main.c    **** 
 1537              		.loc 1 311 0
 1538 0068 18B0     		add	sp, sp, #96
 1539              		@ sp needed
 1540 006a 10BD     		pop	{r4, pc}
 1541              	.L74:
 1542              		.align	2
 1543              	.L73:
 1544 006c 20000200 		.word	131104
 1545              		.cfi_endproc
 1546              	.LFE46:
 1548              		.global	__aeabi_f2uiz
 1549              		.section	.text.main,"ax",%progbits
 1550              		.align	1
 1551              		.global	main
 1552              		.syntax unified
 1553              		.code	16
 1554              		.thumb_func
 1555              		.fpu softvfp
 1557              	main:
 1558              	.LFB37:
  90:Src/main.c    **** 
 1559              		.loc 1 90 0
 1560              		.cfi_startproc
 1561              		@ Volatile: function does not return.
 1562              		@ args = 0, pretend = 0, frame = 48
 1563              		@ frame_needed = 0, uses_anonymous_args = 0
 1564 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1565              	.LCFI26:
 1566              		.cfi_def_cfa_offset 20
 1567              		.cfi_offset 4, -20
 1568              		.cfi_offset 5, -16
 1569              		.cfi_offset 6, -12
 1570              		.cfi_offset 7, -8
 1571              		.cfi_offset 14, -4
 1572 0002 C646     		mov	lr, r8
 1573 0004 00B5     		push	{lr}
 1574              	.LCFI27:
 1575              		.cfi_def_cfa_offset 24
 1576              		.cfi_offset 8, -24
 1577 0006 8CB0     		sub	sp, sp, #48
 1578              	.LCFI28:
 1579              		.cfi_def_cfa_offset 72
  92:Src/main.c    **** 
 1580              		.loc 1 92 0
ARM GAS  /tmp/ccXMDTdb.s 			page 41


 1581 0008 FFF7FEFF 		bl	HAL_Init
 1582              	.LVL124:
  94:Src/main.c    **** 
 1583              		.loc 1 94 0
 1584 000c FFF7FEFF 		bl	SystemClock_Config
 1585              	.LVL125:
  96:Src/main.c    ****   MX_DMA_Init();
 1586              		.loc 1 96 0
 1587 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1588              	.LVL126:
  97:Src/main.c    ****   MX_ADC_Init();
 1589              		.loc 1 97 0
 1590 0014 FFF7FEFF 		bl	MX_DMA_Init
 1591              	.LVL127:
  98:Src/main.c    ****   MX_I2C1_Init();
 1592              		.loc 1 98 0
 1593 0018 FFF7FEFF 		bl	MX_ADC_Init
 1594              	.LVL128:
  99:Src/main.c    ****   MX_I2C2_Init();
 1595              		.loc 1 99 0
 1596 001c FFF7FEFF 		bl	MX_I2C1_Init
 1597              	.LVL129:
 100:Src/main.c    ****   MX_TIM1_Init();
 1598              		.loc 1 100 0
 1599 0020 FFF7FEFF 		bl	MX_I2C2_Init
 1600              	.LVL130:
 101:Src/main.c    ****   MX_USB_PCD_Init();
 1601              		.loc 1 101 0
 1602 0024 FFF7FEFF 		bl	MX_TIM1_Init
 1603              	.LVL131:
 102:Src/main.c    **** 
 1604              		.loc 1 102 0
 1605 0028 FFF7FEFF 		bl	MX_USB_PCD_Init
 1606              	.LVL132:
 104:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 1607              		.loc 1 104 0
 1608 002c 854C     		ldr	r4, .L93
 1609 002e 0021     		movs	r1, #0
 1610 0030 2000     		movs	r0, r4
 1611 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1612              	.LVL133:
 105:Src/main.c    **** 
 1613              		.loc 1 105 0
 1614 0036 0C21     		movs	r1, #12
 1615 0038 2000     		movs	r0, r4
 1616 003a FFF7FEFF 		bl	HAL_TIM_OC_Start
 1617              	.LVL134:
 107:Src/main.c    **** 
 1618              		.loc 1 107 0
 1619 003e 0422     		movs	r2, #4
 1620 0040 8149     		ldr	r1, .L93+4
 1621 0042 8248     		ldr	r0, .L93+8
 1622 0044 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1623              	.LVL135:
 109:Src/main.c    ****   disp_init();
 1624              		.loc 1 109 0
 1625 0048 1420     		movs	r0, #20
ARM GAS  /tmp/ccXMDTdb.s 			page 42


 1626 004a FFF7FEFF 		bl	HAL_Delay
 1627              	.LVL136:
 110:Src/main.c    ****   HAL_Delay(60);
 1628              		.loc 1 110 0
 1629 004e FFF7FEFF 		bl	disp_init
 1630              	.LVL137:
 111:Src/main.c    ****   clear_screen();
 1631              		.loc 1 111 0
 1632 0052 3C20     		movs	r0, #60
 1633 0054 FFF7FEFF 		bl	HAL_Delay
 1634              	.LVL138:
 112:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 1635              		.loc 1 112 0
 1636 0058 FFF7FEFF 		bl	clear_screen
 1637              	.LVL139:
 113:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 1638              		.loc 1 113 0
 1639 005c 9020     		movs	r0, #144
 1640 005e 0821     		movs	r1, #8
 1641 0060 C005     		lsls	r0, r0, #23
 1642 0062 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1643              	.LVL140:
 1644 0066 0028     		cmp	r0, #0
 1645 0068 06D0     		beq	.L76
 113:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 1646              		.loc 1 113 0 is_stmt 0 discriminator 1
 1647 006a 9020     		movs	r0, #144
 1648 006c 1021     		movs	r1, #16
 1649 006e C005     		lsls	r0, r0, #23
 1650 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1651              	.LVL141:
 1652 0074 0028     		cmp	r0, #0
 1653 0076 12D1     		bne	.L90
 1654              	.L76:
 120:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 1655              		.loc 1 120 0 is_stmt 1
 1656 0078 0123     		movs	r3, #1
 1657 007a 0122     		movs	r2, #1
 1658 007c 0F21     		movs	r1, #15
 1659 007e 7448     		ldr	r0, .L93+12
 1660 0080 FFF7FEFF 		bl	draw_string
 1661              	.LVL142:
 121:Src/main.c    ****     refresh();
 1662              		.loc 1 121 0
 1663 0084 0123     		movs	r3, #1
 1664 0086 0922     		movs	r2, #9
 1665 0088 0A21     		movs	r1, #10
 1666 008a 7248     		ldr	r0, .L93+16
 1667 008c FFF7FEFF 		bl	draw_string
 1668              	.LVL143:
 122:Src/main.c    ****   }
 1669              		.loc 1 122 0
 1670 0090 FFF7FEFF 		bl	refresh
 1671              	.LVL144:
 124:Src/main.c    **** 
 1672              		.loc 1 124 0
 1673 0094 FA20     		movs	r0, #250
ARM GAS  /tmp/ccXMDTdb.s 			page 43


 1674 0096 8000     		lsls	r0, r0, #2
 1675 0098 FFF7FEFF 		bl	HAL_Delay
 1676              	.LVL145:
 1677 009c 9FE0     		b	.L85
 1678              	.L90:
 114:Src/main.c    ****     refresh();
 1679              		.loc 1 114 0
 1680 009e 0123     		movs	r3, #1
 1681 00a0 1A00     		movs	r2, r3
 1682 00a2 0F21     		movs	r1, #15
 1683 00a4 6C48     		ldr	r0, .L93+20
 1684 00a6 FFF7FEFF 		bl	draw_string
 1685              	.LVL146:
 115:Src/main.c    ****     HAL_Delay(40);
 1686              		.loc 1 115 0
 1687 00aa FFF7FEFF 		bl	refresh
 1688              	.LVL147:
 116:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 1689              		.loc 1 116 0
 1690 00ae 2820     		movs	r0, #40
 1691 00b0 FFF7FEFF 		bl	HAL_Delay
 1692              	.LVL148:
 117:Src/main.c    ****     NVIC_SystemReset();
 1693              		.loc 1 117 0
 1694 00b4 694B     		ldr	r3, .L93+24
 1695 00b6 6A4A     		ldr	r2, .L93+28
 1696 00b8 1A60     		str	r2, [r3]
 1697              	.LBB27:
 1698              	.LBB28:
 1699              	.LBB29:
 1700              	.LBB30:
 1701              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
ARM GAS  /tmp/ccXMDTdb.s 			page 44


  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccXMDTdb.s 			page 45


  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccXMDTdb.s 			page 46


 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
ARM GAS  /tmp/ccXMDTdb.s 			page 47


 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccXMDTdb.s 			page 48


 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
ARM GAS  /tmp/ccXMDTdb.s 			page 49


 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccXMDTdb.s 			page 50


 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
ARM GAS  /tmp/ccXMDTdb.s 			page 51


 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1702              		.loc 2 429 0
 1703              		.syntax divided
 1704              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1705 00ba BFF34F8F 		dsb 0xF
 1706              	@ 0 "" 2
 1707              		.thumb
 1708              		.syntax unified
 1709              	.LBE30:
 1710              	.LBE29:
 1711              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
ARM GAS  /tmp/ccXMDTdb.s 			page 52


  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
ARM GAS  /tmp/ccXMDTdb.s 			page 53


 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
ARM GAS  /tmp/ccXMDTdb.s 			page 54


 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
ARM GAS  /tmp/ccXMDTdb.s 			page 55


 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
ARM GAS  /tmp/ccXMDTdb.s 			page 56


 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
ARM GAS  /tmp/ccXMDTdb.s 			page 57


 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/ccXMDTdb.s 			page 58


 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
ARM GAS  /tmp/ccXMDTdb.s 			page 59


 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
ARM GAS  /tmp/ccXMDTdb.s 			page 60


 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccXMDTdb.s 			page 61


 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
ARM GAS  /tmp/ccXMDTdb.s 			page 62


 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccXMDTdb.s 			page 63


 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
ARM GAS  /tmp/ccXMDTdb.s 			page 64


 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 1712              		.loc 3 734 0
 1713 00be 694B     		ldr	r3, .L93+32
 1714 00c0 694A     		ldr	r2, .L93+36
 1715 00c2 DA60     		str	r2, [r3, #12]
 1716              	.LBB31:
 1717              	.LBB32:
 1718              		.loc 2 429 0
 1719              		.syntax divided
 1720              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1721 00c4 BFF34F8F 		dsb 0xF
 1722              	@ 0 "" 2
 1723              		.thumb
 1724              		.syntax unified
 1725              	.L77:
 1726              	.LBE32:
 1727              	.LBE31:
 1728              	.LBB33:
 1729              	.LBB34:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1730              		.loc 2 375 0
 1731              		.syntax divided
 1732              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1733 00c8 C046     		nop
 1734              	@ 0 "" 2
 1735              		.thumb
 1736              		.syntax unified
 1737 00ca FDE7     		b	.L77
 1738              	.L91:
 1739              	.LBE34:
 1740              	.LBE33:
 1741              	.LBE28:
 1742              	.LBE27:
 1743              	.LBB35:
 135:Src/main.c    ****       HAL_Delay(50);
 1744              		.loc 1 135 0
 1745 00cc 674C     		ldr	r4, .L93+40
 1746 00ce 6849     		ldr	r1, .L93+44
 1747 00d0 2068     		ldr	r0, [r4]
 1748 00d2 FFF7FEFF 		bl	__aeabi_fsub
 1749              	.LVL149:
 1750 00d6 2060     		str	r0, [r4]
 136:Src/main.c    ****     }
 1751              		.loc 1 136 0
 1752 00d8 3220     		movs	r0, #50
 1753 00da FFF7FEFF 		bl	HAL_Delay
 1754              	.LVL150:
 1755 00de 92E0     		b	.L78
 1756              	.L92:
 140:Src/main.c    ****       HAL_Delay(50);
ARM GAS  /tmp/ccXMDTdb.s 			page 65


 1757              		.loc 1 140 0
 1758 00e0 624C     		ldr	r4, .L93+40
 1759 00e2 6349     		ldr	r1, .L93+44
 1760 00e4 2068     		ldr	r0, [r4]
 1761 00e6 FFF7FEFF 		bl	__aeabi_fadd
 1762              	.LVL151:
 1763 00ea 2060     		str	r0, [r4]
 141:Src/main.c    ****     }
 1764              		.loc 1 141 0
 1765 00ec 3220     		movs	r0, #50
 1766 00ee FFF7FEFF 		bl	HAL_Delay
 1767              	.LVL152:
 1768 00f2 8DE0     		b	.L79
 1769              	.L86:
 144:Src/main.c    **** 
 1770              		.loc 1 144 0
 1771 00f4 5F4F     		ldr	r7, .L93+48
 1772              	.L80:
 144:Src/main.c    **** 
 1773              		.loc 1 144 0 is_stmt 0 discriminator 8
 1774 00f6 5D4B     		ldr	r3, .L93+40
 1775 00f8 9846     		mov	r8, r3
 1776 00fa 1F60     		str	r7, [r3]
 147:Src/main.c    ****     char str2[10] = "          ";
 1777              		.loc 1 147 0 is_stmt 1 discriminator 8
 1778 00fc 03AE     		add	r6, sp, #12
 1779 00fe 5E4B     		ldr	r3, .L93+52
 1780 0100 3100     		movs	r1, r6
 1781 0102 1A00     		movs	r2, r3
 1782 0104 11CA     		ldmia	r2!, {r0, r4}
 1783 0106 11C1     		stmia	r1!, {r0, r4}
 1784 0108 1088     		ldrh	r0, [r2]
 1785 010a 0880     		strh	r0, [r1]
 148:Src/main.c    ****     char str3[10] = "          ";
 1786              		.loc 1 148 0 discriminator 8
 1787 010c 06A9     		add	r1, sp, #24
 1788 010e 1800     		movs	r0, r3
 1789 0110 30C8     		ldmia	r0!, {r4, r5}
 1790 0112 30C1     		stmia	r1!, {r4, r5}
 1791 0114 1088     		ldrh	r0, [r2]
 1792 0116 0880     		strh	r0, [r1]
 149:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 1793              		.loc 1 149 0 discriminator 8
 1794 0118 09AC     		add	r4, sp, #36
 1795 011a 2100     		movs	r1, r4
 1796 011c 21CB     		ldmia	r3!, {r0, r5}
 1797 011e 21C1     		stmia	r1!, {r0, r5}
 1798 0120 1388     		ldrh	r3, [r2]
 1799 0122 0B80     		strh	r3, [r1]
 150:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 1800              		.loc 1 150 0 discriminator 8
 1801 0124 381C     		adds	r0, r7, #0
 1802 0126 FFF7FEFF 		bl	__aeabi_f2uiz
 1803              	.LVL153:
 1804 012a 82B2     		uxth	r2, r0
 1805 012c 5349     		ldr	r1, .L93+56
 1806 012e 3000     		movs	r0, r6
ARM GAS  /tmp/ccXMDTdb.s 			page 66


 1807 0130 FFF7FEFF 		bl	sprintf
 1808              	.LVL154:
 151:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 1809              		.loc 1 151 0 discriminator 8
 1810 0134 524F     		ldr	r7, .L93+60
 1811 0136 7B68     		ldr	r3, [r7, #4]
 1812 0138 0193     		str	r3, [sp, #4]
 1813 013a 181C     		adds	r0, r3, #0
 1814 013c FFF7FEFF 		bl	__aeabi_f2uiz
 1815              	.LVL155:
 1816 0140 82B2     		uxth	r2, r0
 1817 0142 1500     		movs	r5, r2
 1818 0144 1000     		movs	r0, r2
 1819 0146 FFF7FEFF 		bl	__aeabi_i2f
 1820              	.LVL156:
 1821 014a 011C     		adds	r1, r0, #0
 1822 014c 0198     		ldr	r0, [sp, #4]
 1823 014e FFF7FEFF 		bl	__aeabi_fsub
 1824              	.LVL157:
 1825 0152 4C49     		ldr	r1, .L93+64
 1826 0154 FFF7FEFF 		bl	__aeabi_fmul
 1827              	.LVL158:
 1828 0158 FFF7FEFF 		bl	__aeabi_f2uiz
 1829              	.LVL159:
 1830 015c 83B2     		uxth	r3, r0
 1831 015e 2A00     		movs	r2, r5
 1832 0160 4949     		ldr	r1, .L93+68
 1833 0162 06A8     		add	r0, sp, #24
 1834 0164 FFF7FEFF 		bl	sprintf
 1835              	.LVL160:
 152:Src/main.c    **** 
 1836              		.loc 1 152 0 discriminator 8
 1837 0168 BF68     		ldr	r7, [r7, #8]
 1838 016a 381C     		adds	r0, r7, #0
 1839 016c FFF7FEFF 		bl	__aeabi_f2uiz
 1840              	.LVL161:
 1841 0170 83B2     		uxth	r3, r0
 1842 0172 1D00     		movs	r5, r3
 1843 0174 1800     		movs	r0, r3
 1844 0176 FFF7FEFF 		bl	__aeabi_i2f
 1845              	.LVL162:
 1846 017a 011C     		adds	r1, r0, #0
 1847 017c 381C     		adds	r0, r7, #0
 1848 017e FFF7FEFF 		bl	__aeabi_fsub
 1849              	.LVL163:
 1850 0182 4049     		ldr	r1, .L93+64
 1851 0184 FFF7FEFF 		bl	__aeabi_fmul
 1852              	.LVL164:
 1853 0188 FFF7FEFF 		bl	__aeabi_f2uiz
 1854              	.LVL165:
 1855 018c 83B2     		uxth	r3, r0
 1856 018e 2A00     		movs	r2, r5
 1857 0190 3E49     		ldr	r1, .L93+72
 1858 0192 2000     		movs	r0, r4
 1859 0194 FFF7FEFF 		bl	sprintf
 1860              	.LVL166:
 154:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
ARM GAS  /tmp/ccXMDTdb.s 			page 67


 1861              		.loc 1 154 0 discriminator 8
 1862 0198 FFF7FEFF 		bl	clear_screen
 1863              	.LVL167:
 155:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 1864              		.loc 1 155 0 discriminator 8
 1865 019c 0123     		movs	r3, #1
 1866 019e 0122     		movs	r2, #1
 1867 01a0 0A21     		movs	r1, #10
 1868 01a2 3000     		movs	r0, r6
 1869 01a4 FFF7FEFF 		bl	draw_string
 1870              	.LVL168:
 156:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 1871              		.loc 1 156 0 discriminator 8
 1872 01a8 0123     		movs	r3, #1
 1873 01aa 0922     		movs	r2, #9
 1874 01ac 0A21     		movs	r1, #10
 1875 01ae 06A8     		add	r0, sp, #24
 1876 01b0 FFF7FEFF 		bl	draw_string
 1877              	.LVL169:
 157:Src/main.c    ****     if(r.error > 3){
 1878              		.loc 1 157 0 discriminator 8
 1879 01b4 0123     		movs	r3, #1
 1880 01b6 0122     		movs	r2, #1
 1881 01b8 3C21     		movs	r1, #60
 1882 01ba 2000     		movs	r0, r4
 1883 01bc FFF7FEFF 		bl	draw_string
 1884              	.LVL170:
 158:Src/main.c    ****       draw_string("*", 60, 9 ,1);
 1885              		.loc 1 158 0 discriminator 8
 1886 01c0 4346     		mov	r3, r8
 1887 01c2 5868     		ldr	r0, [r3, #4]
 1888 01c4 3249     		ldr	r1, .L93+76
 1889 01c6 FFF7FEFF 		bl	__aeabi_fcmpgt
 1890              	.LVL171:
 1891 01ca 0028     		cmp	r0, #0
 1892 01cc 32D0     		beq	.L89
 159:Src/main.c    ****     } else {
 1893              		.loc 1 159 0
 1894 01ce 0123     		movs	r3, #1
 1895 01d0 0922     		movs	r2, #9
 1896 01d2 3C21     		movs	r1, #60
 1897 01d4 2F48     		ldr	r0, .L93+80
 1898 01d6 FFF7FEFF 		bl	draw_string
 1899              	.LVL172:
 1900              	.L84:
 163:Src/main.c    ****   }
 1901              		.loc 1 163 0
 1902 01da FFF7FEFF 		bl	refresh
 1903              	.LVL173:
 1904              	.L85:
 128:Src/main.c    **** 
 1905              		.loc 1 128 0
 1906 01de 3220     		movs	r0, #50
 1907 01e0 FFF7FEFF 		bl	HAL_Delay
 1908              	.LVL174:
 131:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 1909              		.loc 1 131 0
ARM GAS  /tmp/ccXMDTdb.s 			page 68


 1910 01e4 9025     		movs	r5, #144
 1911 01e6 ED05     		lsls	r5, r5, #23
 1912 01e8 0821     		movs	r1, #8
 1913 01ea 2800     		movs	r0, r5
 1914 01ec FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1915              	.LVL175:
 1916 01f0 234C     		ldr	r4, .L93+60
 1917 01f2 2075     		strb	r0, [r4, #20]
 132:Src/main.c    **** 
 1918              		.loc 1 132 0
 1919 01f4 1021     		movs	r1, #16
 1920 01f6 2800     		movs	r0, r5
 1921 01f8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1922              	.LVL176:
 1923 01fc 6075     		strb	r0, [r4, #21]
 134:Src/main.c    ****       r.target -= 5;
 1924              		.loc 1 134 0
 1925 01fe 237D     		ldrb	r3, [r4, #20]
 1926 0200 012B     		cmp	r3, #1
 1927 0202 00D1     		bne	.LCB1638
 1928 0204 62E7     		b	.L91	@long jump
 1929              	.LCB1638:
 1930              	.L78:
 139:Src/main.c    ****       r.target += 5;
 1931              		.loc 1 139 0
 1932 0206 1E4B     		ldr	r3, .L93+60
 1933 0208 5B7D     		ldrb	r3, [r3, #21]
 1934 020a 012B     		cmp	r3, #1
 1935 020c 00D1     		bne	.LCB1643
 1936 020e 67E7     		b	.L92	@long jump
 1937              	.LCB1643:
 1938              	.L79:
 144:Src/main.c    **** 
 1939              		.loc 1 144 0
 1940 0210 164B     		ldr	r3, .L93+40
 1941 0212 1F68     		ldr	r7, [r3]
 1942 0214 1749     		ldr	r1, .L93+48
 1943 0216 381C     		adds	r0, r7, #0
 1944 0218 FFF7FEFF 		bl	__aeabi_fcmpgt
 1945              	.LVL177:
 1946 021c 0028     		cmp	r0, #0
 1947 021e 00D0     		beq	.LCB1652
 1948 0220 68E7     		b	.L86	@long jump
 1949              	.LCB1652:
 144:Src/main.c    **** 
 1950              		.loc 1 144 0 is_stmt 0 discriminator 2
 1951 0222 1D49     		ldr	r1, .L93+84
 1952 0224 381C     		adds	r0, r7, #0
 1953 0226 FFF7FEFF 		bl	__aeabi_fcmplt
 1954              	.LVL178:
 1955 022a 0028     		cmp	r0, #0
 1956 022c 00D1     		bne	.LCB1658
 1957 022e 62E7     		b	.L80	@long jump
 1958              	.LCB1658:
 144:Src/main.c    **** 
 1959              		.loc 1 144 0
 1960 0230 194F     		ldr	r7, .L93+84
ARM GAS  /tmp/ccXMDTdb.s 			page 69


 1961 0232 60E7     		b	.L80
 1962              	.L89:
 161:Src/main.c    ****     }
 1963              		.loc 1 161 0 is_stmt 1
 1964 0234 0123     		movs	r3, #1
 1965 0236 0922     		movs	r2, #9
 1966 0238 3C21     		movs	r1, #60
 1967 023a 1848     		ldr	r0, .L93+88
 1968 023c FFF7FEFF 		bl	draw_string
 1969              	.LVL179:
 1970 0240 CBE7     		b	.L84
 1971              	.L94:
 1972 0242 C046     		.align	2
 1973              	.L93:
 1974 0244 00000000 		.word	htim1
 1975 0248 00000000 		.word	.LANCHOR0
 1976 024c 00000000 		.word	hadc
 1977 0250 04000000 		.word	.LC25
 1978 0254 10000000 		.word	.LC27
 1979 0258 00000000 		.word	.LC23
 1980 025c F03F0020 		.word	536887280
 1981 0260 EFBEADDE 		.word	-559038737
 1982 0264 00ED00E0 		.word	-536810240
 1983 0268 0400FA05 		.word	100270084
 1984 026c 00000000 		.word	.LANCHOR2
 1985 0270 0000A040 		.word	1084227584
 1986 0274 0000C843 		.word	1137180672
 1987 0278 00000000 		.word	.LANCHOR5
 1988 027c 20000000 		.word	.LC33
 1989 0280 00000000 		.word	s
 1990 0284 00002041 		.word	1092616192
 1991 0288 28000000 		.word	.LC35
 1992 028c 30000000 		.word	.LC37
 1993 0290 00004040 		.word	1077936128
 1994 0294 38000000 		.word	.LC39
 1995 0298 0000A041 		.word	1101004800
 1996 029c 3C000000 		.word	.LC41
 1997              	.LBE35:
 1998              		.cfi_endproc
 1999              	.LFE37:
 2001              		.section	.text.Error_Handler,"ax",%progbits
 2002              		.align	1
 2003              		.global	Error_Handler
 2004              		.syntax unified
 2005              		.code	16
 2006              		.thumb_func
 2007              		.fpu softvfp
 2009              	Error_Handler:
 2010              	.LFB54:
 522:Src/main.c    **** 
 523:Src/main.c    **** void Error_Handler(void)
 524:Src/main.c    **** {
 2011              		.loc 1 524 0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 0
 2014              		@ frame_needed = 0, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
ARM GAS  /tmp/ccXMDTdb.s 			page 70


 525:Src/main.c    **** 
 526:Src/main.c    **** }
 2016              		.loc 1 526 0
 2017              		@ sp needed
 2018 0000 7047     		bx	lr
 2019              		.cfi_endproc
 2020              	.LFE54:
 2022              		.global	OLED_Setup_Array
 2023              		.global	REFRESH_COMMANDS
 2024              		.comm	screenBuffer,218,4
 2025              		.global	tipcal
 2026              		.global	r
 2027              		.comm	s,24,4
 2028              		.comm	hpcd_USB_FS,544,4
 2029              		.comm	htim1,64,4
 2030              		.comm	hi2c2,76,4
 2031              		.comm	hi2c1,76,4
 2032              		.comm	hdma_adc,68,4
 2033              		.comm	hadc,76,4
 2034              		.global	font
 2035              		.section	.rodata
 2036              		.align	2
 2037              		.set	.LANCHOR5,. + 0
 2038              	.LC31:
 2039 0000 20202020 		.ascii	"          \000"
 2039      20202020 
 2039      202000
 2040              		.section	.bss.ADC_raw,"aw",%nobits
 2041              		.align	2
 2042              		.set	.LANCHOR0,. + 0
 2045              	ADC_raw:
 2046 0000 00000000 		.space	8
 2046      00000000 
 2047              		.section	.data.OLED_Setup_Array,"aw",%progbits
 2048              		.align	2
 2049              		.set	.LANCHOR4,. + 0
 2052              	OLED_Setup_Array:
 2053 0000 80       		.byte	-128
 2054 0001 AE       		.byte	-82
 2055 0002 80       		.byte	-128
 2056 0003 D5       		.byte	-43
 2057 0004 80       		.byte	-128
 2058 0005 52       		.byte	82
 2059 0006 80       		.byte	-128
 2060 0007 A8       		.byte	-88
 2061 0008 80       		.byte	-128
 2062 0009 0F       		.byte	15
 2063 000a 80       		.byte	-128
 2064 000b C0       		.byte	-64
 2065 000c 80       		.byte	-128
 2066 000d D3       		.byte	-45
 2067 000e 80       		.byte	-128
 2068 000f 00       		.byte	0
 2069 0010 80       		.byte	-128
 2070 0011 40       		.byte	64
 2071 0012 80       		.byte	-128
 2072 0013 A0       		.byte	-96
ARM GAS  /tmp/ccXMDTdb.s 			page 71


 2073 0014 80       		.byte	-128
 2074 0015 8D       		.byte	-115
 2075 0016 80       		.byte	-128
 2076 0017 14       		.byte	20
 2077 0018 80       		.byte	-128
 2078 0019 DA       		.byte	-38
 2079 001a 80       		.byte	-128
 2080 001b 02       		.byte	2
 2081 001c 80       		.byte	-128
 2082 001d 81       		.byte	-127
 2083 001e 80       		.byte	-128
 2084 001f 33       		.byte	51
 2085 0020 80       		.byte	-128
 2086 0021 D9       		.byte	-39
 2087 0022 80       		.byte	-128
 2088 0023 F1       		.byte	-15
 2089 0024 80       		.byte	-128
 2090 0025 DB       		.byte	-37
 2091 0026 80       		.byte	-128
 2092 0027 30       		.byte	48
 2093 0028 80       		.byte	-128
 2094 0029 A4       		.byte	-92
 2095 002a 80       		.byte	-128
 2096 002b A6       		.byte	-90
 2097 002c 80       		.byte	-128
 2098 002d 20       		.byte	32
 2099 002e 80       		.byte	-128
 2100 002f 00       		.byte	0
 2101 0030 80       		.byte	-128
 2102 0031 AF       		.byte	-81
 2103              		.section	.data.r,"aw",%progbits
 2104              		.align	2
 2105              		.set	.LANCHOR2,. + 0
 2108              	r:
 2109 0000 00005C43 		.word	1130102784
 2110 0004 00000000 		.space	12
 2110      00000000 
 2110      00000000 
 2111 0010 00004843 		.word	1128792064
 2112 0014 00000000 		.space	8
 2112      00000000 
 2113 001c CDCCCC3D 		.word	1036831949
 2114 0020 00002042 		.word	1109393408
 2115 0024 0000C040 		.word	1086324736
 2116 0028 00004041 		.word	1094713344
 2117              		.section	.data.tipcal,"aw",%progbits
 2118              		.align	2
 2119              		.set	.LANCHOR1,. + 0
 2122              	tipcal:
 2123 0000 0000F042 		.word	1123024896
 2124 0004 0000B842 		.word	1119354880
 2125              		.section	.rodata.REFRESH_COMMANDS,"a",%progbits
 2126              		.align	2
 2127              		.set	.LANCHOR3,. + 0
 2130              	REFRESH_COMMANDS:
 2131 0000 80       		.byte	-128
 2132 0001 AF       		.byte	-81
ARM GAS  /tmp/ccXMDTdb.s 			page 72


 2133 0002 80       		.byte	-128
 2134 0003 21       		.byte	33
 2135 0004 80       		.byte	-128
 2136 0005 20       		.byte	32
 2137 0006 80       		.byte	-128
 2138 0007 7F       		.byte	127
 2139 0008 80       		.byte	-128
 2140 0009 C0       		.byte	-64
 2141 000a 80       		.byte	-128
 2142 000b 22       		.byte	34
 2143 000c 80       		.byte	-128
 2144 000d 00       		.byte	0
 2145 000e 80       		.byte	-128
 2146 000f 01       		.byte	1
 2147 0010 40       		.byte	64
 2148              		.section	.rodata.font,"a",%progbits
 2149              		.align	2
 2152              	font:
 2153 0000 00       		.byte	0
 2154 0001 00       		.byte	0
 2155 0002 00       		.byte	0
 2156 0003 00       		.byte	0
 2157 0004 00       		.byte	0
 2158 0005 00       		.byte	0
 2159 0006 2F       		.byte	47
 2160 0007 00       		.byte	0
 2161 0008 00       		.byte	0
 2162 0009 00       		.byte	0
 2163 000a 00       		.byte	0
 2164 000b 00       		.byte	0
 2165 000c 03       		.byte	3
 2166 000d 00       		.byte	0
 2167 000e 03       		.byte	3
 2168 000f 00       		.byte	0
 2169 0010 00       		.byte	0
 2170 0011 00       		.byte	0
 2171 0012 12       		.byte	18
 2172 0013 3F       		.byte	63
 2173 0014 12       		.byte	18
 2174 0015 12       		.byte	18
 2175 0016 3F       		.byte	63
 2176 0017 12       		.byte	18
 2177 0018 2E       		.byte	46
 2178 0019 2A       		.byte	42
 2179 001a 7F       		.byte	127
 2180 001b 2A       		.byte	42
 2181 001c 3A       		.byte	58
 2182 001d 00       		.byte	0
 2183 001e 23       		.byte	35
 2184 001f 13       		.byte	19
 2185 0020 08       		.byte	8
 2186 0021 04       		.byte	4
 2187 0022 32       		.byte	50
 2188 0023 31       		.byte	49
 2189 0024 10       		.byte	16
 2190 0025 2A       		.byte	42
 2191 0026 25       		.byte	37
ARM GAS  /tmp/ccXMDTdb.s 			page 73


 2192 0027 2A       		.byte	42
 2193 0028 10       		.byte	16
 2194 0029 20       		.byte	32
 2195 002a 02       		.byte	2
 2196 002b 01       		.byte	1
 2197 002c 00       		.byte	0
 2198 002d 00       		.byte	0
 2199 002e 00       		.byte	0
 2200 002f 00       		.byte	0
 2201 0030 1E       		.byte	30
 2202 0031 21       		.byte	33
 2203 0032 00       		.byte	0
 2204 0033 00       		.byte	0
 2205 0034 00       		.byte	0
 2206 0035 00       		.byte	0
 2207 0036 21       		.byte	33
 2208 0037 1E       		.byte	30
 2209 0038 00       		.byte	0
 2210 0039 00       		.byte	0
 2211 003a 00       		.byte	0
 2212 003b 00       		.byte	0
 2213 003c 08       		.byte	8
 2214 003d 2A       		.byte	42
 2215 003e 1C       		.byte	28
 2216 003f 2A       		.byte	42
 2217 0040 08       		.byte	8
 2218 0041 08       		.byte	8
 2219 0042 08       		.byte	8
 2220 0043 08       		.byte	8
 2221 0044 3E       		.byte	62
 2222 0045 08       		.byte	8
 2223 0046 08       		.byte	8
 2224 0047 08       		.byte	8
 2225 0048 80       		.byte	-128
 2226 0049 60       		.byte	96
 2227 004a 00       		.byte	0
 2228 004b 00       		.byte	0
 2229 004c 00       		.byte	0
 2230 004d 00       		.byte	0
 2231 004e 08       		.byte	8
 2232 004f 08       		.byte	8
 2233 0050 08       		.byte	8
 2234 0051 08       		.byte	8
 2235 0052 08       		.byte	8
 2236 0053 00       		.byte	0
 2237 0054 30       		.byte	48
 2238 0055 30       		.byte	48
 2239 0056 00       		.byte	0
 2240 0057 00       		.byte	0
 2241 0058 00       		.byte	0
 2242 0059 00       		.byte	0
 2243 005a 20       		.byte	32
 2244 005b 10       		.byte	16
 2245 005c 08       		.byte	8
 2246 005d 04       		.byte	4
 2247 005e 02       		.byte	2
 2248 005f 00       		.byte	0
ARM GAS  /tmp/ccXMDTdb.s 			page 74


 2249 0060 1E       		.byte	30
 2250 0061 31       		.byte	49
 2251 0062 29       		.byte	41
 2252 0063 25       		.byte	37
 2253 0064 23       		.byte	35
 2254 0065 1E       		.byte	30
 2255 0066 22       		.byte	34
 2256 0067 21       		.byte	33
 2257 0068 3F       		.byte	63
 2258 0069 20       		.byte	32
 2259 006a 20       		.byte	32
 2260 006b 20       		.byte	32
 2261 006c 32       		.byte	50
 2262 006d 29       		.byte	41
 2263 006e 29       		.byte	41
 2264 006f 29       		.byte	41
 2265 0070 29       		.byte	41
 2266 0071 26       		.byte	38
 2267 0072 12       		.byte	18
 2268 0073 21       		.byte	33
 2269 0074 21       		.byte	33
 2270 0075 25       		.byte	37
 2271 0076 25       		.byte	37
 2272 0077 1A       		.byte	26
 2273 0078 18       		.byte	24
 2274 0079 14       		.byte	20
 2275 007a 12       		.byte	18
 2276 007b 3F       		.byte	63
 2277 007c 10       		.byte	16
 2278 007d 10       		.byte	16
 2279 007e 17       		.byte	23
 2280 007f 25       		.byte	37
 2281 0080 25       		.byte	37
 2282 0081 25       		.byte	37
 2283 0082 25       		.byte	37
 2284 0083 19       		.byte	25
 2285 0084 1E       		.byte	30
 2286 0085 25       		.byte	37
 2287 0086 25       		.byte	37
 2288 0087 25       		.byte	37
 2289 0088 25       		.byte	37
 2290 0089 18       		.byte	24
 2291 008a 01       		.byte	1
 2292 008b 01       		.byte	1
 2293 008c 31       		.byte	49
 2294 008d 09       		.byte	9
 2295 008e 05       		.byte	5
 2296 008f 03       		.byte	3
 2297 0090 1A       		.byte	26
 2298 0091 25       		.byte	37
 2299 0092 25       		.byte	37
 2300 0093 25       		.byte	37
 2301 0094 25       		.byte	37
 2302 0095 1A       		.byte	26
 2303 0096 06       		.byte	6
 2304 0097 29       		.byte	41
 2305 0098 29       		.byte	41
ARM GAS  /tmp/ccXMDTdb.s 			page 75


 2306 0099 29       		.byte	41
 2307 009a 29       		.byte	41
 2308 009b 1E       		.byte	30
 2309 009c 24       		.byte	36
 2310 009d 00       		.byte	0
 2311 009e 00       		.byte	0
 2312 009f 00       		.byte	0
 2313 00a0 00       		.byte	0
 2314 00a1 00       		.byte	0
 2315 00a2 80       		.byte	-128
 2316 00a3 64       		.byte	100
 2317 00a4 00       		.byte	0
 2318 00a5 00       		.byte	0
 2319 00a6 00       		.byte	0
 2320 00a7 00       		.byte	0
 2321 00a8 08       		.byte	8
 2322 00a9 14       		.byte	20
 2323 00aa 22       		.byte	34
 2324 00ab 00       		.byte	0
 2325 00ac 00       		.byte	0
 2326 00ad 00       		.byte	0
 2327 00ae 14       		.byte	20
 2328 00af 14       		.byte	20
 2329 00b0 14       		.byte	20
 2330 00b1 14       		.byte	20
 2331 00b2 14       		.byte	20
 2332 00b3 00       		.byte	0
 2333 00b4 22       		.byte	34
 2334 00b5 14       		.byte	20
 2335 00b6 08       		.byte	8
 2336 00b7 00       		.byte	0
 2337 00b8 00       		.byte	0
 2338 00b9 00       		.byte	0
 2339 00ba 02       		.byte	2
 2340 00bb 01       		.byte	1
 2341 00bc 01       		.byte	1
 2342 00bd 29       		.byte	41
 2343 00be 05       		.byte	5
 2344 00bf 02       		.byte	2
 2345 00c0 1E       		.byte	30
 2346 00c1 21       		.byte	33
 2347 00c2 2D       		.byte	45
 2348 00c3 2B       		.byte	43
 2349 00c4 2D       		.byte	45
 2350 00c5 0E       		.byte	14
 2351 00c6 3E       		.byte	62
 2352 00c7 09       		.byte	9
 2353 00c8 09       		.byte	9
 2354 00c9 09       		.byte	9
 2355 00ca 09       		.byte	9
 2356 00cb 3E       		.byte	62
 2357 00cc 3F       		.byte	63
 2358 00cd 25       		.byte	37
 2359 00ce 25       		.byte	37
 2360 00cf 25       		.byte	37
 2361 00d0 25       		.byte	37
 2362 00d1 1A       		.byte	26
ARM GAS  /tmp/ccXMDTdb.s 			page 76


 2363 00d2 1E       		.byte	30
 2364 00d3 21       		.byte	33
 2365 00d4 21       		.byte	33
 2366 00d5 21       		.byte	33
 2367 00d6 21       		.byte	33
 2368 00d7 12       		.byte	18
 2369 00d8 3F       		.byte	63
 2370 00d9 21       		.byte	33
 2371 00da 21       		.byte	33
 2372 00db 21       		.byte	33
 2373 00dc 12       		.byte	18
 2374 00dd 0C       		.byte	12
 2375 00de 3F       		.byte	63
 2376 00df 25       		.byte	37
 2377 00e0 25       		.byte	37
 2378 00e1 25       		.byte	37
 2379 00e2 25       		.byte	37
 2380 00e3 21       		.byte	33
 2381 00e4 3F       		.byte	63
 2382 00e5 05       		.byte	5
 2383 00e6 05       		.byte	5
 2384 00e7 05       		.byte	5
 2385 00e8 05       		.byte	5
 2386 00e9 01       		.byte	1
 2387 00ea 1E       		.byte	30
 2388 00eb 21       		.byte	33
 2389 00ec 21       		.byte	33
 2390 00ed 21       		.byte	33
 2391 00ee 29       		.byte	41
 2392 00ef 1A       		.byte	26
 2393 00f0 3F       		.byte	63
 2394 00f1 04       		.byte	4
 2395 00f2 04       		.byte	4
 2396 00f3 04       		.byte	4
 2397 00f4 04       		.byte	4
 2398 00f5 3F       		.byte	63
 2399 00f6 21       		.byte	33
 2400 00f7 21       		.byte	33
 2401 00f8 3F       		.byte	63
 2402 00f9 21       		.byte	33
 2403 00fa 21       		.byte	33
 2404 00fb 21       		.byte	33
 2405 00fc 10       		.byte	16
 2406 00fd 20       		.byte	32
 2407 00fe 20       		.byte	32
 2408 00ff 20       		.byte	32
 2409 0100 20       		.byte	32
 2410 0101 1F       		.byte	31
 2411 0102 3F       		.byte	63
 2412 0103 04       		.byte	4
 2413 0104 0C       		.byte	12
 2414 0105 0A       		.byte	10
 2415 0106 11       		.byte	17
 2416 0107 20       		.byte	32
 2417 0108 3F       		.byte	63
 2418 0109 20       		.byte	32
 2419 010a 20       		.byte	32
ARM GAS  /tmp/ccXMDTdb.s 			page 77


 2420 010b 20       		.byte	32
 2421 010c 20       		.byte	32
 2422 010d 20       		.byte	32
 2423 010e 3F       		.byte	63
 2424 010f 02       		.byte	2
 2425 0110 04       		.byte	4
 2426 0111 04       		.byte	4
 2427 0112 02       		.byte	2
 2428 0113 3F       		.byte	63
 2429 0114 3F       		.byte	63
 2430 0115 02       		.byte	2
 2431 0116 04       		.byte	4
 2432 0117 08       		.byte	8
 2433 0118 10       		.byte	16
 2434 0119 3F       		.byte	63
 2435 011a 1E       		.byte	30
 2436 011b 21       		.byte	33
 2437 011c 21       		.byte	33
 2438 011d 21       		.byte	33
 2439 011e 21       		.byte	33
 2440 011f 1E       		.byte	30
 2441 0120 3F       		.byte	63
 2442 0121 09       		.byte	9
 2443 0122 09       		.byte	9
 2444 0123 09       		.byte	9
 2445 0124 09       		.byte	9
 2446 0125 06       		.byte	6
 2447 0126 1E       		.byte	30
 2448 0127 21       		.byte	33
 2449 0128 29       		.byte	41
 2450 0129 31       		.byte	49
 2451 012a 21       		.byte	33
 2452 012b 1E       		.byte	30
 2453 012c 3F       		.byte	63
 2454 012d 09       		.byte	9
 2455 012e 09       		.byte	9
 2456 012f 09       		.byte	9
 2457 0130 19       		.byte	25
 2458 0131 26       		.byte	38
 2459 0132 12       		.byte	18
 2460 0133 25       		.byte	37
 2461 0134 25       		.byte	37
 2462 0135 25       		.byte	37
 2463 0136 25       		.byte	37
 2464 0137 18       		.byte	24
 2465 0138 01       		.byte	1
 2466 0139 01       		.byte	1
 2467 013a 01       		.byte	1
 2468 013b 3F       		.byte	63
 2469 013c 01       		.byte	1
 2470 013d 01       		.byte	1
 2471 013e 1F       		.byte	31
 2472 013f 20       		.byte	32
 2473 0140 20       		.byte	32
 2474 0141 20       		.byte	32
 2475 0142 20       		.byte	32
 2476 0143 1F       		.byte	31
ARM GAS  /tmp/ccXMDTdb.s 			page 78


 2477 0144 0F       		.byte	15
 2478 0145 10       		.byte	16
 2479 0146 20       		.byte	32
 2480 0147 20       		.byte	32
 2481 0148 10       		.byte	16
 2482 0149 0F       		.byte	15
 2483 014a 1F       		.byte	31
 2484 014b 20       		.byte	32
 2485 014c 10       		.byte	16
 2486 014d 10       		.byte	16
 2487 014e 20       		.byte	32
 2488 014f 1F       		.byte	31
 2489 0150 21       		.byte	33
 2490 0151 12       		.byte	18
 2491 0152 0C       		.byte	12
 2492 0153 0C       		.byte	12
 2493 0154 12       		.byte	18
 2494 0155 21       		.byte	33
 2495 0156 01       		.byte	1
 2496 0157 02       		.byte	2
 2497 0158 0C       		.byte	12
 2498 0159 38       		.byte	56
 2499 015a 04       		.byte	4
 2500 015b 02       		.byte	2
 2501 015c 21       		.byte	33
 2502 015d 31       		.byte	49
 2503 015e 29       		.byte	41
 2504 015f 25       		.byte	37
 2505 0160 23       		.byte	35
 2506 0161 21       		.byte	33
 2507 0162 3F       		.byte	63
 2508 0163 21       		.byte	33
 2509 0164 00       		.byte	0
 2510 0165 00       		.byte	0
 2511 0166 00       		.byte	0
 2512 0167 00       		.byte	0
 2513 0168 02       		.byte	2
 2514 0169 04       		.byte	4
 2515 016a 08       		.byte	8
 2516 016b 10       		.byte	16
 2517 016c 20       		.byte	32
 2518 016d 00       		.byte	0
 2519 016e 21       		.byte	33
 2520 016f 3F       		.byte	63
 2521 0170 00       		.byte	0
 2522 0171 00       		.byte	0
 2523 0172 00       		.byte	0
 2524 0173 00       		.byte	0
 2525 0174 04       		.byte	4
 2526 0175 02       		.byte	2
 2527 0176 3F       		.byte	63
 2528 0177 02       		.byte	2
 2529 0178 04       		.byte	4
 2530 0179 00       		.byte	0
 2531 017a 40       		.byte	64
 2532 017b 40       		.byte	64
 2533 017c 40       		.byte	64
ARM GAS  /tmp/ccXMDTdb.s 			page 79


 2534 017d 40       		.byte	64
 2535 017e 40       		.byte	64
 2536 017f 40       		.byte	64
 2537 0180 01       		.byte	1
 2538 0181 02       		.byte	2
 2539 0182 00       		.byte	0
 2540 0183 00       		.byte	0
 2541 0184 00       		.byte	0
 2542 0185 00       		.byte	0
 2543 0186 10       		.byte	16
 2544 0187 30       		.byte	48
 2545 0188 2A       		.byte	42
 2546 0189 2A       		.byte	42
 2547 018a 3C       		.byte	60
 2548 018b 00       		.byte	0
 2549 018c 3F       		.byte	63
 2550 018d 24       		.byte	36
 2551 018e 24       		.byte	36
 2552 018f 24       		.byte	36
 2553 0190 18       		.byte	24
 2554 0191 00       		.byte	0
 2555 0192 0C       		.byte	12
 2556 0193 14       		.byte	20
 2557 0194 22       		.byte	34
 2558 0195 22       		.byte	34
 2559 0196 00       		.byte	0
 2560 0197 00       		.byte	0
 2561 0198 18       		.byte	24
 2562 0199 24       		.byte	36
 2563 019a 24       		.byte	36
 2564 019b 24       		.byte	36
 2565 019c 3F       		.byte	63
 2566 019d 00       		.byte	0
 2567 019e 1C       		.byte	28
 2568 019f 2C       		.byte	44
 2569 01a0 2A       		.byte	42
 2570 01a1 2A       		.byte	42
 2571 01a2 24       		.byte	36
 2572 01a3 00       		.byte	0
 2573 01a4 3E       		.byte	62
 2574 01a5 05       		.byte	5
 2575 01a6 01       		.byte	1
 2576 01a7 00       		.byte	0
 2577 01a8 00       		.byte	0
 2578 01a9 00       		.byte	0
 2579 01aa 18       		.byte	24
 2580 01ab 28       		.byte	40
 2581 01ac A4       		.byte	-92
 2582 01ad A4       		.byte	-92
 2583 01ae 7C       		.byte	124
 2584 01af 00       		.byte	0
 2585 01b0 3F       		.byte	63
 2586 01b1 04       		.byte	4
 2587 01b2 04       		.byte	4
 2588 01b3 0C       		.byte	12
 2589 01b4 30       		.byte	48
 2590 01b5 00       		.byte	0
ARM GAS  /tmp/ccXMDTdb.s 			page 80


 2591 01b6 24       		.byte	36
 2592 01b7 3D       		.byte	61
 2593 01b8 20       		.byte	32
 2594 01b9 00       		.byte	0
 2595 01ba 00       		.byte	0
 2596 01bb 00       		.byte	0
 2597 01bc 20       		.byte	32
 2598 01bd 40       		.byte	64
 2599 01be 40       		.byte	64
 2600 01bf 3D       		.byte	61
 2601 01c0 00       		.byte	0
 2602 01c1 00       		.byte	0
 2603 01c2 3F       		.byte	63
 2604 01c3 0C       		.byte	12
 2605 01c4 12       		.byte	18
 2606 01c5 20       		.byte	32
 2607 01c6 00       		.byte	0
 2608 01c7 00       		.byte	0
 2609 01c8 1F       		.byte	31
 2610 01c9 20       		.byte	32
 2611 01ca 20       		.byte	32
 2612 01cb 00       		.byte	0
 2613 01cc 00       		.byte	0
 2614 01cd 00       		.byte	0
 2615 01ce 3E       		.byte	62
 2616 01cf 02       		.byte	2
 2617 01d0 3C       		.byte	60
 2618 01d1 02       		.byte	2
 2619 01d2 3C       		.byte	60
 2620 01d3 00       		.byte	0
 2621 01d4 3E       		.byte	62
 2622 01d5 02       		.byte	2
 2623 01d6 02       		.byte	2
 2624 01d7 02       		.byte	2
 2625 01d8 3C       		.byte	60
 2626 01d9 00       		.byte	0
 2627 01da 0C       		.byte	12
 2628 01db 14       		.byte	20
 2629 01dc 22       		.byte	34
 2630 01dd 32       		.byte	50
 2631 01de 0C       		.byte	12
 2632 01df 00       		.byte	0
 2633 01e0 FC       		.byte	-4
 2634 01e1 24       		.byte	36
 2635 01e2 24       		.byte	36
 2636 01e3 24       		.byte	36
 2637 01e4 18       		.byte	24
 2638 01e5 00       		.byte	0
 2639 01e6 18       		.byte	24
 2640 01e7 24       		.byte	36
 2641 01e8 24       		.byte	36
 2642 01e9 24       		.byte	36
 2643 01ea FC       		.byte	-4
 2644 01eb 80       		.byte	-128
 2645 01ec 3C       		.byte	60
 2646 01ed 04       		.byte	4
 2647 01ee 02       		.byte	2
ARM GAS  /tmp/ccXMDTdb.s 			page 81


 2648 01ef 02       		.byte	2
 2649 01f0 00       		.byte	0
 2650 01f1 00       		.byte	0
 2651 01f2 24       		.byte	36
 2652 01f3 2C       		.byte	44
 2653 01f4 2A       		.byte	42
 2654 01f5 2A       		.byte	42
 2655 01f6 10       		.byte	16
 2656 01f7 00       		.byte	0
 2657 01f8 02       		.byte	2
 2658 01f9 1F       		.byte	31
 2659 01fa 22       		.byte	34
 2660 01fb 20       		.byte	32
 2661 01fc 00       		.byte	0
 2662 01fd 00       		.byte	0
 2663 01fe 1E       		.byte	30
 2664 01ff 20       		.byte	32
 2665 0200 20       		.byte	32
 2666 0201 20       		.byte	32
 2667 0202 1E       		.byte	30
 2668 0203 00       		.byte	0
 2669 0204 06       		.byte	6
 2670 0205 18       		.byte	24
 2671 0206 20       		.byte	32
 2672 0207 18       		.byte	24
 2673 0208 06       		.byte	6
 2674 0209 00       		.byte	0
 2675 020a 1E       		.byte	30
 2676 020b 30       		.byte	48
 2677 020c 1C       		.byte	28
 2678 020d 30       		.byte	48
 2679 020e 0E       		.byte	14
 2680 020f 00       		.byte	0
 2681 0210 22       		.byte	34
 2682 0211 14       		.byte	20
 2683 0212 08       		.byte	8
 2684 0213 14       		.byte	20
 2685 0214 22       		.byte	34
 2686 0215 00       		.byte	0
 2687 0216 0C       		.byte	12
 2688 0217 10       		.byte	16
 2689 0218 A0       		.byte	-96
 2690 0219 A0       		.byte	-96
 2691 021a 7C       		.byte	124
 2692 021b 00       		.byte	0
 2693 021c 22       		.byte	34
 2694 021d 32       		.byte	50
 2695 021e 2A       		.byte	42
 2696 021f 26       		.byte	38
 2697 0220 22       		.byte	34
 2698 0221 22       		.byte	34
 2699 0222 0C       		.byte	12
 2700 0223 3F       		.byte	63
 2701 0224 21       		.byte	33
 2702 0225 00       		.byte	0
 2703 0226 00       		.byte	0
 2704 0227 00       		.byte	0
ARM GAS  /tmp/ccXMDTdb.s 			page 82


 2705 0228 3F       		.byte	63
 2706 0229 00       		.byte	0
 2707 022a 00       		.byte	0
 2708 022b 00       		.byte	0
 2709 022c 00       		.byte	0
 2710 022d 00       		.byte	0
 2711 022e 21       		.byte	33
 2712 022f 3F       		.byte	63
 2713 0230 0C       		.byte	12
 2714 0231 00       		.byte	0
 2715 0232 00       		.byte	0
 2716 0233 00       		.byte	0
 2717 0234 02       		.byte	2
 2718 0235 01       		.byte	1
 2719 0236 02       		.byte	2
 2720 0237 01       		.byte	1
 2721 0238 00       		.byte	0
 2722 0239 00       		.byte	0
 2723 023a 00       		.byte	0
 2724 023b 00       		.byte	0
 2725 023c 00       		.byte	0
 2726 023d 00       		.byte	0
 2727 023e 00       		.byte	0
 2728 023f 00       		.byte	0
 2729              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2730              		.align	2
 2731              	.LC23:
 2732 0000 64667500 		.ascii	"dfu\000"
 2733              	.LC25:
 2734 0004 4F747465 		.ascii	"Otter-Iron\000"
 2734      722D4972 
 2734      6F6E00
 2735 000f 00       		.space	1
 2736              	.LC27:
 2737 0010 6279204A 		.ascii	"by Jan Henrik\000"
 2737      616E2048 
 2737      656E7269 
 2737      6B00
 2738 001e 0000     		.space	2
 2739              	.LC33:
 2740 0020 25642043 		.ascii	"%d C\000"
 2740      00
 2741 0025 000000   		.space	3
 2742              	.LC35:
 2743 0028 25642E25 		.ascii	"%d.%d C\000"
 2743      64204300 
 2744              	.LC37:
 2745 0030 25642E25 		.ascii	"%d.%d V\000"
 2745      64205600 
 2746              	.LC39:
 2747 0038 2A00     		.ascii	"*\000"
 2748 003a 0000     		.space	2
 2749              	.LC41:
 2750 003c 2000     		.ascii	" \000"
 2751              		.text
 2752              	.Letext0:
 2753              		.file 4 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machin
ARM GAS  /tmp/ccXMDTdb.s 			page 83


 2754              		.file 5 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_s
 2755              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2756              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2757              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2758              		.file 9 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lo
 2759              		.file 10 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_
 2760              		.file 11 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1
 2761              		.file 12 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/r
 2762              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2763              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2764              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2765              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2766              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2767              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2768              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2769              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2770              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2771              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2772              		.file 23 "Inc/font.h"
 2773              		.file 24 "<built-in>"
 2774              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 2775              		.file 26 "Inc/main.h"
 2776              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 2777              		.file 28 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2778              		.file 29 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio
ARM GAS  /tmp/ccXMDTdb.s 			page 84


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccXMDTdb.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccXMDTdb.s:100    .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/ccXMDTdb.s:106    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:112    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccXMDTdb.s:154    .text.MX_DMA_Init:000000000000002c $d
     /tmp/ccXMDTdb.s:159    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:165    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccXMDTdb.s:297    .text.MX_ADC_Init:00000000000000a0 $d
                            *COM*:000000000000004c hadc
     /tmp/ccXMDTdb.s:304    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:310    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccXMDTdb.s:364    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccXMDTdb.s:371    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:377    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccXMDTdb.s:431    .text.MX_I2C2_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c2
     /tmp/ccXMDTdb.s:438    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:444    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccXMDTdb.s:614    .text.MX_TIM1_Init:00000000000000dc $d
                            *COM*:0000000000000040 htim1
     /tmp/ccXMDTdb.s:622    .text.MX_USB_PCD_Init:0000000000000000 $t
     /tmp/ccXMDTdb.s:628    .text.MX_USB_PCD_Init:0000000000000000 MX_USB_PCD_Init
     /tmp/ccXMDTdb.s:667    .text.MX_USB_PCD_Init:0000000000000020 $d
                            *COM*:0000000000000220 hpcd_USB_FS
     /tmp/ccXMDTdb.s:688    .text.reg:0000000000000000 $t
     /tmp/ccXMDTdb.s:695    .text.reg:0000000000000000 reg
     /tmp/ccXMDTdb.s:930    .text.reg:0000000000000178 $d
                            *COM*:0000000000000018 s
     /tmp/ccXMDTdb.s:950    .text.disp_init:0000000000000000 $t
     /tmp/ccXMDTdb.s:957    .text.disp_init:0000000000000000 disp_init
     /tmp/ccXMDTdb.s:1016   .text.disp_init:0000000000000040 $d
                            *COM*:00000000000000da screenBuffer
     /tmp/ccXMDTdb.s:1025   .text.refresh:0000000000000000 $t
     /tmp/ccXMDTdb.s:1032   .text.refresh:0000000000000000 refresh
     /tmp/ccXMDTdb.s:1086   .text.refresh:0000000000000034 $d
     /tmp/ccXMDTdb.s:1093   .text.clear_screen:0000000000000000 $t
     /tmp/ccXMDTdb.s:1100   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccXMDTdb.s:1123   .text.clear_screen:0000000000000010 $d
     /tmp/ccXMDTdb.s:1128   .text.set_screen:0000000000000000 $t
     /tmp/ccXMDTdb.s:1135   .text.set_screen:0000000000000000 set_screen
     /tmp/ccXMDTdb.s:1158   .text.set_screen:0000000000000010 $d
     /tmp/ccXMDTdb.s:1163   .text.write_pixel:0000000000000000 $t
     /tmp/ccXMDTdb.s:1170   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccXMDTdb.s:1251   .text.write_pixel:0000000000000068 $d
     /tmp/ccXMDTdb.s:1256   .text.draw_char:0000000000000000 $t
     /tmp/ccXMDTdb.s:1263   .text.draw_char:0000000000000000 draw_char
     /tmp/ccXMDTdb.s:1381   .text.draw_char:0000000000000064 $d
     /tmp/ccXMDTdb.s:2152   .rodata.font:0000000000000000 font
     /tmp/ccXMDTdb.s:1386   .text.draw_string:0000000000000000 $t
     /tmp/ccXMDTdb.s:1393   .text.draw_string:0000000000000000 draw_string
     /tmp/ccXMDTdb.s:1444   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccXMDTdb.s:1451   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccXMDTdb.s:1544   .text.SystemClock_Config:000000000000006c $d
ARM GAS  /tmp/ccXMDTdb.s 			page 85


     /tmp/ccXMDTdb.s:1550   .text.main:0000000000000000 $t
     /tmp/ccXMDTdb.s:1557   .text.main:0000000000000000 main
     /tmp/ccXMDTdb.s:1974   .text.main:0000000000000244 $d
     /tmp/ccXMDTdb.s:2002   .text.Error_Handler:0000000000000000 $t
     /tmp/ccXMDTdb.s:2009   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccXMDTdb.s:2052   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccXMDTdb.s:2130   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccXMDTdb.s:2122   .data.tipcal:0000000000000000 tipcal
     /tmp/ccXMDTdb.s:2108   .data.r:0000000000000000 r
                            *COM*:0000000000000044 hdma_adc
     /tmp/ccXMDTdb.s:2036   .rodata:0000000000000000 $d
     /tmp/ccXMDTdb.s:2041   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccXMDTdb.s:2045   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccXMDTdb.s:2048   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccXMDTdb.s:2104   .data.r:0000000000000000 $d
     /tmp/ccXMDTdb.s:2118   .data.tipcal:0000000000000000 $d
     /tmp/ccXMDTdb.s:2126   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccXMDTdb.s:2149   .rodata.font:0000000000000000 $d
     /tmp/ccXMDTdb.s:2730   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PCD_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
memcpy
ARM GAS  /tmp/ccXMDTdb.s 			page 86


HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_f2uiz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
sprintf
