ARM GAS  /tmp/ccJSMaGx.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB53:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2019 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  24:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  25:Src/main.c    **** 
  26:Src/main.c    **** #define TTIP_AVG_FILTER 0.8f
  27:Src/main.c    **** #define MIN_DUTY 0
  28:Src/main.c    **** #define MAX_DUTY 4050
  29:Src/main.c    **** 
  30:Src/main.c    **** ADC_HandleTypeDef hadc;
  31:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  32:Src/main.c    **** 
  33:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  34:Src/main.c    **** I2C_HandleTypeDef hi2c2;
ARM GAS  /tmp/ccJSMaGx.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** TIM_HandleTypeDef htim1;
  37:Src/main.c    **** 
  38:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_FS;
  39:Src/main.c    **** 
  40:Src/main.c    **** void SystemClock_Config(void);
  41:Src/main.c    **** static void MX_GPIO_Init(void);
  42:Src/main.c    **** static void MX_ADC_Init(void);
  43:Src/main.c    **** static void MX_DMA_Init(void);
  44:Src/main.c    **** static void MX_I2C1_Init(void);
  45:Src/main.c    **** static void MX_I2C2_Init(void);
  46:Src/main.c    **** static void MX_TIM1_Init(void);
  47:Src/main.c    **** static void MX_USB_PCD_Init(void);
  48:Src/main.c    **** 
  49:Src/main.c    **** void reg(void);
  50:Src/main.c    **** void disp_init(void);
  51:Src/main.c    **** void refresh(void);
  52:Src/main.c    **** void clear_screen(void);
  53:Src/main.c    **** void set_screen(void);
  54:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  55:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  56:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  57:Src/main.c    **** 
  58:Src/main.c    **** 
  59:Src/main.c    **** struct status_t{
  60:Src/main.c    ****   float ttip;
  61:Src/main.c    ****   float ttipavg;
  62:Src/main.c    ****   float uin;
  63:Src/main.c    ****   float iin;
  64:Src/main.c    ****   float tref;
  65:Src/main.c    ****   uint8_t button[2];
  66:Src/main.c    **** }s;
  67:Src/main.c    **** 
  68:Src/main.c    **** struct reg_t{
  69:Src/main.c    ****   float target;
  70:Src/main.c    ****   float error;
  71:Src/main.c    ****   float errorprior;
  72:Src/main.c    ****   float ierror;
  73:Src/main.c    ****   float imax;
  74:Src/main.c    ****   float derror;
  75:Src/main.c    ****   int16_t duty;
  76:Src/main.c    ****   float cycletime;
  77:Src/main.c    ****   float Kp;
  78:Src/main.c    ****   float Ki;
  79:Src/main.c    ****   float Kd;
  80:Src/main.c    ****   float deadband;
  81:Src/main.c    **** }r = {.Kp = 40.0f,.Ki = 15.0f,.Kd = 12.0f,.cycletime = 0.1f,.imax=200.0f,.target=220.0f,.deadband=1
  82:Src/main.c    **** 
  83:Src/main.c    **** struct tipcal_t{
  84:Src/main.c    ****   float offset;
  85:Src/main.c    ****   float coefficient;
  86:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
  87:Src/main.c    **** 
  88:Src/main.c    **** static uint16_t ADC_raw[4];
  89:Src/main.c    **** 
  90:Src/main.c    **** int main(void)
  91:Src/main.c    **** {
ARM GAS  /tmp/ccJSMaGx.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    ****   HAL_Init();
  94:Src/main.c    **** 
  95:Src/main.c    ****   SystemClock_Config();
  96:Src/main.c    **** 
  97:Src/main.c    ****   MX_GPIO_Init();
  98:Src/main.c    ****   MX_DMA_Init();
  99:Src/main.c    ****   MX_ADC_Init();
 100:Src/main.c    ****   MX_I2C1_Init();
 101:Src/main.c    ****   MX_I2C2_Init();
 102:Src/main.c    ****   MX_TIM1_Init();
 103:Src/main.c    ****   MX_USB_PCD_Init();
 104:Src/main.c    **** 
 105:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 106:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 107:Src/main.c    **** 
 108:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 109:Src/main.c    **** 
 110:Src/main.c    ****   HAL_Delay(20);
 111:Src/main.c    ****   disp_init();
 112:Src/main.c    ****   HAL_Delay(60);
 113:Src/main.c    ****   clear_screen();
 114:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 115:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 116:Src/main.c    ****     refresh();
 117:Src/main.c    ****     HAL_Delay(40);
 118:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 119:Src/main.c    ****     NVIC_SystemReset();
 120:Src/main.c    ****   } else {
 121:Src/main.c    ****     draw_string("Otter-Iron", 15, 1 ,1);
 122:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 123:Src/main.c    ****     refresh();
 124:Src/main.c    ****   }
 125:Src/main.c    ****   HAL_Delay(1000);
 126:Src/main.c    **** 
 127:Src/main.c    ****   while (1)
 128:Src/main.c    ****   {
 129:Src/main.c    ****     HAL_Delay(50);
 130:Src/main.c    **** 
 131:Src/main.c    ****     //UI
 132:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 133:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 134:Src/main.c    **** 
 135:Src/main.c    ****     if(s.button[0] == 1){
 136:Src/main.c    ****       r.target -= 5;
 137:Src/main.c    ****       HAL_Delay(50);
 138:Src/main.c    ****     }
 139:Src/main.c    **** 
 140:Src/main.c    ****     if(s.button[1] == 1){
 141:Src/main.c    ****       r.target += 5;
 142:Src/main.c    ****       HAL_Delay(50);
 143:Src/main.c    ****     }
 144:Src/main.c    **** 
 145:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 146:Src/main.c    **** 
 147:Src/main.c    ****     //super shitty display code
 148:Src/main.c    ****     char str1[10] = "          ";
ARM GAS  /tmp/ccJSMaGx.s 			page 4


 149:Src/main.c    ****     char str2[10] = "          ";
 150:Src/main.c    ****     char str3[10] = "          ";
 151:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 152:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 153:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 154:Src/main.c    **** 
 155:Src/main.c    ****     clear_screen();
 156:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 157:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 158:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 159:Src/main.c    ****     if(r.error > 3){
 160:Src/main.c    ****       draw_string("*", 60, 9 ,1);
 161:Src/main.c    ****     } else {
 162:Src/main.c    ****       draw_string(" ", 60, 9 ,1);
 163:Src/main.c    ****     }
 164:Src/main.c    ****     refresh();
 165:Src/main.c    ****   }
 166:Src/main.c    **** }
 167:Src/main.c    **** 
 168:Src/main.c    **** // Main PID controller and ADC readout
 169:Src/main.c    **** void reg(void) {
 170:Src/main.c    **** 
 171:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 172:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 173:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 174:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 175:Src/main.c    **** 
 176:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 177:Src/main.c    **** 
 178:Src/main.c    ****   if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 179:Src/main.c    ****     r.error = r.target - s.ttipavg;
 180:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 181:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 182:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 183:Src/main.c    ****     r.duty = r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror;
 184:Src/main.c    ****     r.errorprior = r.error;
 185:Src/main.c    ****   } else {
 186:Src/main.c    ****     if(s.ttipavg <= r.target){
 187:Src/main.c    ****       r.duty = MAX_DUTY;
 188:Src/main.c    ****     } else {
 189:Src/main.c    ****       r.duty = MIN_DUTY;
 190:Src/main.c    ****     }
 191:Src/main.c    ****     r.error = 4.0;
 192:Src/main.c    ****   }
 193:Src/main.c    **** 
 194:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 195:Src/main.c    **** 
 196:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 197:Src/main.c    **** }
 198:Src/main.c    **** 
 199:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 200:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 201:Src/main.c    **** #define OLED_WIDTH        96
 202:Src/main.c    **** #define FRAMEBUFFER_START 17
 203:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 204:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 205:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
ARM GAS  /tmp/ccJSMaGx.s 			page 5


 206:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 207:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 208:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 209:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 210:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 211:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 212:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 213:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 214:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 215:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
 216:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 217:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 218:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 219:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 220:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 221:Src/main.c    **** 0x80, 0x33, /*^51*/
 222:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 223:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 224:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 225:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 226:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 227:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 228:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 229:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 230:Src/main.c    **** 0x80, 0xAF /*Display on*/
 231:Src/main.c    **** };
 232:Src/main.c    **** //not Ralim anymore
 233:Src/main.c    **** void disp_init(void) {
 234:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 235:Src/main.c    ****   uint16_t _cnt = 0;
 236:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 237:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 238:Src/main.c    **** }
 239:Src/main.c    **** 
 240:Src/main.c    **** void refresh(void) {
 241:Src/main.c    ****   uint16_t _cnt = 0;
 242:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 243:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 244:Src/main.c    **** }
 245:Src/main.c    **** 
 246:Src/main.c    **** void clear_screen(void) {
 247:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 248:Src/main.c    **** }
 249:Src/main.c    **** void set_screen(void) {
 250:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 251:Src/main.c    **** }
 252:Src/main.c    **** 
 253:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 254:Src/main.c    ****   if(color == 1){
 255:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 256:Src/main.c    ****   } else if (color == 0){
 257:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 258:Src/main.c    ****   }
 259:Src/main.c    **** }
 260:Src/main.c    **** 
 261:Src/main.c    **** #define CHAR_WIDTH 6
 262:Src/main.c    **** #define CHAR_HEIGHT 8
ARM GAS  /tmp/ccJSMaGx.s 			page 6


 263:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 264:Src/main.c    ****     c = c & 0x7F;
 265:Src/main.c    ****     if (c < ' ') {
 266:Src/main.c    ****         c = 0;
 267:Src/main.c    ****     } else {
 268:Src/main.c    ****         c -= ' ';
 269:Src/main.c    ****     }
 270:Src/main.c    ****     uint8_t * chr = font[c];
 271:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 272:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 273:Src/main.c    ****             if (chr[j] & (1<<i)) {
 274:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 275:Src/main.c    ****             } else {
 276:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 277:Src/main.c    ****             }
 278:Src/main.c    ****         }
 279:Src/main.c    ****     }
 280:Src/main.c    **** }
 281:Src/main.c    **** 
 282:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 283:Src/main.c    ****     while (*str) {
 284:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 285:Src/main.c    ****         x += CHAR_WIDTH;
 286:Src/main.c    ****     }
 287:Src/main.c    **** }
 288:Src/main.c    **** 
 289:Src/main.c    **** void SystemClock_Config(void)
 290:Src/main.c    **** {
 291:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 292:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 293:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 294:Src/main.c    **** 
 295:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 296:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 297:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 298:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 299:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 300:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 301:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 302:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 303:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 304:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 305:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 306:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 307:Src/main.c    **** 
 308:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 309:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 310:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 311:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 312:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 313:Src/main.c    **** 
 314:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 315:Src/main.c    **** 
 316:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 317:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 318:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 319:Src/main.c    **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 7


 320:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 321:Src/main.c    **** }
 322:Src/main.c    **** 
 323:Src/main.c    **** static void MX_ADC_Init(void)
 324:Src/main.c    **** {
 325:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 326:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 327:Src/main.c    **** 
 328:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 329:Src/main.c    **** 
 330:Src/main.c    ****   hadc.Instance = ADC1;
 331:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 332:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 333:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 334:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 335:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 336:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 337:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 338:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 339:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 340:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 341:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 342:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 343:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 344:Src/main.c    ****   HAL_ADC_Init(&hadc);
 345:Src/main.c    **** 
 346:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 347:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 348:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 349:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 350:Src/main.c    **** 
 351:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 352:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 353:Src/main.c    **** 
 354:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 355:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 356:Src/main.c    **** 
 357:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 358:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 359:Src/main.c    **** 
 360:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** static void MX_I2C1_Init(void)
 364:Src/main.c    **** {
 365:Src/main.c    **** 
 366:Src/main.c    ****   hi2c1.Instance = I2C1;
 367:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 368:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 369:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 370:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 371:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 372:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 373:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 374:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 375:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 376:Src/main.c    **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 8


 377:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 378:Src/main.c    **** 
 379:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 380:Src/main.c    **** }
 381:Src/main.c    **** 
 382:Src/main.c    **** static void MX_I2C2_Init(void)
 383:Src/main.c    **** {
 384:Src/main.c    **** 
 385:Src/main.c    ****   hi2c2.Instance = I2C2;
 386:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 387:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 388:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 389:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 390:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 391:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 392:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 393:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 394:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 395:Src/main.c    **** 
 396:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 397:Src/main.c    **** 
 398:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** static void MX_TIM1_Init(void)
 402:Src/main.c    **** {
 403:Src/main.c    **** 
 404:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 405:Src/main.c    **** 
 406:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 407:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 408:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 409:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 410:Src/main.c    **** 
 411:Src/main.c    ****   htim1.Instance = TIM1;
 412:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 413:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 414:Src/main.c    ****   htim1.Init.Period = 4096;
 415:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 416:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 417:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 418:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 419:Src/main.c    **** 
 420:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 421:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 422:Src/main.c    **** 
 423:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 424:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 425:Src/main.c    **** 
 426:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 427:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 428:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 429:Src/main.c    **** 
 430:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 431:Src/main.c    ****   sConfigOC.Pulse = 50;
 432:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 433:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
ARM GAS  /tmp/ccJSMaGx.s 			page 9


 434:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 435:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 436:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 437:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 438:Src/main.c    **** 
 439:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 440:Src/main.c    ****   sConfigOC.Pulse = 4090;
 441:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 442:Src/main.c    **** 
 443:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 444:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 445:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 446:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 447:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 448:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 449:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 450:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 451:Src/main.c    **** 
 452:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 453:Src/main.c    **** }
 454:Src/main.c    **** /*
 455:Src/main.c    **** static void MX_TIM2_Init(void)
 456:Src/main.c    **** {
 457:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 458:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 459:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 460:Src/main.c    **** 
 461:Src/main.c    ****   htim2.Instance = TIM2;
 462:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 463:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 464:Src/main.c    ****   htim2.Init.Period = 4096;
 465:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 466:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 467:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 468:Src/main.c    **** 
 469:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 470:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 471:Src/main.c    **** 
 472:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 473:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 474:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 475:Src/main.c    **** 
 476:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 477:Src/main.c    ****   sConfigOC.Pulse = 30;
 478:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 479:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 480:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 481:Src/main.c    **** 
 482:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 483:Src/main.c    **** 
 484:Src/main.c    **** }
 485:Src/main.c    **** */
 486:Src/main.c    **** static void MX_USB_PCD_Init(void)
 487:Src/main.c    **** {
 488:Src/main.c    **** 
 489:Src/main.c    ****   hpcd_USB_FS.Instance = USB;
 490:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
ARM GAS  /tmp/ccJSMaGx.s 			page 10


 491:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 492:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 493:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 494:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 495:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 496:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 497:Src/main.c    **** }
 498:Src/main.c    **** 
 499:Src/main.c    **** static void MX_DMA_Init(void)
 500:Src/main.c    **** {
 501:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 502:Src/main.c    **** 
 503:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 504:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 505:Src/main.c    ****   /*
 506:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 507:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 508:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 509:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 510:Src/main.c    ****   */
 511:Src/main.c    **** 
 512:Src/main.c    **** }
 513:Src/main.c    **** 
 514:Src/main.c    **** static void MX_GPIO_Init(void)
 515:Src/main.c    **** {
  25              		.loc 1 515 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 00B5     		push	{lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 14, -4
  33 0002 89B0     		sub	sp, sp, #36
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 40
 516:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  36              		.loc 1 516 0
  37 0004 1022     		movs	r2, #16
  38 0006 0021     		movs	r1, #0
  39 0008 04A8     		add	r0, sp, #16
  40 000a FFF7FEFF 		bl	memset
  41              	.LVL0:
  42              	.LBB8:
 517:Src/main.c    **** 
 518:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  43              		.loc 1 518 0
  44 000e 144B     		ldr	r3, .L2
  45 0010 5969     		ldr	r1, [r3, #20]
  46 0012 8020     		movs	r0, #128
  47 0014 8002     		lsls	r0, r0, #10
  48 0016 0143     		orrs	r1, r0
  49 0018 5961     		str	r1, [r3, #20]
  50 001a 5A69     		ldr	r2, [r3, #20]
  51 001c 0240     		ands	r2, r0
  52 001e 0192     		str	r2, [sp, #4]
  53 0020 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccJSMaGx.s 			page 11


  54              	.LBE8:
  55              	.LBB9:
 519:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  56              		.loc 1 519 0
  57 0022 5A69     		ldr	r2, [r3, #20]
  58 0024 8021     		movs	r1, #128
  59 0026 C902     		lsls	r1, r1, #11
  60 0028 0A43     		orrs	r2, r1
  61 002a 5A61     		str	r2, [r3, #20]
  62 002c 5B69     		ldr	r3, [r3, #20]
  63 002e 0B40     		ands	r3, r1
  64 0030 0293     		str	r3, [sp, #8]
  65 0032 029B     		ldr	r3, [sp, #8]
  66              	.LBE9:
 520:Src/main.c    **** 
 521:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  67              		.loc 1 521 0
  68 0034 1823     		movs	r3, #24
  69 0036 0393     		str	r3, [sp, #12]
 522:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 523:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  70              		.loc 1 523 0
  71 0038 163B     		subs	r3, r3, #22
  72 003a 0593     		str	r3, [sp, #20]
 524:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  73              		.loc 1 524 0
  74 003c 9020     		movs	r0, #144
  75 003e 03A9     		add	r1, sp, #12
  76 0040 C005     		lsls	r0, r0, #23
  77 0042 FFF7FEFF 		bl	HAL_GPIO_Init
  78              	.LVL1:
 525:Src/main.c    **** 
 526:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
  79              		.loc 1 526 0
  80 0046 8023     		movs	r3, #128
  81 0048 5B01     		lsls	r3, r3, #5
  82 004a 0393     		str	r3, [sp, #12]
 527:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  83              		.loc 1 527 0
  84 004c 0023     		movs	r3, #0
  85 004e 0493     		str	r3, [sp, #16]
 528:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  86              		.loc 1 528 0
  87 0050 0593     		str	r3, [sp, #20]
 529:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
  88              		.loc 1 529 0
  89 0052 03A9     		add	r1, sp, #12
  90 0054 0348     		ldr	r0, .L2+4
  91 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL2:
 530:Src/main.c    **** 
 531:Src/main.c    **** }
  93              		.loc 1 531 0
  94 005a 09B0     		add	sp, sp, #36
  95              		@ sp needed
  96 005c 00BD     		pop	{pc}
  97              	.L3:
ARM GAS  /tmp/ccJSMaGx.s 			page 12


  98 005e C046     		.align	2
  99              	.L2:
 100 0060 00100240 		.word	1073876992
 101 0064 00040048 		.word	1207960576
 102              		.cfi_endproc
 103              	.LFE53:
 105              		.section	.text.MX_DMA_Init,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	MX_DMA_Init:
 113              	.LFB52:
 500:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 114              		.loc 1 500 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 00B5     		push	{lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 14, -4
 122 0002 83B0     		sub	sp, sp, #12
 123              	.LCFI3:
 124              		.cfi_def_cfa_offset 16
 125              	.LBB10:
 501:Src/main.c    **** 
 126              		.loc 1 501 0
 127 0004 094A     		ldr	r2, .L5
 128 0006 5169     		ldr	r1, [r2, #20]
 129 0008 0123     		movs	r3, #1
 130 000a 1943     		orrs	r1, r3
 131 000c 5161     		str	r1, [r2, #20]
 132 000e 5269     		ldr	r2, [r2, #20]
 133 0010 1340     		ands	r3, r2
 134 0012 0193     		str	r3, [sp, #4]
 135 0014 019B     		ldr	r3, [sp, #4]
 136              	.LBE10:
 503:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 137              		.loc 1 503 0
 138 0016 0022     		movs	r2, #0
 139 0018 0021     		movs	r1, #0
 140 001a 0920     		movs	r0, #9
 141 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 142              	.LVL3:
 504:Src/main.c    ****   /*
 143              		.loc 1 504 0
 144 0020 0920     		movs	r0, #9
 145 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 146              	.LVL4:
 512:Src/main.c    **** 
 147              		.loc 1 512 0
 148 0026 03B0     		add	sp, sp, #12
 149              		@ sp needed
 150 0028 00BD     		pop	{pc}
 151              	.L6:
ARM GAS  /tmp/ccJSMaGx.s 			page 13


 152 002a C046     		.align	2
 153              	.L5:
 154 002c 00100240 		.word	1073876992
 155              		.cfi_endproc
 156              	.LFE52:
 158              		.section	.text.MX_ADC_Init,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
 163              		.fpu softvfp
 165              	MX_ADC_Init:
 166              	.LFB47:
 324:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 167              		.loc 1 324 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 24
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 70B5     		push	{r4, r5, r6, lr}
 172              	.LCFI4:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
 178 0002 86B0     		sub	sp, sp, #24
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 40
 181              	.LBB11:
 325:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 182              		.loc 1 325 0
 183 0004 264B     		ldr	r3, .L8
 184 0006 5A69     		ldr	r2, [r3, #20]
 185 0008 0126     		movs	r6, #1
 186 000a 3243     		orrs	r2, r6
 187 000c 5A61     		str	r2, [r3, #20]
 188 000e 5A69     		ldr	r2, [r3, #20]
 189 0010 3240     		ands	r2, r6
 190 0012 0192     		str	r2, [sp, #4]
 191 0014 019A     		ldr	r2, [sp, #4]
 192              	.LBE11:
 193              	.LBB12:
 326:Src/main.c    **** 
 194              		.loc 1 326 0
 195 0016 9A69     		ldr	r2, [r3, #24]
 196 0018 8021     		movs	r1, #128
 197 001a 8900     		lsls	r1, r1, #2
 198 001c 0A43     		orrs	r2, r1
 199 001e 9A61     		str	r2, [r3, #24]
 200 0020 9B69     		ldr	r3, [r3, #24]
 201 0022 0B40     		ands	r3, r1
 202 0024 0293     		str	r3, [sp, #8]
 203 0026 029B     		ldr	r3, [sp, #8]
 204              	.LBE12:
 328:Src/main.c    **** 
 205              		.loc 1 328 0
 206 0028 0C22     		movs	r2, #12
ARM GAS  /tmp/ccJSMaGx.s 			page 14


 207 002a 0021     		movs	r1, #0
 208 002c 03A8     		add	r0, sp, #12
 209 002e FFF7FEFF 		bl	memset
 210              	.LVL5:
 330:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 211              		.loc 1 330 0
 212 0032 1C4C     		ldr	r4, .L8+4
 213 0034 1C4B     		ldr	r3, .L8+8
 214 0036 2360     		str	r3, [r4]
 331:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 215              		.loc 1 331 0
 216 0038 0025     		movs	r5, #0
 217 003a 6560     		str	r5, [r4, #4]
 332:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218              		.loc 1 332 0
 219 003c A560     		str	r5, [r4, #8]
 333:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 220              		.loc 1 333 0
 221 003e E560     		str	r5, [r4, #12]
 334:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 222              		.loc 1 334 0
 223 0040 2661     		str	r6, [r4, #16]
 335:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 224              		.loc 1 335 0
 225 0042 0823     		movs	r3, #8
 226 0044 6361     		str	r3, [r4, #20]
 336:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 227              		.loc 1 336 0
 228 0046 A561     		str	r5, [r4, #24]
 337:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 229              		.loc 1 337 0
 230 0048 E561     		str	r5, [r4, #28]
 338:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 231              		.loc 1 338 0
 232 004a 2562     		str	r5, [r4, #32]
 339:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 233              		.loc 1 339 0
 234 004c 6562     		str	r5, [r4, #36]
 340:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 235              		.loc 1 340 0
 236 004e 3833     		adds	r3, r3, #56
 237 0050 A362     		str	r3, [r4, #40]
 341:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 238              		.loc 1 341 0
 239 0052 8023     		movs	r3, #128
 240 0054 DB00     		lsls	r3, r3, #3
 241 0056 E362     		str	r3, [r4, #44]
 342:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 242              		.loc 1 342 0
 243 0058 2663     		str	r6, [r4, #48]
 343:Src/main.c    ****   HAL_ADC_Init(&hadc);
 244              		.loc 1 343 0
 245 005a 6663     		str	r6, [r4, #52]
 344:Src/main.c    **** 
 246              		.loc 1 344 0
 247 005c 2000     		movs	r0, r4
 248 005e FFF7FEFF 		bl	HAL_ADC_Init
ARM GAS  /tmp/ccJSMaGx.s 			page 15


 249              	.LVL6:
 346:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 250              		.loc 1 346 0
 251 0062 0395     		str	r5, [sp, #12]
 347:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 252              		.loc 1 347 0
 253 0064 8023     		movs	r3, #128
 254 0066 5B01     		lsls	r3, r3, #5
 255 0068 0493     		str	r3, [sp, #16]
 348:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 256              		.loc 1 348 0
 257 006a 0235     		adds	r5, r5, #2
 258 006c 0595     		str	r5, [sp, #20]
 349:Src/main.c    **** 
 259              		.loc 1 349 0
 260 006e 03A9     		add	r1, sp, #12
 261 0070 2000     		movs	r0, r4
 262 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 263              	.LVL7:
 351:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 264              		.loc 1 351 0
 265 0076 0396     		str	r6, [sp, #12]
 352:Src/main.c    **** 
 266              		.loc 1 352 0
 267 0078 03A9     		add	r1, sp, #12
 268 007a 2000     		movs	r0, r4
 269 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 270              	.LVL8:
 354:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 271              		.loc 1 354 0
 272 0080 0395     		str	r5, [sp, #12]
 355:Src/main.c    **** 
 273              		.loc 1 355 0
 274 0082 03A9     		add	r1, sp, #12
 275 0084 2000     		movs	r0, r4
 276 0086 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 277              	.LVL9:
 357:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 278              		.loc 1 357 0
 279 008a 0523     		movs	r3, #5
 280 008c 0393     		str	r3, [sp, #12]
 358:Src/main.c    **** 
 281              		.loc 1 358 0
 282 008e 03A9     		add	r1, sp, #12
 283 0090 2000     		movs	r0, r4
 284 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 285              	.LVL10:
 360:Src/main.c    **** }
 286              		.loc 1 360 0
 287 0096 2000     		movs	r0, r4
 288 0098 FFF7FEFF 		bl	HAL_ADC_MspInit
 289              	.LVL11:
 361:Src/main.c    **** 
 290              		.loc 1 361 0
 291 009c 06B0     		add	sp, sp, #24
 292              		@ sp needed
 293 009e 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccJSMaGx.s 			page 16


 294              	.L9:
 295              		.align	2
 296              	.L8:
 297 00a0 00100240 		.word	1073876992
 298 00a4 00000000 		.word	hadc
 299 00a8 00240140 		.word	1073816576
 300              		.cfi_endproc
 301              	.LFE47:
 303              		.section	.text.MX_I2C1_Init,"ax",%progbits
 304              		.align	1
 305              		.syntax unified
 306              		.code	16
 307              		.thumb_func
 308              		.fpu softvfp
 310              	MX_I2C1_Init:
 311              	.LFB48:
 364:Src/main.c    **** 
 312              		.loc 1 364 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 10B5     		push	{r4, lr}
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 4, -8
 320              		.cfi_offset 14, -4
 366:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 321              		.loc 1 366 0
 322 0002 0D4C     		ldr	r4, .L11
 323 0004 0D4B     		ldr	r3, .L11+4
 324 0006 2360     		str	r3, [r4]
 367:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 325              		.loc 1 367 0
 326 0008 0D4B     		ldr	r3, .L11+8
 327 000a 6360     		str	r3, [r4, #4]
 368:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 328              		.loc 1 368 0
 329 000c 0023     		movs	r3, #0
 330 000e A360     		str	r3, [r4, #8]
 369:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 331              		.loc 1 369 0
 332 0010 0122     		movs	r2, #1
 333 0012 E260     		str	r2, [r4, #12]
 370:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 334              		.loc 1 370 0
 335 0014 2361     		str	r3, [r4, #16]
 371:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 336              		.loc 1 371 0
 337 0016 6361     		str	r3, [r4, #20]
 372:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 338              		.loc 1 372 0
 339 0018 A361     		str	r3, [r4, #24]
 373:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 340              		.loc 1 373 0
 341 001a E361     		str	r3, [r4, #28]
 374:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 342              		.loc 1 374 0
ARM GAS  /tmp/ccJSMaGx.s 			page 17


 343 001c 2362     		str	r3, [r4, #32]
 375:Src/main.c    **** 
 344              		.loc 1 375 0
 345 001e 2000     		movs	r0, r4
 346 0020 FFF7FEFF 		bl	HAL_I2C_Init
 347              	.LVL12:
 377:Src/main.c    **** 
 348              		.loc 1 377 0
 349 0024 0021     		movs	r1, #0
 350 0026 2000     		movs	r0, r4
 351 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 352              	.LVL13:
 379:Src/main.c    **** }
 353              		.loc 1 379 0
 354 002c 0021     		movs	r1, #0
 355 002e 2000     		movs	r0, r4
 356 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 357              	.LVL14:
 380:Src/main.c    **** 
 358              		.loc 1 380 0
 359              		@ sp needed
 360 0034 10BD     		pop	{r4, pc}
 361              	.L12:
 362 0036 C046     		.align	2
 363              	.L11:
 364 0038 00000000 		.word	hi2c1
 365 003c 00540040 		.word	1073763328
 366 0040 0E090020 		.word	536873230
 367              		.cfi_endproc
 368              	.LFE48:
 370              		.section	.text.MX_I2C2_Init,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.code	16
 374              		.thumb_func
 375              		.fpu softvfp
 377              	MX_I2C2_Init:
 378              	.LFB49:
 383:Src/main.c    **** 
 379              		.loc 1 383 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 10B5     		push	{r4, lr}
 384              	.LCFI7:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 385:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 388              		.loc 1 385 0
 389 0002 0D4C     		ldr	r4, .L14
 390 0004 0D4B     		ldr	r3, .L14+4
 391 0006 2360     		str	r3, [r4]
 386:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 392              		.loc 1 386 0
 393 0008 0D4B     		ldr	r3, .L14+8
 394 000a 6360     		str	r3, [r4, #4]
ARM GAS  /tmp/ccJSMaGx.s 			page 18


 387:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 395              		.loc 1 387 0
 396 000c 0023     		movs	r3, #0
 397 000e A360     		str	r3, [r4, #8]
 388:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 398              		.loc 1 388 0
 399 0010 0122     		movs	r2, #1
 400 0012 E260     		str	r2, [r4, #12]
 389:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 401              		.loc 1 389 0
 402 0014 2361     		str	r3, [r4, #16]
 390:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 403              		.loc 1 390 0
 404 0016 6361     		str	r3, [r4, #20]
 391:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 405              		.loc 1 391 0
 406 0018 A361     		str	r3, [r4, #24]
 392:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 407              		.loc 1 392 0
 408 001a E361     		str	r3, [r4, #28]
 393:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 409              		.loc 1 393 0
 410 001c 2362     		str	r3, [r4, #32]
 394:Src/main.c    **** 
 411              		.loc 1 394 0
 412 001e 2000     		movs	r0, r4
 413 0020 FFF7FEFF 		bl	HAL_I2C_Init
 414              	.LVL15:
 396:Src/main.c    **** 
 415              		.loc 1 396 0
 416 0024 0021     		movs	r1, #0
 417 0026 2000     		movs	r0, r4
 418 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 419              	.LVL16:
 398:Src/main.c    **** }
 420              		.loc 1 398 0
 421 002c 0021     		movs	r1, #0
 422 002e 2000     		movs	r0, r4
 423 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 424              	.LVL17:
 399:Src/main.c    **** 
 425              		.loc 1 399 0
 426              		@ sp needed
 427 0034 10BD     		pop	{r4, pc}
 428              	.L15:
 429 0036 C046     		.align	2
 430              	.L14:
 431 0038 00000000 		.word	hi2c2
 432 003c 00580040 		.word	1073764352
 433 0040 5D3E3020 		.word	540032605
 434              		.cfi_endproc
 435              	.LFE49:
 437              		.section	.text.MX_TIM1_Init,"ax",%progbits
 438              		.align	1
 439              		.syntax unified
 440              		.code	16
 441              		.thumb_func
ARM GAS  /tmp/ccJSMaGx.s 			page 19


 442              		.fpu softvfp
 444              	MX_TIM1_Init:
 445              	.LFB50:
 402:Src/main.c    **** 
 446              		.loc 1 402 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 88
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 70B5     		push	{r4, r5, r6, lr}
 451              	.LCFI8:
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 4, -16
 454              		.cfi_offset 5, -12
 455              		.cfi_offset 6, -8
 456              		.cfi_offset 14, -4
 457 0002 96B0     		sub	sp, sp, #88
 458              	.LCFI9:
 459              		.cfi_def_cfa_offset 104
 460              	.LBB13:
 404:Src/main.c    **** 
 461              		.loc 1 404 0
 462 0004 354B     		ldr	r3, .L17
 463 0006 9A69     		ldr	r2, [r3, #24]
 464 0008 8025     		movs	r5, #128
 465 000a 2D01     		lsls	r5, r5, #4
 466 000c 2A43     		orrs	r2, r5
 467 000e 9A61     		str	r2, [r3, #24]
 468 0010 9B69     		ldr	r3, [r3, #24]
 469 0012 2B40     		ands	r3, r5
 470 0014 0193     		str	r3, [sp, #4]
 471 0016 019B     		ldr	r3, [sp, #4]
 472              	.LBE13:
 406:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 473              		.loc 1 406 0
 474 0018 1022     		movs	r2, #16
 475 001a 0021     		movs	r1, #0
 476 001c 12A8     		add	r0, sp, #72
 477 001e FFF7FEFF 		bl	memset
 478              	.LVL18:
 407:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 479              		.loc 1 407 0
 480 0022 0822     		movs	r2, #8
 481 0024 0021     		movs	r1, #0
 482 0026 10A8     		add	r0, sp, #64
 483 0028 FFF7FEFF 		bl	memset
 484              	.LVL19:
 408:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 485              		.loc 1 408 0
 486 002c 1C22     		movs	r2, #28
 487 002e 0021     		movs	r1, #0
 488 0030 09A8     		add	r0, sp, #36
 489 0032 FFF7FEFF 		bl	memset
 490              	.LVL20:
 409:Src/main.c    **** 
 491              		.loc 1 409 0
 492 0036 1C22     		movs	r2, #28
 493 0038 0021     		movs	r1, #0
ARM GAS  /tmp/ccJSMaGx.s 			page 20


 494 003a 02A8     		add	r0, sp, #8
 495 003c FFF7FEFF 		bl	memset
 496              	.LVL21:
 411:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 497              		.loc 1 411 0
 498 0040 274C     		ldr	r4, .L17+4
 499 0042 284B     		ldr	r3, .L17+8
 500 0044 2360     		str	r3, [r4]
 412:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 501              		.loc 1 412 0
 502 0046 6560     		str	r5, [r4, #4]
 413:Src/main.c    ****   htim1.Init.Period = 4096;
 503              		.loc 1 413 0
 504 0048 0025     		movs	r5, #0
 505 004a A560     		str	r5, [r4, #8]
 414:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 506              		.loc 1 414 0
 507 004c 8026     		movs	r6, #128
 508 004e 7601     		lsls	r6, r6, #5
 509 0050 E660     		str	r6, [r4, #12]
 415:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 510              		.loc 1 415 0
 511 0052 8023     		movs	r3, #128
 512 0054 9B00     		lsls	r3, r3, #2
 513 0056 2361     		str	r3, [r4, #16]
 416:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 514              		.loc 1 416 0
 515 0058 6561     		str	r5, [r4, #20]
 417:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 516              		.loc 1 417 0
 517 005a 813B     		subs	r3, r3, #129
 518 005c FF3B     		subs	r3, r3, #255
 519 005e A361     		str	r3, [r4, #24]
 418:Src/main.c    **** 
 520              		.loc 1 418 0
 521 0060 2000     		movs	r0, r4
 522 0062 FFF7FEFF 		bl	HAL_TIM_Base_Init
 523              	.LVL22:
 420:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 524              		.loc 1 420 0
 525 0066 1296     		str	r6, [sp, #72]
 421:Src/main.c    **** 
 526              		.loc 1 421 0
 527 0068 12A9     		add	r1, sp, #72
 528 006a 2000     		movs	r0, r4
 529 006c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 530              	.LVL23:
 423:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 531              		.loc 1 423 0
 532 0070 2000     		movs	r0, r4
 533 0072 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 534              	.LVL24:
 424:Src/main.c    **** 
 535              		.loc 1 424 0
 536 0076 2000     		movs	r0, r4
 537 0078 FFF7FEFF 		bl	HAL_TIM_OC_Init
 538              	.LVL25:
ARM GAS  /tmp/ccJSMaGx.s 			page 21


 426:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 539              		.loc 1 426 0
 540 007c 1095     		str	r5, [sp, #64]
 427:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 541              		.loc 1 427 0
 542 007e 1195     		str	r5, [sp, #68]
 428:Src/main.c    **** 
 543              		.loc 1 428 0
 544 0080 10A9     		add	r1, sp, #64
 545 0082 2000     		movs	r0, r4
 546 0084 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 547              	.LVL26:
 430:Src/main.c    ****   sConfigOC.Pulse = 50;
 548              		.loc 1 430 0
 549 0088 6023     		movs	r3, #96
 550 008a 0993     		str	r3, [sp, #36]
 431:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 551              		.loc 1 431 0
 552 008c 2E3B     		subs	r3, r3, #46
 553 008e 0A93     		str	r3, [sp, #40]
 432:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 554              		.loc 1 432 0
 555 0090 0B95     		str	r5, [sp, #44]
 433:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 556              		.loc 1 433 0
 557 0092 0C95     		str	r5, [sp, #48]
 434:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 558              		.loc 1 434 0
 559 0094 0D95     		str	r5, [sp, #52]
 435:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 560              		.loc 1 435 0
 561 0096 0E95     		str	r5, [sp, #56]
 436:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 562              		.loc 1 436 0
 563 0098 0F95     		str	r5, [sp, #60]
 437:Src/main.c    **** 
 564              		.loc 1 437 0
 565 009a 0022     		movs	r2, #0
 566 009c 09A9     		add	r1, sp, #36
 567 009e 2000     		movs	r0, r4
 568 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 569              	.LVL27:
 439:Src/main.c    ****   sConfigOC.Pulse = 4090;
 570              		.loc 1 439 0
 571 00a4 7023     		movs	r3, #112
 572 00a6 0993     		str	r3, [sp, #36]
 440:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 573              		.loc 1 440 0
 574 00a8 0F4B     		ldr	r3, .L17+12
 575 00aa 0A93     		str	r3, [sp, #40]
 441:Src/main.c    **** 
 576              		.loc 1 441 0
 577 00ac 0C22     		movs	r2, #12
 578 00ae 09A9     		add	r1, sp, #36
 579 00b0 2000     		movs	r0, r4
 580 00b2 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 581              	.LVL28:
ARM GAS  /tmp/ccJSMaGx.s 			page 22


 443:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 582              		.loc 1 443 0
 583 00b6 0295     		str	r5, [sp, #8]
 444:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 584              		.loc 1 444 0
 585 00b8 0395     		str	r5, [sp, #12]
 445:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 586              		.loc 1 445 0
 587 00ba 0495     		str	r5, [sp, #16]
 446:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 588              		.loc 1 446 0
 589 00bc 0595     		str	r5, [sp, #20]
 447:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 590              		.loc 1 447 0
 591 00be 0695     		str	r5, [sp, #24]
 448:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 592              		.loc 1 448 0
 593 00c0 8023     		movs	r3, #128
 594 00c2 9B01     		lsls	r3, r3, #6
 595 00c4 0793     		str	r3, [sp, #28]
 449:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 596              		.loc 1 449 0
 597 00c6 0895     		str	r5, [sp, #32]
 450:Src/main.c    **** 
 598              		.loc 1 450 0
 599 00c8 02A9     		add	r1, sp, #8
 600 00ca 2000     		movs	r0, r4
 601 00cc FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 602              	.LVL29:
 452:Src/main.c    **** }
 603              		.loc 1 452 0
 604 00d0 2000     		movs	r0, r4
 605 00d2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 606              	.LVL30:
 453:Src/main.c    **** /*
 607              		.loc 1 453 0
 608 00d6 16B0     		add	sp, sp, #88
 609              		@ sp needed
 610 00d8 70BD     		pop	{r4, r5, r6, pc}
 611              	.L18:
 612 00da C046     		.align	2
 613              	.L17:
 614 00dc 00100240 		.word	1073876992
 615 00e0 00000000 		.word	htim1
 616 00e4 002C0140 		.word	1073818624
 617 00e8 FA0F0000 		.word	4090
 618              		.cfi_endproc
 619              	.LFE50:
 621              		.section	.text.MX_USB_PCD_Init,"ax",%progbits
 622              		.align	1
 623              		.syntax unified
 624              		.code	16
 625              		.thumb_func
 626              		.fpu softvfp
 628              	MX_USB_PCD_Init:
 629              	.LFB51:
 487:Src/main.c    **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 23


 630              		.loc 1 487 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634 0000 10B5     		push	{r4, lr}
 635              	.LCFI10:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 4, -8
 638              		.cfi_offset 14, -4
 489:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 639              		.loc 1 489 0
 640 0002 0748     		ldr	r0, .L20
 641 0004 074B     		ldr	r3, .L20+4
 642 0006 0360     		str	r3, [r0]
 490:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 643              		.loc 1 490 0
 644 0008 0823     		movs	r3, #8
 645 000a 4360     		str	r3, [r0, #4]
 491:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 646              		.loc 1 491 0
 647 000c 063B     		subs	r3, r3, #6
 648 000e 8360     		str	r3, [r0, #8]
 492:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 649              		.loc 1 492 0
 650 0010 0361     		str	r3, [r0, #16]
 493:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 651              		.loc 1 493 0
 652 0012 0023     		movs	r3, #0
 653 0014 8361     		str	r3, [r0, #24]
 494:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 654              		.loc 1 494 0
 655 0016 C361     		str	r3, [r0, #28]
 495:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 656              		.loc 1 495 0
 657 0018 0362     		str	r3, [r0, #32]
 496:Src/main.c    **** }
 658              		.loc 1 496 0
 659 001a FFF7FEFF 		bl	HAL_PCD_Init
 660              	.LVL31:
 497:Src/main.c    **** 
 661              		.loc 1 497 0
 662              		@ sp needed
 663 001e 10BD     		pop	{r4, pc}
 664              	.L21:
 665              		.align	2
 666              	.L20:
 667 0020 00000000 		.word	hpcd_USB_FS
 668 0024 005C0040 		.word	1073765376
 669              		.cfi_endproc
 670              	.LFE51:
 672              		.global	__aeabi_ui2f
 673              		.global	__aeabi_f2d
 674              		.global	__aeabi_ddiv
 675              		.global	__aeabi_dmul
 676              		.global	__aeabi_dsub
 677              		.global	__aeabi_d2f
 678              		.global	__aeabi_i2f
ARM GAS  /tmp/ccJSMaGx.s 			page 24


 679              		.global	__aeabi_fsub
 680              		.global	__aeabi_fmul
 681              		.global	__aeabi_fdiv
 682              		.global	__aeabi_fadd
 683              		.global	__aeabi_i2d
 684              		.global	__aeabi_fcmpge
 685              		.global	__aeabi_fcmple
 686              		.global	__aeabi_fcmpgt
 687              		.global	__aeabi_fcmplt
 688              		.global	__aeabi_f2iz
 689              		.section	.text.reg,"ax",%progbits
 690              		.align	1
 691              		.global	reg
 692              		.syntax unified
 693              		.code	16
 694              		.thumb_func
 695              		.fpu softvfp
 697              	reg:
 698              	.LFB38:
 169:Src/main.c    **** 
 699              		.loc 1 169 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 704              	.LCFI11:
 705              		.cfi_def_cfa_offset 20
 706              		.cfi_offset 4, -20
 707              		.cfi_offset 5, -16
 708              		.cfi_offset 6, -12
 709              		.cfi_offset 7, -8
 710              		.cfi_offset 14, -4
 711 0002 C646     		mov	lr, r8
 712 0004 00B5     		push	{lr}
 713              	.LCFI12:
 714              		.cfi_def_cfa_offset 24
 715              		.cfi_offset 8, -24
 716 0006 82B0     		sub	sp, sp, #8
 717              	.LCFI13:
 718              		.cfi_def_cfa_offset 32
 171:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 719              		.loc 1 171 0
 720 0008 724D     		ldr	r5, .L41
 721 000a E888     		ldrh	r0, [r5, #6]
 722 000c FFF7FEFF 		bl	__aeabi_ui2f
 723              	.LVL32:
 724 0010 FFF7FEFF 		bl	__aeabi_f2d
 725              	.LVL33:
 726 0014 0022     		movs	r2, #0
 727 0016 704B     		ldr	r3, .L41+4
 728 0018 FFF7FEFF 		bl	__aeabi_ddiv
 729              	.LVL34:
 730 001c 6F4A     		ldr	r2, .L41+8
 731 001e 704B     		ldr	r3, .L41+12
 732 0020 FFF7FEFF 		bl	__aeabi_dmul
 733              	.LVL35:
 734 0024 0022     		movs	r2, #0
ARM GAS  /tmp/ccJSMaGx.s 			page 25


 735 0026 6F4B     		ldr	r3, .L41+16
 736 0028 FFF7FEFF 		bl	__aeabi_dsub
 737              	.LVL36:
 738 002c 6E4A     		ldr	r2, .L41+20
 739 002e 6F4B     		ldr	r3, .L41+24
 740 0030 FFF7FEFF 		bl	__aeabi_ddiv
 741              	.LVL37:
 742 0034 FFF7FEFF 		bl	__aeabi_d2f
 743              	.LVL38:
 744 0038 061C     		adds	r6, r0, #0
 745 003a 6D4C     		ldr	r4, .L41+28
 746 003c 2061     		str	r0, [r4, #16]
 172:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 747              		.loc 1 172 0
 748 003e 6888     		ldrh	r0, [r5, #2]
 749 0040 6C4F     		ldr	r7, .L41+32
 750 0042 3B68     		ldr	r3, [r7]
 751 0044 9846     		mov	r8, r3
 752 0046 FFF7FEFF 		bl	__aeabi_i2f
 753              	.LVL39:
 754 004a 4146     		mov	r1, r8
 755 004c FFF7FEFF 		bl	__aeabi_fsub
 756              	.LVL40:
 757 0050 7968     		ldr	r1, [r7, #4]
 758 0052 FFF7FEFF 		bl	__aeabi_fmul
 759              	.LVL41:
 760 0056 6849     		ldr	r1, .L41+36
 761 0058 FFF7FEFF 		bl	__aeabi_fdiv
 762              	.LVL42:
 763 005c 011C     		adds	r1, r0, #0
 764 005e 301C     		adds	r0, r6, #0
 765 0060 FFF7FEFF 		bl	__aeabi_fadd
 766              	.LVL43:
 767 0064 061C     		adds	r6, r0, #0
 768 0066 2060     		str	r0, [r4]
 173:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 769              		.loc 1 173 0
 770 0068 A888     		ldrh	r0, [r5, #4]
 771 006a FFF7FEFF 		bl	__aeabi_i2d
 772              	.LVL44:
 773 006e 0022     		movs	r2, #0
 774 0070 594B     		ldr	r3, .L41+4
 775 0072 FFF7FEFF 		bl	__aeabi_ddiv
 776              	.LVL45:
 777 0076 594A     		ldr	r2, .L41+8
 778 0078 594B     		ldr	r3, .L41+12
 779 007a FFF7FEFF 		bl	__aeabi_dmul
 780              	.LVL46:
 781 007e 574A     		ldr	r2, .L41+8
 782 0080 5E4B     		ldr	r3, .L41+40
 783 0082 FFF7FEFF 		bl	__aeabi_dmul
 784              	.LVL47:
 785 0086 FFF7FEFF 		bl	__aeabi_d2f
 786              	.LVL48:
 787 008a A060     		str	r0, [r4, #8]
 174:Src/main.c    **** 
 788              		.loc 1 174 0
ARM GAS  /tmp/ccJSMaGx.s 			page 26


 789 008c 2888     		ldrh	r0, [r5]
 790 008e FFF7FEFF 		bl	__aeabi_i2d
 791              	.LVL49:
 792 0092 0022     		movs	r2, #0
 793 0094 504B     		ldr	r3, .L41+4
 794 0096 FFF7FEFF 		bl	__aeabi_ddiv
 795              	.LVL50:
 796 009a 504A     		ldr	r2, .L41+8
 797 009c 504B     		ldr	r3, .L41+12
 798 009e FFF7FEFF 		bl	__aeabi_dmul
 799              	.LVL51:
 800 00a2 FFF7FEFF 		bl	__aeabi_d2f
 801              	.LVL52:
 802 00a6 E060     		str	r0, [r4, #12]
 176:Src/main.c    **** 
 803              		.loc 1 176 0
 804 00a8 5549     		ldr	r1, .L41+44
 805 00aa 6068     		ldr	r0, [r4, #4]
 806 00ac FFF7FEFF 		bl	__aeabi_fmul
 807              	.LVL53:
 808 00b0 051C     		adds	r5, r0, #0
 809 00b2 5449     		ldr	r1, .L41+48
 810 00b4 301C     		adds	r0, r6, #0
 811 00b6 FFF7FEFF 		bl	__aeabi_fmul
 812              	.LVL54:
 813 00ba 011C     		adds	r1, r0, #0
 814 00bc 281C     		adds	r0, r5, #0
 815 00be FFF7FEFF 		bl	__aeabi_fadd
 816              	.LVL55:
 817 00c2 051C     		adds	r5, r0, #0
 818 00c4 6060     		str	r0, [r4, #4]
 178:Src/main.c    ****     r.error = r.target - s.ttipavg;
 819              		.loc 1 178 0
 820 00c6 504B     		ldr	r3, .L41+52
 821 00c8 1C68     		ldr	r4, [r3]
 822 00ca DE6A     		ldr	r6, [r3, #44]
 823 00cc 311C     		adds	r1, r6, #0
 824 00ce 201C     		adds	r0, r4, #0
 825 00d0 FFF7FEFF 		bl	__aeabi_fsub
 826              	.LVL56:
 827 00d4 011C     		adds	r1, r0, #0
 828 00d6 281C     		adds	r0, r5, #0
 829 00d8 FFF7FEFF 		bl	__aeabi_fcmpge
 830              	.LVL57:
 831 00dc 0028     		cmp	r0, #0
 832 00de 50D0     		beq	.L23
 178:Src/main.c    ****     r.error = r.target - s.ttipavg;
 833              		.loc 1 178 0 is_stmt 0 discriminator 1
 834 00e0 311C     		adds	r1, r6, #0
 835 00e2 201C     		adds	r0, r4, #0
 836 00e4 FFF7FEFF 		bl	__aeabi_fadd
 837              	.LVL58:
 838 00e8 011C     		adds	r1, r0, #0
 839 00ea 281C     		adds	r0, r5, #0
 840 00ec FFF7FEFF 		bl	__aeabi_fcmple
 841              	.LVL59:
 842 00f0 0028     		cmp	r0, #0
ARM GAS  /tmp/ccJSMaGx.s 			page 27


 843 00f2 46D0     		beq	.L23
 179:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 844              		.loc 1 179 0 is_stmt 1
 845 00f4 291C     		adds	r1, r5, #0
 846 00f6 201C     		adds	r0, r4, #0
 847 00f8 FFF7FEFF 		bl	__aeabi_fsub
 848              	.LVL60:
 849 00fc 051C     		adds	r5, r0, #0
 850 00fe 424F     		ldr	r7, .L41+52
 851 0100 7860     		str	r0, [r7, #4]
 180:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 852              		.loc 1 180 0
 853 0102 FC68     		ldr	r4, [r7, #12]
 854 0104 FE69     		ldr	r6, [r7, #28]
 855 0106 311C     		adds	r1, r6, #0
 856 0108 FFF7FEFF 		bl	__aeabi_fmul
 857              	.LVL61:
 858 010c 011C     		adds	r1, r0, #0
 859 010e 201C     		adds	r0, r4, #0
 860 0110 FFF7FEFF 		bl	__aeabi_fadd
 861              	.LVL62:
 862 0114 041C     		adds	r4, r0, #0
 181:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 863              		.loc 1 181 0
 864 0116 3F69     		ldr	r7, [r7, #16]
 865 0118 391C     		adds	r1, r7, #0
 866 011a FFF7FEFF 		bl	__aeabi_fcmpgt
 867              	.LVL63:
 868 011e 0028     		cmp	r0, #0
 869 0120 09D1     		bne	.L26
 181:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 870              		.loc 1 181 0 is_stmt 0 discriminator 2
 871 0122 8023     		movs	r3, #128
 872 0124 1B06     		lsls	r3, r3, #24
 873 0126 F918     		adds	r1, r7, r3
 874 0128 0F1C     		adds	r7, r1, #0
 875 012a 201C     		adds	r0, r4, #0
 876 012c FFF7FEFF 		bl	__aeabi_fcmplt
 877              	.LVL64:
 878 0130 0028     		cmp	r0, #0
 879 0132 00D1     		bne	.L26
 880 0134 271C     		adds	r7, r4, #0
 881              	.L26:
 181:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 882              		.loc 1 181 0 discriminator 8
 883 0136 344C     		ldr	r4, .L41+52
 884 0138 E760     		str	r7, [r4, #12]
 182:Src/main.c    ****     r.duty = r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror;
 885              		.loc 1 182 0 is_stmt 1 discriminator 8
 886 013a A168     		ldr	r1, [r4, #8]
 887 013c 281C     		adds	r0, r5, #0
 888 013e FFF7FEFF 		bl	__aeabi_fsub
 889              	.LVL65:
 890 0142 311C     		adds	r1, r6, #0
 891 0144 FFF7FEFF 		bl	__aeabi_fdiv
 892              	.LVL66:
 893 0148 061C     		adds	r6, r0, #0
ARM GAS  /tmp/ccJSMaGx.s 			page 28


 894 014a 6061     		str	r0, [r4, #20]
 183:Src/main.c    ****     r.errorprior = r.error;
 895              		.loc 1 183 0 discriminator 8
 896 014c 216A     		ldr	r1, [r4, #32]
 897 014e 281C     		adds	r0, r5, #0
 898 0150 FFF7FEFF 		bl	__aeabi_fmul
 899              	.LVL67:
 900 0154 0190     		str	r0, [sp, #4]
 901 0156 391C     		adds	r1, r7, #0
 902 0158 606A     		ldr	r0, [r4, #36]
 903 015a FFF7FEFF 		bl	__aeabi_fmul
 904              	.LVL68:
 905 015e 011C     		adds	r1, r0, #0
 906 0160 0198     		ldr	r0, [sp, #4]
 907 0162 FFF7FEFF 		bl	__aeabi_fadd
 908              	.LVL69:
 909 0166 071C     		adds	r7, r0, #0
 910 0168 A16A     		ldr	r1, [r4, #40]
 911 016a 301C     		adds	r0, r6, #0
 912 016c FFF7FEFF 		bl	__aeabi_fmul
 913              	.LVL70:
 914 0170 011C     		adds	r1, r0, #0
 915 0172 381C     		adds	r0, r7, #0
 916 0174 FFF7FEFF 		bl	__aeabi_fadd
 917              	.LVL71:
 918 0178 FFF7FEFF 		bl	__aeabi_f2iz
 919              	.LVL72:
 920 017c 2083     		strh	r0, [r4, #24]
 184:Src/main.c    ****   } else {
 921              		.loc 1 184 0 discriminator 8
 922 017e A560     		str	r5, [r4, #8]
 923 0180 0CE0     		b	.L28
 924              	.L23:
 186:Src/main.c    ****       r.duty = MAX_DUTY;
 925              		.loc 1 186 0
 926 0182 211C     		adds	r1, r4, #0
 927 0184 281C     		adds	r0, r5, #0
 928 0186 FFF7FEFF 		bl	__aeabi_fcmple
 929              	.LVL73:
 930 018a 0028     		cmp	r0, #0
 931 018c 19D0     		beq	.L39
 187:Src/main.c    ****     } else {
 932              		.loc 1 187 0
 933 018e 1E4B     		ldr	r3, .L41+52
 934 0190 1E4A     		ldr	r2, .L41+56
 935 0192 1A83     		strh	r2, [r3, #24]
 936              	.L31:
 191:Src/main.c    ****   }
 937              		.loc 1 191 0
 938 0194 1C4B     		ldr	r3, .L41+52
 939 0196 8122     		movs	r2, #129
 940 0198 D205     		lsls	r2, r2, #23
 941 019a 5A60     		str	r2, [r3, #4]
 942              	.L28:
 194:Src/main.c    **** 
 943              		.loc 1 194 0
 944 019c 1A4B     		ldr	r3, .L41+52
ARM GAS  /tmp/ccJSMaGx.s 			page 29


 945 019e 1822     		movs	r2, #24
 946 01a0 9A5E     		ldrsh	r2, [r3, r2]
 947 01a2 1A4B     		ldr	r3, .L41+56
 948 01a4 9A42     		cmp	r2, r3
 949 01a6 12DC     		bgt	.L35
 194:Src/main.c    **** 
 950              		.loc 1 194 0 is_stmt 0 discriminator 1
 951 01a8 131C     		adds	r3, r2, #0
 952 01aa 002A     		cmp	r2, #0
 953 01ac 0DDB     		blt	.L40
 954              	.L33:
 955 01ae 1BB2     		sxth	r3, r3
 956              	.L32:
 194:Src/main.c    **** 
 957              		.loc 1 194 0 discriminator 4
 958 01b0 154A     		ldr	r2, .L41+52
 959 01b2 1383     		strh	r3, [r2, #24]
 196:Src/main.c    **** }
 960              		.loc 1 196 0 is_stmt 1 discriminator 4
 961 01b4 164A     		ldr	r2, .L41+60
 962 01b6 1268     		ldr	r2, [r2]
 963 01b8 5363     		str	r3, [r2, #52]
 197:Src/main.c    **** 
 964              		.loc 1 197 0 discriminator 4
 965 01ba 02B0     		add	sp, sp, #8
 966              		@ sp needed
 967 01bc 04BC     		pop	{r2}
 968 01be 9046     		mov	r8, r2
 969 01c0 F0BD     		pop	{r4, r5, r6, r7, pc}
 970              	.L39:
 189:Src/main.c    ****     }
 971              		.loc 1 189 0
 972 01c2 114B     		ldr	r3, .L41+52
 973 01c4 0022     		movs	r2, #0
 974 01c6 1A83     		strh	r2, [r3, #24]
 975 01c8 E4E7     		b	.L31
 976              	.L40:
 194:Src/main.c    **** 
 977              		.loc 1 194 0 discriminator 1
 978 01ca 0023     		movs	r3, #0
 979 01cc EFE7     		b	.L33
 980              	.L35:
 194:Src/main.c    **** 
 981              		.loc 1 194 0 is_stmt 0
 982 01ce 0F4B     		ldr	r3, .L41+56
 983 01d0 EEE7     		b	.L32
 984              	.L42:
 985 01d2 C046     		.align	2
 986              	.L41:
 987 01d4 00000000 		.word	.LANCHOR0
 988 01d8 00FEAF40 		.word	1085275648
 989 01dc 66666666 		.word	1717986918
 990 01e0 66660A40 		.word	1074423398
 991 01e4 0000E03F 		.word	1071644672
 992 01e8 7B14AE47 		.word	1202590843
 993 01ec E17A843F 		.word	1065646817
 994 01f0 00000000 		.word	s
ARM GAS  /tmp/ccJSMaGx.s 			page 30


 995 01f4 00000000 		.word	.LANCHOR1
 996 01f8 00007A44 		.word	1148846080
 997 01fc 66661A40 		.word	1075471974
 998 0200 CDCC4C3F 		.word	1061997773
 999 0204 CCCC4C3E 		.word	1045220556
 1000 0208 00000000 		.word	.LANCHOR2
 1001 020c D20F0000 		.word	4050
 1002 0210 00000000 		.word	htim1
 1003              		.cfi_endproc
 1004              	.LFE38:
 1006              		.section	.text.disp_init,"ax",%progbits
 1007              		.align	1
 1008              		.global	disp_init
 1009              		.syntax unified
 1010              		.code	16
 1011              		.thumb_func
 1012              		.fpu softvfp
 1014              	disp_init:
 1015              	.LFB39:
 233:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1016              		.loc 1 233 0 is_stmt 1
 1017              		.cfi_startproc
 1018              		@ args = 0, pretend = 0, frame = 0
 1019              		@ frame_needed = 0, uses_anonymous_args = 0
 1020 0000 10B5     		push	{r4, lr}
 1021              	.LCFI14:
 1022              		.cfi_def_cfa_offset 8
 1023              		.cfi_offset 4, -8
 1024              		.cfi_offset 14, -4
 1025 0002 82B0     		sub	sp, sp, #8
 1026              	.LCFI15:
 1027              		.cfi_def_cfa_offset 16
 234:Src/main.c    ****   uint16_t _cnt = 0;
 1028              		.loc 1 234 0
 1029 0004 1122     		movs	r2, #17
 1030 0006 0E49     		ldr	r1, .L47
 1031 0008 0E48     		ldr	r0, .L47+4
 1032 000a FFF7FEFF 		bl	memcpy
 1033              	.LVL74:
 235:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1034              		.loc 1 235 0
 1035 000e 0024     		movs	r4, #0
 1036              	.LVL75:
 1037              	.L44:
 236:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1038              		.loc 1 236 0 discriminator 1
 1039 0010 0D48     		ldr	r0, .L47+8
 1040 0012 FFF7FEFF 		bl	HAL_I2C_GetState
 1041              	.LVL76:
 1042 0016 2028     		cmp	r0, #32
 1043 0018 06D0     		beq	.L45
 236:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1044              		.loc 1 236 0 is_stmt 0 discriminator 2
 1045 001a 631C     		adds	r3, r4, #1
 1046 001c 9BB2     		uxth	r3, r3
 1047              	.LVL77:
 1048 001e 0B4A     		ldr	r2, .L47+12
ARM GAS  /tmp/ccJSMaGx.s 			page 31


 1049 0020 9442     		cmp	r4, r2
 1050 0022 01D8     		bhi	.L45
 236:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1051              		.loc 1 236 0
 1052 0024 1C00     		movs	r4, r3
 1053 0026 F3E7     		b	.L44
 1054              	.LVL78:
 1055              	.L45:
 237:Src/main.c    **** }
 1056              		.loc 1 237 0 is_stmt 1
 1057 0028 FA23     		movs	r3, #250
 1058 002a 9B00     		lsls	r3, r3, #2
 1059 002c 0093     		str	r3, [sp]
 1060 002e 3223     		movs	r3, #50
 1061 0030 074A     		ldr	r2, .L47+16
 1062 0032 7821     		movs	r1, #120
 1063 0034 0448     		ldr	r0, .L47+8
 1064 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1065              	.LVL79:
 238:Src/main.c    **** 
 1066              		.loc 1 238 0
 1067 003a 02B0     		add	sp, sp, #8
 1068              		@ sp needed
 1069 003c 10BD     		pop	{r4, pc}
 1070              	.L48:
 1071 003e C046     		.align	2
 1072              	.L47:
 1073 0040 00000000 		.word	.LANCHOR3
 1074 0044 00000000 		.word	screenBuffer
 1075 0048 00000000 		.word	hi2c1
 1076 004c 10270000 		.word	10000
 1077 0050 00000000 		.word	.LANCHOR4
 1078              		.cfi_endproc
 1079              	.LFE39:
 1081              		.section	.text.refresh,"ax",%progbits
 1082              		.align	1
 1083              		.global	refresh
 1084              		.syntax unified
 1085              		.code	16
 1086              		.thumb_func
 1087              		.fpu softvfp
 1089              	refresh:
 1090              	.LFB40:
 240:Src/main.c    ****   uint16_t _cnt = 0;
 1091              		.loc 1 240 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095 0000 10B5     		push	{r4, lr}
 1096              	.LCFI16:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 4, -8
 1099              		.cfi_offset 14, -4
 1100 0002 82B0     		sub	sp, sp, #8
 1101              	.LCFI17:
 1102              		.cfi_def_cfa_offset 16
 1103              	.LVL80:
ARM GAS  /tmp/ccJSMaGx.s 			page 32


 241:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1104              		.loc 1 241 0
 1105 0004 0024     		movs	r4, #0
 1106              	.LVL81:
 1107              	.L50:
 242:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1108              		.loc 1 242 0 discriminator 1
 1109 0006 0B48     		ldr	r0, .L53
 1110 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1111              	.LVL82:
 1112 000c 2028     		cmp	r0, #32
 1113 000e 06D0     		beq	.L51
 242:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1114              		.loc 1 242 0 is_stmt 0 discriminator 2
 1115 0010 631C     		adds	r3, r4, #1
 1116 0012 9BB2     		uxth	r3, r3
 1117              	.LVL83:
 1118 0014 084A     		ldr	r2, .L53+4
 1119 0016 9442     		cmp	r4, r2
 1120 0018 01D8     		bhi	.L51
 242:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1121              		.loc 1 242 0
 1122 001a 1C00     		movs	r4, r3
 1123 001c F3E7     		b	.L50
 1124              	.LVL84:
 1125              	.L51:
 243:Src/main.c    **** }
 1126              		.loc 1 243 0 is_stmt 1
 1127 001e FA23     		movs	r3, #250
 1128 0020 9B00     		lsls	r3, r3, #2
 1129 0022 0093     		str	r3, [sp]
 1130 0024 D123     		movs	r3, #209
 1131 0026 054A     		ldr	r2, .L53+8
 1132 0028 7821     		movs	r1, #120
 1133 002a 0248     		ldr	r0, .L53
 1134 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1135              	.LVL85:
 244:Src/main.c    **** 
 1136              		.loc 1 244 0
 1137 0030 02B0     		add	sp, sp, #8
 1138              		@ sp needed
 1139 0032 10BD     		pop	{r4, pc}
 1140              	.L54:
 1141              		.align	2
 1142              	.L53:
 1143 0034 00000000 		.word	hi2c1
 1144 0038 10270000 		.word	10000
 1145 003c 00000000 		.word	screenBuffer
 1146              		.cfi_endproc
 1147              	.LFE40:
 1149              		.section	.text.clear_screen,"ax",%progbits
 1150              		.align	1
 1151              		.global	clear_screen
 1152              		.syntax unified
 1153              		.code	16
 1154              		.thumb_func
 1155              		.fpu softvfp
ARM GAS  /tmp/ccJSMaGx.s 			page 33


 1157              	clear_screen:
 1158              	.LFB41:
 246:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1159              		.loc 1 246 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163 0000 10B5     		push	{r4, lr}
 1164              	.LCFI18:
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 4, -8
 1167              		.cfi_offset 14, -4
 247:Src/main.c    **** }
 1168              		.loc 1 247 0
 1169 0002 C022     		movs	r2, #192
 1170 0004 0021     		movs	r1, #0
 1171 0006 0248     		ldr	r0, .L56
 1172 0008 FFF7FEFF 		bl	memset
 1173              	.LVL86:
 248:Src/main.c    **** void set_screen(void) {
 1174              		.loc 1 248 0
 1175              		@ sp needed
 1176 000c 10BD     		pop	{r4, pc}
 1177              	.L57:
 1178 000e C046     		.align	2
 1179              	.L56:
 1180 0010 11000000 		.word	screenBuffer+17
 1181              		.cfi_endproc
 1182              	.LFE41:
 1184              		.section	.text.set_screen,"ax",%progbits
 1185              		.align	1
 1186              		.global	set_screen
 1187              		.syntax unified
 1188              		.code	16
 1189              		.thumb_func
 1190              		.fpu softvfp
 1192              	set_screen:
 1193              	.LFB42:
 249:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1194              		.loc 1 249 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 0
 1197              		@ frame_needed = 0, uses_anonymous_args = 0
 1198 0000 10B5     		push	{r4, lr}
 1199              	.LCFI19:
 1200              		.cfi_def_cfa_offset 8
 1201              		.cfi_offset 4, -8
 1202              		.cfi_offset 14, -4
 250:Src/main.c    **** }
 1203              		.loc 1 250 0
 1204 0002 C022     		movs	r2, #192
 1205 0004 FF21     		movs	r1, #255
 1206 0006 0248     		ldr	r0, .L59
 1207 0008 FFF7FEFF 		bl	memset
 1208              	.LVL87:
 251:Src/main.c    **** 
 1209              		.loc 1 251 0
ARM GAS  /tmp/ccJSMaGx.s 			page 34


 1210              		@ sp needed
 1211 000c 10BD     		pop	{r4, pc}
 1212              	.L60:
 1213 000e C046     		.align	2
 1214              	.L59:
 1215 0010 11000000 		.word	screenBuffer+17
 1216              		.cfi_endproc
 1217              	.LFE42:
 1219              		.section	.text.write_pixel,"ax",%progbits
 1220              		.align	1
 1221              		.global	write_pixel
 1222              		.syntax unified
 1223              		.code	16
 1224              		.thumb_func
 1225              		.fpu softvfp
 1227              	write_pixel:
 1228              	.LFB43:
 253:Src/main.c    ****   if(color == 1){
 1229              		.loc 1 253 0
 1230              		.cfi_startproc
 1231              		@ args = 0, pretend = 0, frame = 0
 1232              		@ frame_needed = 0, uses_anonymous_args = 0
 1233              	.LVL88:
 1234 0000 30B5     		push	{r4, r5, lr}
 1235              	.LCFI20:
 1236              		.cfi_def_cfa_offset 12
 1237              		.cfi_offset 4, -12
 1238              		.cfi_offset 5, -8
 1239              		.cfi_offset 14, -4
 254:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1240              		.loc 1 254 0
 1241 0002 012A     		cmp	r2, #1
 1242 0004 18D0     		beq	.L64
 256:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1243              		.loc 1 256 0
 1244 0006 002A     		cmp	r2, #0
 1245 0008 15D1     		bne	.L61
 257:Src/main.c    ****   }
 1246              		.loc 1 257 0
 1247 000a CC17     		asrs	r4, r1, #31
 1248 000c 0723     		movs	r3, #7
 1249 000e 1A00     		movs	r2, r3
 1250              	.LVL89:
 1251 0010 2240     		ands	r2, r4
 1252 0012 5218     		adds	r2, r2, r1
 1253 0014 D210     		asrs	r2, r2, #3
 1254 0016 5500     		lsls	r5, r2, #1
 1255 0018 AA18     		adds	r2, r5, r2
 1256 001a 5501     		lsls	r5, r2, #5
 1257 001c 2818     		adds	r0, r5, r0
 1258              	.LVL90:
 1259 001e 1130     		adds	r0, r0, #17
 1260 0020 640F     		lsrs	r4, r4, #29
 1261 0022 0919     		adds	r1, r1, r4
 1262              	.LVL91:
 1263 0024 1940     		ands	r1, r3
 1264 0026 091B     		subs	r1, r1, r4
ARM GAS  /tmp/ccJSMaGx.s 			page 35


 1265 0028 09B2     		sxth	r1, r1
 1266 002a 0122     		movs	r2, #1
 1267 002c 8A40     		lsls	r2, r2, r1
 1268 002e 0E49     		ldr	r1, .L65
 1269 0030 0B5C     		ldrb	r3, [r1, r0]
 1270 0032 9343     		bics	r3, r2
 1271 0034 0B54     		strb	r3, [r1, r0]
 1272              	.L61:
 259:Src/main.c    **** 
 1273              		.loc 1 259 0
 1274              		@ sp needed
 1275 0036 30BD     		pop	{r4, r5, pc}
 1276              	.LVL92:
 1277              	.L64:
 255:Src/main.c    ****   } else if (color == 0){
 1278              		.loc 1 255 0
 1279 0038 CC17     		asrs	r4, r1, #31
 1280 003a 0723     		movs	r3, #7
 1281 003c 1A00     		movs	r2, r3
 1282              	.LVL93:
 1283 003e 2240     		ands	r2, r4
 1284 0040 5218     		adds	r2, r2, r1
 1285 0042 D210     		asrs	r2, r2, #3
 1286 0044 5500     		lsls	r5, r2, #1
 1287 0046 AA18     		adds	r2, r5, r2
 1288 0048 5501     		lsls	r5, r2, #5
 1289 004a 2818     		adds	r0, r5, r0
 1290              	.LVL94:
 1291 004c 1130     		adds	r0, r0, #17
 1292 004e 640F     		lsrs	r4, r4, #29
 1293 0050 0919     		adds	r1, r1, r4
 1294              	.LVL95:
 1295 0052 0B40     		ands	r3, r1
 1296 0054 1B1B     		subs	r3, r3, r4
 1297 0056 1BB2     		sxth	r3, r3
 1298 0058 0122     		movs	r2, #1
 1299 005a 9A40     		lsls	r2, r2, r3
 1300 005c 0249     		ldr	r1, .L65
 1301 005e 0B5C     		ldrb	r3, [r1, r0]
 1302 0060 1343     		orrs	r3, r2
 1303 0062 0B54     		strb	r3, [r1, r0]
 1304 0064 E7E7     		b	.L61
 1305              	.L66:
 1306 0066 C046     		.align	2
 1307              	.L65:
 1308 0068 00000000 		.word	screenBuffer
 1309              		.cfi_endproc
 1310              	.LFE43:
 1312              		.section	.text.draw_char,"ax",%progbits
 1313              		.align	1
 1314              		.global	draw_char
 1315              		.syntax unified
 1316              		.code	16
 1317              		.thumb_func
 1318              		.fpu softvfp
 1320              	draw_char:
 1321              	.LFB44:
ARM GAS  /tmp/ccJSMaGx.s 			page 36


 263:Src/main.c    ****     c = c & 0x7F;
 1322              		.loc 1 263 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              	.LVL96:
 1327 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1328              	.LCFI21:
 1329              		.cfi_def_cfa_offset 20
 1330              		.cfi_offset 4, -20
 1331              		.cfi_offset 5, -16
 1332              		.cfi_offset 6, -12
 1333              		.cfi_offset 7, -8
 1334              		.cfi_offset 14, -4
 1335 0002 C646     		mov	lr, r8
 1336 0004 00B5     		push	{lr}
 1337              	.LCFI22:
 1338              		.cfi_def_cfa_offset 24
 1339              		.cfi_offset 8, -24
 1340 0006 0F00     		movs	r7, r1
 1341 0008 9046     		mov	r8, r2
 264:Src/main.c    ****     if (c < ' ') {
 1342              		.loc 1 264 0
 1343 000a 7F23     		movs	r3, #127
 1344              	.LVL97:
 1345 000c 0340     		ands	r3, r0
 1346              	.LVL98:
 265:Src/main.c    ****         c = 0;
 1347              		.loc 1 265 0
 1348 000e 1F2B     		cmp	r3, #31
 1349 0010 08D9     		bls	.L74
 268:Src/main.c    ****     }
 1350              		.loc 1 268 0
 1351 0012 203B     		subs	r3, r3, #32
 1352              	.LVL99:
 1353 0014 DBB2     		uxtb	r3, r3
 1354              	.LVL100:
 1355              	.L68:
 270:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 1356              		.loc 1 270 0
 1357 0016 5A00     		lsls	r2, r3, #1
 1358              	.LVL101:
 1359 0018 D318     		adds	r3, r2, r3
 1360              	.LVL102:
 1361 001a 5E00     		lsls	r6, r3, #1
 1362 001c 114B     		ldr	r3, .L78
 1363 001e F618     		adds	r6, r6, r3
 1364              	.LVL103:
 1365              	.LBB14:
 271:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1366              		.loc 1 271 0
 1367 0020 0025     		movs	r5, #0
 1368 0022 18E0     		b	.L69
 1369              	.LVL104:
 1370              	.L74:
 1371              	.LBE14:
 266:Src/main.c    ****     } else {
ARM GAS  /tmp/ccJSMaGx.s 			page 37


 1372              		.loc 1 266 0
 1373 0024 0023     		movs	r3, #0
 1374              	.LVL105:
 1375 0026 F6E7     		b	.L68
 1376              	.LVL106:
 1377              	.L70:
 1378              	.LBB17:
 1379              	.LBB15:
 276:Src/main.c    ****             }
 1380              		.loc 1 276 0
 1381 0028 4346     		mov	r3, r8
 1382 002a 1919     		adds	r1, r3, r4
 1383 002c 7819     		adds	r0, r7, r5
 1384 002e 0022     		movs	r2, #0
 1385 0030 FFF7FEFF 		bl	write_pixel
 1386              	.LVL107:
 1387              	.L71:
 272:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1388              		.loc 1 272 0 discriminator 2
 1389 0034 0134     		adds	r4, r4, #1
 1390              	.LVL108:
 1391 0036 E4B2     		uxtb	r4, r4
 1392              	.LVL109:
 1393              	.L73:
 272:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1394              		.loc 1 272 0 is_stmt 0 discriminator 1
 1395 0038 072C     		cmp	r4, #7
 1396 003a 0AD8     		bhi	.L76
 273:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 1397              		.loc 1 273 0 is_stmt 1
 1398 003c 735D     		ldrb	r3, [r6, r5]
 1399 003e 2341     		asrs	r3, r3, r4
 1400 0040 DB07     		lsls	r3, r3, #31
 1401 0042 F1D5     		bpl	.L70
 274:Src/main.c    ****             } else {
 1402              		.loc 1 274 0
 1403 0044 4346     		mov	r3, r8
 1404 0046 1919     		adds	r1, r3, r4
 1405 0048 7819     		adds	r0, r7, r5
 1406 004a 0122     		movs	r2, #1
 1407 004c FFF7FEFF 		bl	write_pixel
 1408              	.LVL110:
 1409 0050 F0E7     		b	.L71
 1410              	.L76:
 1411              	.LBE15:
 271:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1412              		.loc 1 271 0 discriminator 2
 1413 0052 0135     		adds	r5, r5, #1
 1414              	.LVL111:
 1415 0054 EDB2     		uxtb	r5, r5
 1416              	.LVL112:
 1417              	.L69:
 271:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1418              		.loc 1 271 0 is_stmt 0 discriminator 1
 1419 0056 052D     		cmp	r5, #5
 1420 0058 01D8     		bhi	.L77
 1421              	.LBB16:
ARM GAS  /tmp/ccJSMaGx.s 			page 38


 272:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1422              		.loc 1 272 0 is_stmt 1
 1423 005a 0024     		movs	r4, #0
 1424 005c ECE7     		b	.L73
 1425              	.L77:
 1426              	.LBE16:
 1427              	.LBE17:
 280:Src/main.c    **** 
 1428              		.loc 1 280 0
 1429              		@ sp needed
 1430              	.LVL113:
 1431              	.LVL114:
 1432 005e 04BC     		pop	{r2}
 1433 0060 9046     		mov	r8, r2
 1434 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1435              	.L79:
 1436              		.align	2
 1437              	.L78:
 1438 0064 00000000 		.word	font
 1439              		.cfi_endproc
 1440              	.LFE44:
 1442              		.section	.text.draw_string,"ax",%progbits
 1443              		.align	1
 1444              		.global	draw_string
 1445              		.syntax unified
 1446              		.code	16
 1447              		.thumb_func
 1448              		.fpu softvfp
 1450              	draw_string:
 1451              	.LFB45:
 282:Src/main.c    ****     while (*str) {
 1452              		.loc 1 282 0
 1453              		.cfi_startproc
 1454              		@ args = 0, pretend = 0, frame = 0
 1455              		@ frame_needed = 0, uses_anonymous_args = 0
 1456              	.LVL115:
 1457 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1458              	.LCFI23:
 1459              		.cfi_def_cfa_offset 24
 1460              		.cfi_offset 3, -24
 1461              		.cfi_offset 4, -20
 1462              		.cfi_offset 5, -16
 1463              		.cfi_offset 6, -12
 1464              		.cfi_offset 7, -8
 1465              		.cfi_offset 14, -4
 1466 0002 0700     		movs	r7, r0
 1467 0004 0C00     		movs	r4, r1
 1468 0006 1600     		movs	r6, r2
 1469 0008 1D00     		movs	r5, r3
 283:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1470              		.loc 1 283 0
 1471 000a 07E0     		b	.L81
 1472              	.LVL116:
 1473              	.L82:
 284:Src/main.c    ****         x += CHAR_WIDTH;
 1474              		.loc 1 284 0
 1475 000c 0137     		adds	r7, r7, #1
ARM GAS  /tmp/ccJSMaGx.s 			page 39


 1476              	.LVL117:
 1477 000e 2B00     		movs	r3, r5
 1478 0010 3200     		movs	r2, r6
 1479 0012 2100     		movs	r1, r4
 1480 0014 FFF7FEFF 		bl	draw_char
 1481              	.LVL118:
 285:Src/main.c    ****     }
 1482              		.loc 1 285 0
 1483 0018 0634     		adds	r4, r4, #6
 1484              	.LVL119:
 1485 001a E4B2     		uxtb	r4, r4
 1486              	.LVL120:
 1487              	.L81:
 283:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1488              		.loc 1 283 0
 1489 001c 3878     		ldrb	r0, [r7]
 1490 001e 0028     		cmp	r0, #0
 1491 0020 F4D1     		bne	.L82
 287:Src/main.c    **** 
 1492              		.loc 1 287 0
 1493              		@ sp needed
 1494              	.LVL121:
 1495              	.LVL122:
 1496 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1497              		.cfi_endproc
 1498              	.LFE45:
 1500              		.section	.text.SystemClock_Config,"ax",%progbits
 1501              		.align	1
 1502              		.global	SystemClock_Config
 1503              		.syntax unified
 1504              		.code	16
 1505              		.thumb_func
 1506              		.fpu softvfp
 1508              	SystemClock_Config:
 1509              	.LFB46:
 290:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1510              		.loc 1 290 0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 96
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 1514 0000 10B5     		push	{r4, lr}
 1515              	.LCFI24:
 1516              		.cfi_def_cfa_offset 8
 1517              		.cfi_offset 4, -8
 1518              		.cfi_offset 14, -4
 1519 0002 98B0     		sub	sp, sp, #96
 1520              	.LCFI25:
 1521              		.cfi_def_cfa_offset 104
 291:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1522              		.loc 1 291 0
 1523 0004 2C22     		movs	r2, #44
 1524 0006 0021     		movs	r1, #0
 1525 0008 0CA8     		add	r0, sp, #48
 1526 000a FFF7FEFF 		bl	memset
 1527              	.LVL123:
 292:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1528              		.loc 1 292 0
ARM GAS  /tmp/ccJSMaGx.s 			page 40


 1529 000e 1024     		movs	r4, #16
 1530 0010 1022     		movs	r2, #16
 1531 0012 0021     		movs	r1, #0
 1532 0014 07A8     		add	r0, sp, #28
 1533 0016 FFF7FEFF 		bl	memset
 1534              	.LVL124:
 293:Src/main.c    **** 
 1535              		.loc 1 293 0
 1536 001a 1C22     		movs	r2, #28
 1537 001c 0021     		movs	r1, #0
 1538 001e 6846     		mov	r0, sp
 1539 0020 FFF7FEFF 		bl	memset
 1540              	.LVL125:
 295:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 1541              		.loc 1 295 0
 1542 0024 3223     		movs	r3, #50
 1543 0026 0B93     		str	r3, [sp, #44]
 297:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1544              		.loc 1 297 0
 1545 0028 313B     		subs	r3, r3, #49
 1546 002a 0E93     		str	r3, [sp, #56]
 298:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1547              		.loc 1 298 0
 1548 002c 1393     		str	r3, [sp, #76]
 299:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1549              		.loc 1 299 0
 1550 002e 1093     		str	r3, [sp, #64]
 300:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1551              		.loc 1 300 0
 1552 0030 0F94     		str	r4, [sp, #60]
 301:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1553              		.loc 1 301 0
 1554 0032 1194     		str	r4, [sp, #68]
 302:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 1555              		.loc 1 302 0
 1556 0034 0E3C     		subs	r4, r4, #14
 1557 0036 1494     		str	r4, [sp, #80]
 303:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 1558              		.loc 1 303 0
 1559 0038 C022     		movs	r2, #192
 1560 003a 5202     		lsls	r2, r2, #9
 1561 003c 1592     		str	r2, [sp, #84]
 305:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1562              		.loc 1 305 0
 1563 003e 1793     		str	r3, [sp, #92]
 306:Src/main.c    **** 
 1564              		.loc 1 306 0
 1565 0040 0BA8     		add	r0, sp, #44
 1566 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1567              	.LVL126:
 308:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1568              		.loc 1 308 0
 1569 0046 0723     		movs	r3, #7
 1570 0048 0793     		str	r3, [sp, #28]
 310:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1571              		.loc 1 310 0
 1572 004a 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccJSMaGx.s 			page 41


 311:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1573              		.loc 1 311 0
 1574 004c 0024     		movs	r4, #0
 1575 004e 0994     		str	r4, [sp, #36]
 312:Src/main.c    **** 
 1576              		.loc 1 312 0
 1577 0050 0A94     		str	r4, [sp, #40]
 314:Src/main.c    **** 
 1578              		.loc 1 314 0
 1579 0052 0121     		movs	r1, #1
 1580 0054 07A8     		add	r0, sp, #28
 1581 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1582              	.LVL127:
 316:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1583              		.loc 1 316 0
 1584 005a 044B     		ldr	r3, .L84
 1585 005c 0093     		str	r3, [sp]
 317:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1586              		.loc 1 317 0
 1587 005e 0494     		str	r4, [sp, #16]
 318:Src/main.c    **** 
 1588              		.loc 1 318 0
 1589 0060 0694     		str	r4, [sp, #24]
 320:Src/main.c    **** }
 1590              		.loc 1 320 0
 1591 0062 6846     		mov	r0, sp
 1592 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1593              	.LVL128:
 321:Src/main.c    **** 
 1594              		.loc 1 321 0
 1595 0068 18B0     		add	sp, sp, #96
 1596              		@ sp needed
 1597 006a 10BD     		pop	{r4, pc}
 1598              	.L85:
 1599              		.align	2
 1600              	.L84:
 1601 006c 20000200 		.word	131104
 1602              		.cfi_endproc
 1603              	.LFE46:
 1605              		.global	__aeabi_f2uiz
 1606              		.section	.text.main,"ax",%progbits
 1607              		.align	1
 1608              		.global	main
 1609              		.syntax unified
 1610              		.code	16
 1611              		.thumb_func
 1612              		.fpu softvfp
 1614              	main:
 1615              	.LFB37:
  91:Src/main.c    **** 
 1616              		.loc 1 91 0
 1617              		.cfi_startproc
 1618              		@ Volatile: function does not return.
 1619              		@ args = 0, pretend = 0, frame = 48
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1622              	.LCFI26:
ARM GAS  /tmp/ccJSMaGx.s 			page 42


 1623              		.cfi_def_cfa_offset 20
 1624              		.cfi_offset 4, -20
 1625              		.cfi_offset 5, -16
 1626              		.cfi_offset 6, -12
 1627              		.cfi_offset 7, -8
 1628              		.cfi_offset 14, -4
 1629 0002 C646     		mov	lr, r8
 1630 0004 00B5     		push	{lr}
 1631              	.LCFI27:
 1632              		.cfi_def_cfa_offset 24
 1633              		.cfi_offset 8, -24
 1634 0006 8CB0     		sub	sp, sp, #48
 1635              	.LCFI28:
 1636              		.cfi_def_cfa_offset 72
  93:Src/main.c    **** 
 1637              		.loc 1 93 0
 1638 0008 FFF7FEFF 		bl	HAL_Init
 1639              	.LVL129:
  95:Src/main.c    **** 
 1640              		.loc 1 95 0
 1641 000c FFF7FEFF 		bl	SystemClock_Config
 1642              	.LVL130:
  97:Src/main.c    ****   MX_DMA_Init();
 1643              		.loc 1 97 0
 1644 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1645              	.LVL131:
  98:Src/main.c    ****   MX_ADC_Init();
 1646              		.loc 1 98 0
 1647 0014 FFF7FEFF 		bl	MX_DMA_Init
 1648              	.LVL132:
  99:Src/main.c    ****   MX_I2C1_Init();
 1649              		.loc 1 99 0
 1650 0018 FFF7FEFF 		bl	MX_ADC_Init
 1651              	.LVL133:
 100:Src/main.c    ****   MX_I2C2_Init();
 1652              		.loc 1 100 0
 1653 001c FFF7FEFF 		bl	MX_I2C1_Init
 1654              	.LVL134:
 101:Src/main.c    ****   MX_TIM1_Init();
 1655              		.loc 1 101 0
 1656 0020 FFF7FEFF 		bl	MX_I2C2_Init
 1657              	.LVL135:
 102:Src/main.c    ****   MX_USB_PCD_Init();
 1658              		.loc 1 102 0
 1659 0024 FFF7FEFF 		bl	MX_TIM1_Init
 1660              	.LVL136:
 103:Src/main.c    **** 
 1661              		.loc 1 103 0
 1662 0028 FFF7FEFF 		bl	MX_USB_PCD_Init
 1663              	.LVL137:
 105:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 1664              		.loc 1 105 0
 1665 002c 854C     		ldr	r4, .L104
 1666 002e 0021     		movs	r1, #0
 1667 0030 2000     		movs	r0, r4
 1668 0032 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1669              	.LVL138:
ARM GAS  /tmp/ccJSMaGx.s 			page 43


 106:Src/main.c    **** 
 1670              		.loc 1 106 0
 1671 0036 0C21     		movs	r1, #12
 1672 0038 2000     		movs	r0, r4
 1673 003a FFF7FEFF 		bl	HAL_TIM_OC_Start
 1674              	.LVL139:
 108:Src/main.c    **** 
 1675              		.loc 1 108 0
 1676 003e 0422     		movs	r2, #4
 1677 0040 8149     		ldr	r1, .L104+4
 1678 0042 8248     		ldr	r0, .L104+8
 1679 0044 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 1680              	.LVL140:
 110:Src/main.c    ****   disp_init();
 1681              		.loc 1 110 0
 1682 0048 1420     		movs	r0, #20
 1683 004a FFF7FEFF 		bl	HAL_Delay
 1684              	.LVL141:
 111:Src/main.c    ****   HAL_Delay(60);
 1685              		.loc 1 111 0
 1686 004e FFF7FEFF 		bl	disp_init
 1687              	.LVL142:
 112:Src/main.c    ****   clear_screen();
 1688              		.loc 1 112 0
 1689 0052 3C20     		movs	r0, #60
 1690 0054 FFF7FEFF 		bl	HAL_Delay
 1691              	.LVL143:
 113:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 1692              		.loc 1 113 0
 1693 0058 FFF7FEFF 		bl	clear_screen
 1694              	.LVL144:
 114:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 1695              		.loc 1 114 0
 1696 005c 9020     		movs	r0, #144
 1697 005e 0821     		movs	r1, #8
 1698 0060 C005     		lsls	r0, r0, #23
 1699 0062 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1700              	.LVL145:
 1701 0066 0028     		cmp	r0, #0
 1702 0068 06D0     		beq	.L87
 114:Src/main.c    ****     draw_string("dfu", 15, 1 ,1);
 1703              		.loc 1 114 0 is_stmt 0 discriminator 1
 1704 006a 9020     		movs	r0, #144
 1705 006c 1021     		movs	r1, #16
 1706 006e C005     		lsls	r0, r0, #23
 1707 0070 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1708              	.LVL146:
 1709 0074 0028     		cmp	r0, #0
 1710 0076 12D1     		bne	.L101
 1711              	.L87:
 121:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 1712              		.loc 1 121 0 is_stmt 1
 1713 0078 0123     		movs	r3, #1
 1714 007a 0122     		movs	r2, #1
 1715 007c 0F21     		movs	r1, #15
 1716 007e 7448     		ldr	r0, .L104+12
 1717 0080 FFF7FEFF 		bl	draw_string
ARM GAS  /tmp/ccJSMaGx.s 			page 44


 1718              	.LVL147:
 122:Src/main.c    ****     refresh();
 1719              		.loc 1 122 0
 1720 0084 0123     		movs	r3, #1
 1721 0086 0922     		movs	r2, #9
 1722 0088 0A21     		movs	r1, #10
 1723 008a 7248     		ldr	r0, .L104+16
 1724 008c FFF7FEFF 		bl	draw_string
 1725              	.LVL148:
 123:Src/main.c    ****   }
 1726              		.loc 1 123 0
 1727 0090 FFF7FEFF 		bl	refresh
 1728              	.LVL149:
 125:Src/main.c    **** 
 1729              		.loc 1 125 0
 1730 0094 FA20     		movs	r0, #250
 1731 0096 8000     		lsls	r0, r0, #2
 1732 0098 FFF7FEFF 		bl	HAL_Delay
 1733              	.LVL150:
 1734 009c 9FE0     		b	.L96
 1735              	.L101:
 115:Src/main.c    ****     refresh();
 1736              		.loc 1 115 0
 1737 009e 0123     		movs	r3, #1
 1738 00a0 1A00     		movs	r2, r3
 1739 00a2 0F21     		movs	r1, #15
 1740 00a4 6C48     		ldr	r0, .L104+20
 1741 00a6 FFF7FEFF 		bl	draw_string
 1742              	.LVL151:
 116:Src/main.c    ****     HAL_Delay(40);
 1743              		.loc 1 116 0
 1744 00aa FFF7FEFF 		bl	refresh
 1745              	.LVL152:
 117:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 1746              		.loc 1 117 0
 1747 00ae 2820     		movs	r0, #40
 1748 00b0 FFF7FEFF 		bl	HAL_Delay
 1749              	.LVL153:
 118:Src/main.c    ****     NVIC_SystemReset();
 1750              		.loc 1 118 0
 1751 00b4 694B     		ldr	r3, .L104+24
 1752 00b6 6A4A     		ldr	r2, .L104+28
 1753 00b8 1A60     		str	r2, [r3]
 1754              	.LBB27:
 1755              	.LBB28:
 1756              	.LBB29:
 1757              	.LBB30:
 1758              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
ARM GAS  /tmp/ccJSMaGx.s 			page 45


  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
ARM GAS  /tmp/ccJSMaGx.s 			page 46


  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
ARM GAS  /tmp/ccJSMaGx.s 			page 47


 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 48


 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
ARM GAS  /tmp/ccJSMaGx.s 			page 49


 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccJSMaGx.s 			page 50


 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 51


 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 52


 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1759              		.loc 2 429 0
 1760              		.syntax divided
 1761              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1762 00ba BFF34F8F 		dsb 0xF
 1763              	@ 0 "" 2
 1764              		.thumb
 1765              		.syntax unified
 1766              	.LBE30:
 1767              	.LBE29:
 1768              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
ARM GAS  /tmp/ccJSMaGx.s 			page 53


  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
ARM GAS  /tmp/ccJSMaGx.s 			page 54


  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 55


 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
ARM GAS  /tmp/ccJSMaGx.s 			page 56


 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
ARM GAS  /tmp/ccJSMaGx.s 			page 57


 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
ARM GAS  /tmp/ccJSMaGx.s 			page 58


 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
ARM GAS  /tmp/ccJSMaGx.s 			page 59


 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
ARM GAS  /tmp/ccJSMaGx.s 			page 60


 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/ccJSMaGx.s 			page 61


 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
ARM GAS  /tmp/ccJSMaGx.s 			page 62


 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
ARM GAS  /tmp/ccJSMaGx.s 			page 63


 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
ARM GAS  /tmp/ccJSMaGx.s 			page 64


 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
ARM GAS  /tmp/ccJSMaGx.s 			page 65


 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 1769              		.loc 3 734 0
 1770 00be 694B     		ldr	r3, .L104+32
 1771 00c0 694A     		ldr	r2, .L104+36
 1772 00c2 DA60     		str	r2, [r3, #12]
 1773              	.LBB31:
 1774              	.LBB32:
 1775              		.loc 2 429 0
 1776              		.syntax divided
 1777              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1778 00c4 BFF34F8F 		dsb 0xF
 1779              	@ 0 "" 2
 1780              		.thumb
 1781              		.syntax unified
 1782              	.L88:
 1783              	.LBE32:
 1784              	.LBE31:
 1785              	.LBB33:
 1786              	.LBB34:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1787              		.loc 2 375 0
 1788              		.syntax divided
 1789              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1790 00c8 C046     		nop
 1791              	@ 0 "" 2
 1792              		.thumb
 1793              		.syntax unified
 1794 00ca FDE7     		b	.L88
 1795              	.L102:
 1796              	.LBE34:
 1797              	.LBE33:
 1798              	.LBE28:
 1799              	.LBE27:
 1800              	.LBB35:
ARM GAS  /tmp/ccJSMaGx.s 			page 66


 136:Src/main.c    ****       HAL_Delay(50);
 1801              		.loc 1 136 0
 1802 00cc 674C     		ldr	r4, .L104+40
 1803 00ce 6849     		ldr	r1, .L104+44
 1804 00d0 2068     		ldr	r0, [r4]
 1805 00d2 FFF7FEFF 		bl	__aeabi_fsub
 1806              	.LVL154:
 1807 00d6 2060     		str	r0, [r4]
 137:Src/main.c    ****     }
 1808              		.loc 1 137 0
 1809 00d8 3220     		movs	r0, #50
 1810 00da FFF7FEFF 		bl	HAL_Delay
 1811              	.LVL155:
 1812 00de 92E0     		b	.L89
 1813              	.L103:
 141:Src/main.c    ****       HAL_Delay(50);
 1814              		.loc 1 141 0
 1815 00e0 624C     		ldr	r4, .L104+40
 1816 00e2 6349     		ldr	r1, .L104+44
 1817 00e4 2068     		ldr	r0, [r4]
 1818 00e6 FFF7FEFF 		bl	__aeabi_fadd
 1819              	.LVL156:
 1820 00ea 2060     		str	r0, [r4]
 142:Src/main.c    ****     }
 1821              		.loc 1 142 0
 1822 00ec 3220     		movs	r0, #50
 1823 00ee FFF7FEFF 		bl	HAL_Delay
 1824              	.LVL157:
 1825 00f2 8DE0     		b	.L90
 1826              	.L97:
 145:Src/main.c    **** 
 1827              		.loc 1 145 0
 1828 00f4 5F4F     		ldr	r7, .L104+48
 1829              	.L91:
 145:Src/main.c    **** 
 1830              		.loc 1 145 0 is_stmt 0 discriminator 8
 1831 00f6 5D4B     		ldr	r3, .L104+40
 1832 00f8 9846     		mov	r8, r3
 1833 00fa 1F60     		str	r7, [r3]
 148:Src/main.c    ****     char str2[10] = "          ";
 1834              		.loc 1 148 0 is_stmt 1 discriminator 8
 1835 00fc 03AE     		add	r6, sp, #12
 1836 00fe 5E4B     		ldr	r3, .L104+52
 1837 0100 3100     		movs	r1, r6
 1838 0102 1A00     		movs	r2, r3
 1839 0104 11CA     		ldmia	r2!, {r0, r4}
 1840 0106 11C1     		stmia	r1!, {r0, r4}
 1841 0108 1088     		ldrh	r0, [r2]
 1842 010a 0880     		strh	r0, [r1]
 149:Src/main.c    ****     char str3[10] = "          ";
 1843              		.loc 1 149 0 discriminator 8
 1844 010c 06A9     		add	r1, sp, #24
 1845 010e 1800     		movs	r0, r3
 1846 0110 30C8     		ldmia	r0!, {r4, r5}
 1847 0112 30C1     		stmia	r1!, {r4, r5}
 1848 0114 1088     		ldrh	r0, [r2]
 1849 0116 0880     		strh	r0, [r1]
ARM GAS  /tmp/ccJSMaGx.s 			page 67


 150:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 1850              		.loc 1 150 0 discriminator 8
 1851 0118 09AC     		add	r4, sp, #36
 1852 011a 2100     		movs	r1, r4
 1853 011c 21CB     		ldmia	r3!, {r0, r5}
 1854 011e 21C1     		stmia	r1!, {r0, r5}
 1855 0120 1388     		ldrh	r3, [r2]
 1856 0122 0B80     		strh	r3, [r1]
 151:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 1857              		.loc 1 151 0 discriminator 8
 1858 0124 381C     		adds	r0, r7, #0
 1859 0126 FFF7FEFF 		bl	__aeabi_f2uiz
 1860              	.LVL158:
 1861 012a 82B2     		uxth	r2, r0
 1862 012c 5349     		ldr	r1, .L104+56
 1863 012e 3000     		movs	r0, r6
 1864 0130 FFF7FEFF 		bl	sprintf
 1865              	.LVL159:
 152:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 1866              		.loc 1 152 0 discriminator 8
 1867 0134 524F     		ldr	r7, .L104+60
 1868 0136 7B68     		ldr	r3, [r7, #4]
 1869 0138 0193     		str	r3, [sp, #4]
 1870 013a 181C     		adds	r0, r3, #0
 1871 013c FFF7FEFF 		bl	__aeabi_f2uiz
 1872              	.LVL160:
 1873 0140 82B2     		uxth	r2, r0
 1874 0142 1500     		movs	r5, r2
 1875 0144 1000     		movs	r0, r2
 1876 0146 FFF7FEFF 		bl	__aeabi_i2f
 1877              	.LVL161:
 1878 014a 011C     		adds	r1, r0, #0
 1879 014c 0198     		ldr	r0, [sp, #4]
 1880 014e FFF7FEFF 		bl	__aeabi_fsub
 1881              	.LVL162:
 1882 0152 4C49     		ldr	r1, .L104+64
 1883 0154 FFF7FEFF 		bl	__aeabi_fmul
 1884              	.LVL163:
 1885 0158 FFF7FEFF 		bl	__aeabi_f2uiz
 1886              	.LVL164:
 1887 015c 83B2     		uxth	r3, r0
 1888 015e 2A00     		movs	r2, r5
 1889 0160 4949     		ldr	r1, .L104+68
 1890 0162 06A8     		add	r0, sp, #24
 1891 0164 FFF7FEFF 		bl	sprintf
 1892              	.LVL165:
 153:Src/main.c    **** 
 1893              		.loc 1 153 0 discriminator 8
 1894 0168 BF68     		ldr	r7, [r7, #8]
 1895 016a 381C     		adds	r0, r7, #0
 1896 016c FFF7FEFF 		bl	__aeabi_f2uiz
 1897              	.LVL166:
 1898 0170 83B2     		uxth	r3, r0
 1899 0172 1D00     		movs	r5, r3
 1900 0174 1800     		movs	r0, r3
 1901 0176 FFF7FEFF 		bl	__aeabi_i2f
 1902              	.LVL167:
ARM GAS  /tmp/ccJSMaGx.s 			page 68


 1903 017a 011C     		adds	r1, r0, #0
 1904 017c 381C     		adds	r0, r7, #0
 1905 017e FFF7FEFF 		bl	__aeabi_fsub
 1906              	.LVL168:
 1907 0182 4049     		ldr	r1, .L104+64
 1908 0184 FFF7FEFF 		bl	__aeabi_fmul
 1909              	.LVL169:
 1910 0188 FFF7FEFF 		bl	__aeabi_f2uiz
 1911              	.LVL170:
 1912 018c 83B2     		uxth	r3, r0
 1913 018e 2A00     		movs	r2, r5
 1914 0190 3E49     		ldr	r1, .L104+72
 1915 0192 2000     		movs	r0, r4
 1916 0194 FFF7FEFF 		bl	sprintf
 1917              	.LVL171:
 155:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 1918              		.loc 1 155 0 discriminator 8
 1919 0198 FFF7FEFF 		bl	clear_screen
 1920              	.LVL172:
 156:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 1921              		.loc 1 156 0 discriminator 8
 1922 019c 0123     		movs	r3, #1
 1923 019e 0122     		movs	r2, #1
 1924 01a0 0A21     		movs	r1, #10
 1925 01a2 3000     		movs	r0, r6
 1926 01a4 FFF7FEFF 		bl	draw_string
 1927              	.LVL173:
 157:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 1928              		.loc 1 157 0 discriminator 8
 1929 01a8 0123     		movs	r3, #1
 1930 01aa 0922     		movs	r2, #9
 1931 01ac 0A21     		movs	r1, #10
 1932 01ae 06A8     		add	r0, sp, #24
 1933 01b0 FFF7FEFF 		bl	draw_string
 1934              	.LVL174:
 158:Src/main.c    ****     if(r.error > 3){
 1935              		.loc 1 158 0 discriminator 8
 1936 01b4 0123     		movs	r3, #1
 1937 01b6 0122     		movs	r2, #1
 1938 01b8 3C21     		movs	r1, #60
 1939 01ba 2000     		movs	r0, r4
 1940 01bc FFF7FEFF 		bl	draw_string
 1941              	.LVL175:
 159:Src/main.c    ****       draw_string("*", 60, 9 ,1);
 1942              		.loc 1 159 0 discriminator 8
 1943 01c0 4346     		mov	r3, r8
 1944 01c2 5868     		ldr	r0, [r3, #4]
 1945 01c4 3249     		ldr	r1, .L104+76
 1946 01c6 FFF7FEFF 		bl	__aeabi_fcmpgt
 1947              	.LVL176:
 1948 01ca 0028     		cmp	r0, #0
 1949 01cc 32D0     		beq	.L100
 160:Src/main.c    ****     } else {
 1950              		.loc 1 160 0
 1951 01ce 0123     		movs	r3, #1
 1952 01d0 0922     		movs	r2, #9
 1953 01d2 3C21     		movs	r1, #60
ARM GAS  /tmp/ccJSMaGx.s 			page 69


 1954 01d4 2F48     		ldr	r0, .L104+80
 1955 01d6 FFF7FEFF 		bl	draw_string
 1956              	.LVL177:
 1957              	.L95:
 164:Src/main.c    ****   }
 1958              		.loc 1 164 0
 1959 01da FFF7FEFF 		bl	refresh
 1960              	.LVL178:
 1961              	.L96:
 129:Src/main.c    **** 
 1962              		.loc 1 129 0
 1963 01de 3220     		movs	r0, #50
 1964 01e0 FFF7FEFF 		bl	HAL_Delay
 1965              	.LVL179:
 132:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 1966              		.loc 1 132 0
 1967 01e4 9025     		movs	r5, #144
 1968 01e6 ED05     		lsls	r5, r5, #23
 1969 01e8 0821     		movs	r1, #8
 1970 01ea 2800     		movs	r0, r5
 1971 01ec FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1972              	.LVL180:
 1973 01f0 234C     		ldr	r4, .L104+60
 1974 01f2 2075     		strb	r0, [r4, #20]
 133:Src/main.c    **** 
 1975              		.loc 1 133 0
 1976 01f4 1021     		movs	r1, #16
 1977 01f6 2800     		movs	r0, r5
 1978 01f8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1979              	.LVL181:
 1980 01fc 6075     		strb	r0, [r4, #21]
 135:Src/main.c    ****       r.target -= 5;
 1981              		.loc 1 135 0
 1982 01fe 237D     		ldrb	r3, [r4, #20]
 1983 0200 012B     		cmp	r3, #1
 1984 0202 00D1     		bne	.LCB1690
 1985 0204 62E7     		b	.L102	@long jump
 1986              	.LCB1690:
 1987              	.L89:
 140:Src/main.c    ****       r.target += 5;
 1988              		.loc 1 140 0
 1989 0206 1E4B     		ldr	r3, .L104+60
 1990 0208 5B7D     		ldrb	r3, [r3, #21]
 1991 020a 012B     		cmp	r3, #1
 1992 020c 00D1     		bne	.LCB1695
 1993 020e 67E7     		b	.L103	@long jump
 1994              	.LCB1695:
 1995              	.L90:
 145:Src/main.c    **** 
 1996              		.loc 1 145 0
 1997 0210 164B     		ldr	r3, .L104+40
 1998 0212 1F68     		ldr	r7, [r3]
 1999 0214 1749     		ldr	r1, .L104+48
 2000 0216 381C     		adds	r0, r7, #0
 2001 0218 FFF7FEFF 		bl	__aeabi_fcmpgt
 2002              	.LVL182:
 2003 021c 0028     		cmp	r0, #0
ARM GAS  /tmp/ccJSMaGx.s 			page 70


 2004 021e 00D0     		beq	.LCB1704
 2005 0220 68E7     		b	.L97	@long jump
 2006              	.LCB1704:
 145:Src/main.c    **** 
 2007              		.loc 1 145 0 is_stmt 0 discriminator 2
 2008 0222 1D49     		ldr	r1, .L104+84
 2009 0224 381C     		adds	r0, r7, #0
 2010 0226 FFF7FEFF 		bl	__aeabi_fcmplt
 2011              	.LVL183:
 2012 022a 0028     		cmp	r0, #0
 2013 022c 00D1     		bne	.LCB1710
 2014 022e 62E7     		b	.L91	@long jump
 2015              	.LCB1710:
 145:Src/main.c    **** 
 2016              		.loc 1 145 0
 2017 0230 194F     		ldr	r7, .L104+84
 2018 0232 60E7     		b	.L91
 2019              	.L100:
 162:Src/main.c    ****     }
 2020              		.loc 1 162 0 is_stmt 1
 2021 0234 0123     		movs	r3, #1
 2022 0236 0922     		movs	r2, #9
 2023 0238 3C21     		movs	r1, #60
 2024 023a 1848     		ldr	r0, .L104+88
 2025 023c FFF7FEFF 		bl	draw_string
 2026              	.LVL184:
 2027 0240 CBE7     		b	.L95
 2028              	.L105:
 2029 0242 C046     		.align	2
 2030              	.L104:
 2031 0244 00000000 		.word	htim1
 2032 0248 00000000 		.word	.LANCHOR0
 2033 024c 00000000 		.word	hadc
 2034 0250 04000000 		.word	.LC25
 2035 0254 10000000 		.word	.LC27
 2036 0258 00000000 		.word	.LC23
 2037 025c F03F0020 		.word	536887280
 2038 0260 EFBEADDE 		.word	-559038737
 2039 0264 00ED00E0 		.word	-536810240
 2040 0268 0400FA05 		.word	100270084
 2041 026c 00000000 		.word	.LANCHOR2
 2042 0270 0000A040 		.word	1084227584
 2043 0274 0000C843 		.word	1137180672
 2044 0278 00000000 		.word	.LANCHOR5
 2045 027c 20000000 		.word	.LC33
 2046 0280 00000000 		.word	s
 2047 0284 00002041 		.word	1092616192
 2048 0288 28000000 		.word	.LC35
 2049 028c 30000000 		.word	.LC37
 2050 0290 00004040 		.word	1077936128
 2051 0294 38000000 		.word	.LC39
 2052 0298 0000A041 		.word	1101004800
 2053 029c 3C000000 		.word	.LC41
 2054              	.LBE35:
 2055              		.cfi_endproc
 2056              	.LFE37:
 2058              		.section	.text.Error_Handler,"ax",%progbits
ARM GAS  /tmp/ccJSMaGx.s 			page 71


 2059              		.align	1
 2060              		.global	Error_Handler
 2061              		.syntax unified
 2062              		.code	16
 2063              		.thumb_func
 2064              		.fpu softvfp
 2066              	Error_Handler:
 2067              	.LFB54:
 532:Src/main.c    **** 
 533:Src/main.c    **** void Error_Handler(void)
 534:Src/main.c    **** {
 2068              		.loc 1 534 0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 2072              		@ link register save eliminated.
 535:Src/main.c    **** 
 536:Src/main.c    **** }
 2073              		.loc 1 536 0
 2074              		@ sp needed
 2075 0000 7047     		bx	lr
 2076              		.cfi_endproc
 2077              	.LFE54:
 2079              		.global	OLED_Setup_Array
 2080              		.global	REFRESH_COMMANDS
 2081              		.comm	screenBuffer,218,4
 2082              		.global	tipcal
 2083              		.global	r
 2084              		.comm	s,24,4
 2085              		.comm	hpcd_USB_FS,544,4
 2086              		.comm	htim1,64,4
 2087              		.comm	hi2c2,76,4
 2088              		.comm	hi2c1,76,4
 2089              		.comm	hdma_adc,68,4
 2090              		.comm	hadc,76,4
 2091              		.global	font
 2092              		.section	.rodata
 2093              		.align	2
 2094              		.set	.LANCHOR5,. + 0
 2095              	.LC31:
 2096 0000 20202020 		.ascii	"          \000"
 2096      20202020 
 2096      202000
 2097              		.section	.bss.ADC_raw,"aw",%nobits
 2098              		.align	2
 2099              		.set	.LANCHOR0,. + 0
 2102              	ADC_raw:
 2103 0000 00000000 		.space	8
 2103      00000000 
 2104              		.section	.data.OLED_Setup_Array,"aw",%progbits
 2105              		.align	2
 2106              		.set	.LANCHOR4,. + 0
 2109              	OLED_Setup_Array:
 2110 0000 80       		.byte	-128
 2111 0001 AE       		.byte	-82
 2112 0002 80       		.byte	-128
 2113 0003 D5       		.byte	-43
ARM GAS  /tmp/ccJSMaGx.s 			page 72


 2114 0004 80       		.byte	-128
 2115 0005 52       		.byte	82
 2116 0006 80       		.byte	-128
 2117 0007 A8       		.byte	-88
 2118 0008 80       		.byte	-128
 2119 0009 0F       		.byte	15
 2120 000a 80       		.byte	-128
 2121 000b C0       		.byte	-64
 2122 000c 80       		.byte	-128
 2123 000d D3       		.byte	-45
 2124 000e 80       		.byte	-128
 2125 000f 00       		.byte	0
 2126 0010 80       		.byte	-128
 2127 0011 40       		.byte	64
 2128 0012 80       		.byte	-128
 2129 0013 A0       		.byte	-96
 2130 0014 80       		.byte	-128
 2131 0015 8D       		.byte	-115
 2132 0016 80       		.byte	-128
 2133 0017 14       		.byte	20
 2134 0018 80       		.byte	-128
 2135 0019 DA       		.byte	-38
 2136 001a 80       		.byte	-128
 2137 001b 02       		.byte	2
 2138 001c 80       		.byte	-128
 2139 001d 81       		.byte	-127
 2140 001e 80       		.byte	-128
 2141 001f 33       		.byte	51
 2142 0020 80       		.byte	-128
 2143 0021 D9       		.byte	-39
 2144 0022 80       		.byte	-128
 2145 0023 F1       		.byte	-15
 2146 0024 80       		.byte	-128
 2147 0025 DB       		.byte	-37
 2148 0026 80       		.byte	-128
 2149 0027 30       		.byte	48
 2150 0028 80       		.byte	-128
 2151 0029 A4       		.byte	-92
 2152 002a 80       		.byte	-128
 2153 002b A6       		.byte	-90
 2154 002c 80       		.byte	-128
 2155 002d 20       		.byte	32
 2156 002e 80       		.byte	-128
 2157 002f 00       		.byte	0
 2158 0030 80       		.byte	-128
 2159 0031 AF       		.byte	-81
 2160              		.section	.data.r,"aw",%progbits
 2161              		.align	2
 2162              		.set	.LANCHOR2,. + 0
 2165              	r:
 2166 0000 00005C43 		.word	1130102784
 2167 0004 00000000 		.space	12
 2167      00000000 
 2167      00000000 
 2168 0010 00004843 		.word	1128792064
 2169 0014 00000000 		.space	8
 2169      00000000 
ARM GAS  /tmp/ccJSMaGx.s 			page 73


 2170 001c CDCCCC3D 		.word	1036831949
 2171 0020 00002042 		.word	1109393408
 2172 0024 00007041 		.word	1097859072
 2173 0028 00004041 		.word	1094713344
 2174 002c 00004041 		.word	1094713344
 2175              		.section	.data.tipcal,"aw",%progbits
 2176              		.align	2
 2177              		.set	.LANCHOR1,. + 0
 2180              	tipcal:
 2181 0000 0000F042 		.word	1123024896
 2182 0004 0000B842 		.word	1119354880
 2183              		.section	.rodata.REFRESH_COMMANDS,"a",%progbits
 2184              		.align	2
 2185              		.set	.LANCHOR3,. + 0
 2188              	REFRESH_COMMANDS:
 2189 0000 80       		.byte	-128
 2190 0001 AF       		.byte	-81
 2191 0002 80       		.byte	-128
 2192 0003 21       		.byte	33
 2193 0004 80       		.byte	-128
 2194 0005 20       		.byte	32
 2195 0006 80       		.byte	-128
 2196 0007 7F       		.byte	127
 2197 0008 80       		.byte	-128
 2198 0009 C0       		.byte	-64
 2199 000a 80       		.byte	-128
 2200 000b 22       		.byte	34
 2201 000c 80       		.byte	-128
 2202 000d 00       		.byte	0
 2203 000e 80       		.byte	-128
 2204 000f 01       		.byte	1
 2205 0010 40       		.byte	64
 2206              		.section	.rodata.font,"a",%progbits
 2207              		.align	2
 2210              	font:
 2211 0000 00       		.byte	0
 2212 0001 00       		.byte	0
 2213 0002 00       		.byte	0
 2214 0003 00       		.byte	0
 2215 0004 00       		.byte	0
 2216 0005 00       		.byte	0
 2217 0006 2F       		.byte	47
 2218 0007 00       		.byte	0
 2219 0008 00       		.byte	0
 2220 0009 00       		.byte	0
 2221 000a 00       		.byte	0
 2222 000b 00       		.byte	0
 2223 000c 03       		.byte	3
 2224 000d 00       		.byte	0
 2225 000e 03       		.byte	3
 2226 000f 00       		.byte	0
 2227 0010 00       		.byte	0
 2228 0011 00       		.byte	0
 2229 0012 12       		.byte	18
 2230 0013 3F       		.byte	63
 2231 0014 12       		.byte	18
 2232 0015 12       		.byte	18
ARM GAS  /tmp/ccJSMaGx.s 			page 74


 2233 0016 3F       		.byte	63
 2234 0017 12       		.byte	18
 2235 0018 2E       		.byte	46
 2236 0019 2A       		.byte	42
 2237 001a 7F       		.byte	127
 2238 001b 2A       		.byte	42
 2239 001c 3A       		.byte	58
 2240 001d 00       		.byte	0
 2241 001e 23       		.byte	35
 2242 001f 13       		.byte	19
 2243 0020 08       		.byte	8
 2244 0021 04       		.byte	4
 2245 0022 32       		.byte	50
 2246 0023 31       		.byte	49
 2247 0024 10       		.byte	16
 2248 0025 2A       		.byte	42
 2249 0026 25       		.byte	37
 2250 0027 2A       		.byte	42
 2251 0028 10       		.byte	16
 2252 0029 20       		.byte	32
 2253 002a 02       		.byte	2
 2254 002b 01       		.byte	1
 2255 002c 00       		.byte	0
 2256 002d 00       		.byte	0
 2257 002e 00       		.byte	0
 2258 002f 00       		.byte	0
 2259 0030 1E       		.byte	30
 2260 0031 21       		.byte	33
 2261 0032 00       		.byte	0
 2262 0033 00       		.byte	0
 2263 0034 00       		.byte	0
 2264 0035 00       		.byte	0
 2265 0036 21       		.byte	33
 2266 0037 1E       		.byte	30
 2267 0038 00       		.byte	0
 2268 0039 00       		.byte	0
 2269 003a 00       		.byte	0
 2270 003b 00       		.byte	0
 2271 003c 08       		.byte	8
 2272 003d 2A       		.byte	42
 2273 003e 1C       		.byte	28
 2274 003f 2A       		.byte	42
 2275 0040 08       		.byte	8
 2276 0041 08       		.byte	8
 2277 0042 08       		.byte	8
 2278 0043 08       		.byte	8
 2279 0044 3E       		.byte	62
 2280 0045 08       		.byte	8
 2281 0046 08       		.byte	8
 2282 0047 08       		.byte	8
 2283 0048 80       		.byte	-128
 2284 0049 60       		.byte	96
 2285 004a 00       		.byte	0
 2286 004b 00       		.byte	0
 2287 004c 00       		.byte	0
 2288 004d 00       		.byte	0
 2289 004e 08       		.byte	8
ARM GAS  /tmp/ccJSMaGx.s 			page 75


 2290 004f 08       		.byte	8
 2291 0050 08       		.byte	8
 2292 0051 08       		.byte	8
 2293 0052 08       		.byte	8
 2294 0053 00       		.byte	0
 2295 0054 30       		.byte	48
 2296 0055 30       		.byte	48
 2297 0056 00       		.byte	0
 2298 0057 00       		.byte	0
 2299 0058 00       		.byte	0
 2300 0059 00       		.byte	0
 2301 005a 20       		.byte	32
 2302 005b 10       		.byte	16
 2303 005c 08       		.byte	8
 2304 005d 04       		.byte	4
 2305 005e 02       		.byte	2
 2306 005f 00       		.byte	0
 2307 0060 1E       		.byte	30
 2308 0061 31       		.byte	49
 2309 0062 29       		.byte	41
 2310 0063 25       		.byte	37
 2311 0064 23       		.byte	35
 2312 0065 1E       		.byte	30
 2313 0066 22       		.byte	34
 2314 0067 21       		.byte	33
 2315 0068 3F       		.byte	63
 2316 0069 20       		.byte	32
 2317 006a 20       		.byte	32
 2318 006b 20       		.byte	32
 2319 006c 32       		.byte	50
 2320 006d 29       		.byte	41
 2321 006e 29       		.byte	41
 2322 006f 29       		.byte	41
 2323 0070 29       		.byte	41
 2324 0071 26       		.byte	38
 2325 0072 12       		.byte	18
 2326 0073 21       		.byte	33
 2327 0074 21       		.byte	33
 2328 0075 25       		.byte	37
 2329 0076 25       		.byte	37
 2330 0077 1A       		.byte	26
 2331 0078 18       		.byte	24
 2332 0079 14       		.byte	20
 2333 007a 12       		.byte	18
 2334 007b 3F       		.byte	63
 2335 007c 10       		.byte	16
 2336 007d 10       		.byte	16
 2337 007e 17       		.byte	23
 2338 007f 25       		.byte	37
 2339 0080 25       		.byte	37
 2340 0081 25       		.byte	37
 2341 0082 25       		.byte	37
 2342 0083 19       		.byte	25
 2343 0084 1E       		.byte	30
 2344 0085 25       		.byte	37
 2345 0086 25       		.byte	37
 2346 0087 25       		.byte	37
ARM GAS  /tmp/ccJSMaGx.s 			page 76


 2347 0088 25       		.byte	37
 2348 0089 18       		.byte	24
 2349 008a 01       		.byte	1
 2350 008b 01       		.byte	1
 2351 008c 31       		.byte	49
 2352 008d 09       		.byte	9
 2353 008e 05       		.byte	5
 2354 008f 03       		.byte	3
 2355 0090 1A       		.byte	26
 2356 0091 25       		.byte	37
 2357 0092 25       		.byte	37
 2358 0093 25       		.byte	37
 2359 0094 25       		.byte	37
 2360 0095 1A       		.byte	26
 2361 0096 06       		.byte	6
 2362 0097 29       		.byte	41
 2363 0098 29       		.byte	41
 2364 0099 29       		.byte	41
 2365 009a 29       		.byte	41
 2366 009b 1E       		.byte	30
 2367 009c 24       		.byte	36
 2368 009d 00       		.byte	0
 2369 009e 00       		.byte	0
 2370 009f 00       		.byte	0
 2371 00a0 00       		.byte	0
 2372 00a1 00       		.byte	0
 2373 00a2 80       		.byte	-128
 2374 00a3 64       		.byte	100
 2375 00a4 00       		.byte	0
 2376 00a5 00       		.byte	0
 2377 00a6 00       		.byte	0
 2378 00a7 00       		.byte	0
 2379 00a8 08       		.byte	8
 2380 00a9 14       		.byte	20
 2381 00aa 22       		.byte	34
 2382 00ab 00       		.byte	0
 2383 00ac 00       		.byte	0
 2384 00ad 00       		.byte	0
 2385 00ae 14       		.byte	20
 2386 00af 14       		.byte	20
 2387 00b0 14       		.byte	20
 2388 00b1 14       		.byte	20
 2389 00b2 14       		.byte	20
 2390 00b3 00       		.byte	0
 2391 00b4 22       		.byte	34
 2392 00b5 14       		.byte	20
 2393 00b6 08       		.byte	8
 2394 00b7 00       		.byte	0
 2395 00b8 00       		.byte	0
 2396 00b9 00       		.byte	0
 2397 00ba 02       		.byte	2
 2398 00bb 01       		.byte	1
 2399 00bc 01       		.byte	1
 2400 00bd 29       		.byte	41
 2401 00be 05       		.byte	5
 2402 00bf 02       		.byte	2
 2403 00c0 1E       		.byte	30
ARM GAS  /tmp/ccJSMaGx.s 			page 77


 2404 00c1 21       		.byte	33
 2405 00c2 2D       		.byte	45
 2406 00c3 2B       		.byte	43
 2407 00c4 2D       		.byte	45
 2408 00c5 0E       		.byte	14
 2409 00c6 3E       		.byte	62
 2410 00c7 09       		.byte	9
 2411 00c8 09       		.byte	9
 2412 00c9 09       		.byte	9
 2413 00ca 09       		.byte	9
 2414 00cb 3E       		.byte	62
 2415 00cc 3F       		.byte	63
 2416 00cd 25       		.byte	37
 2417 00ce 25       		.byte	37
 2418 00cf 25       		.byte	37
 2419 00d0 25       		.byte	37
 2420 00d1 1A       		.byte	26
 2421 00d2 1E       		.byte	30
 2422 00d3 21       		.byte	33
 2423 00d4 21       		.byte	33
 2424 00d5 21       		.byte	33
 2425 00d6 21       		.byte	33
 2426 00d7 12       		.byte	18
 2427 00d8 3F       		.byte	63
 2428 00d9 21       		.byte	33
 2429 00da 21       		.byte	33
 2430 00db 21       		.byte	33
 2431 00dc 12       		.byte	18
 2432 00dd 0C       		.byte	12
 2433 00de 3F       		.byte	63
 2434 00df 25       		.byte	37
 2435 00e0 25       		.byte	37
 2436 00e1 25       		.byte	37
 2437 00e2 25       		.byte	37
 2438 00e3 21       		.byte	33
 2439 00e4 3F       		.byte	63
 2440 00e5 05       		.byte	5
 2441 00e6 05       		.byte	5
 2442 00e7 05       		.byte	5
 2443 00e8 05       		.byte	5
 2444 00e9 01       		.byte	1
 2445 00ea 1E       		.byte	30
 2446 00eb 21       		.byte	33
 2447 00ec 21       		.byte	33
 2448 00ed 21       		.byte	33
 2449 00ee 29       		.byte	41
 2450 00ef 1A       		.byte	26
 2451 00f0 3F       		.byte	63
 2452 00f1 04       		.byte	4
 2453 00f2 04       		.byte	4
 2454 00f3 04       		.byte	4
 2455 00f4 04       		.byte	4
 2456 00f5 3F       		.byte	63
 2457 00f6 21       		.byte	33
 2458 00f7 21       		.byte	33
 2459 00f8 3F       		.byte	63
 2460 00f9 21       		.byte	33
ARM GAS  /tmp/ccJSMaGx.s 			page 78


 2461 00fa 21       		.byte	33
 2462 00fb 21       		.byte	33
 2463 00fc 10       		.byte	16
 2464 00fd 20       		.byte	32
 2465 00fe 20       		.byte	32
 2466 00ff 20       		.byte	32
 2467 0100 20       		.byte	32
 2468 0101 1F       		.byte	31
 2469 0102 3F       		.byte	63
 2470 0103 04       		.byte	4
 2471 0104 0C       		.byte	12
 2472 0105 0A       		.byte	10
 2473 0106 11       		.byte	17
 2474 0107 20       		.byte	32
 2475 0108 3F       		.byte	63
 2476 0109 20       		.byte	32
 2477 010a 20       		.byte	32
 2478 010b 20       		.byte	32
 2479 010c 20       		.byte	32
 2480 010d 20       		.byte	32
 2481 010e 3F       		.byte	63
 2482 010f 02       		.byte	2
 2483 0110 04       		.byte	4
 2484 0111 04       		.byte	4
 2485 0112 02       		.byte	2
 2486 0113 3F       		.byte	63
 2487 0114 3F       		.byte	63
 2488 0115 02       		.byte	2
 2489 0116 04       		.byte	4
 2490 0117 08       		.byte	8
 2491 0118 10       		.byte	16
 2492 0119 3F       		.byte	63
 2493 011a 1E       		.byte	30
 2494 011b 21       		.byte	33
 2495 011c 21       		.byte	33
 2496 011d 21       		.byte	33
 2497 011e 21       		.byte	33
 2498 011f 1E       		.byte	30
 2499 0120 3F       		.byte	63
 2500 0121 09       		.byte	9
 2501 0122 09       		.byte	9
 2502 0123 09       		.byte	9
 2503 0124 09       		.byte	9
 2504 0125 06       		.byte	6
 2505 0126 1E       		.byte	30
 2506 0127 21       		.byte	33
 2507 0128 29       		.byte	41
 2508 0129 31       		.byte	49
 2509 012a 21       		.byte	33
 2510 012b 1E       		.byte	30
 2511 012c 3F       		.byte	63
 2512 012d 09       		.byte	9
 2513 012e 09       		.byte	9
 2514 012f 09       		.byte	9
 2515 0130 19       		.byte	25
 2516 0131 26       		.byte	38
 2517 0132 12       		.byte	18
ARM GAS  /tmp/ccJSMaGx.s 			page 79


 2518 0133 25       		.byte	37
 2519 0134 25       		.byte	37
 2520 0135 25       		.byte	37
 2521 0136 25       		.byte	37
 2522 0137 18       		.byte	24
 2523 0138 01       		.byte	1
 2524 0139 01       		.byte	1
 2525 013a 01       		.byte	1
 2526 013b 3F       		.byte	63
 2527 013c 01       		.byte	1
 2528 013d 01       		.byte	1
 2529 013e 1F       		.byte	31
 2530 013f 20       		.byte	32
 2531 0140 20       		.byte	32
 2532 0141 20       		.byte	32
 2533 0142 20       		.byte	32
 2534 0143 1F       		.byte	31
 2535 0144 0F       		.byte	15
 2536 0145 10       		.byte	16
 2537 0146 20       		.byte	32
 2538 0147 20       		.byte	32
 2539 0148 10       		.byte	16
 2540 0149 0F       		.byte	15
 2541 014a 1F       		.byte	31
 2542 014b 20       		.byte	32
 2543 014c 10       		.byte	16
 2544 014d 10       		.byte	16
 2545 014e 20       		.byte	32
 2546 014f 1F       		.byte	31
 2547 0150 21       		.byte	33
 2548 0151 12       		.byte	18
 2549 0152 0C       		.byte	12
 2550 0153 0C       		.byte	12
 2551 0154 12       		.byte	18
 2552 0155 21       		.byte	33
 2553 0156 01       		.byte	1
 2554 0157 02       		.byte	2
 2555 0158 0C       		.byte	12
 2556 0159 38       		.byte	56
 2557 015a 04       		.byte	4
 2558 015b 02       		.byte	2
 2559 015c 21       		.byte	33
 2560 015d 31       		.byte	49
 2561 015e 29       		.byte	41
 2562 015f 25       		.byte	37
 2563 0160 23       		.byte	35
 2564 0161 21       		.byte	33
 2565 0162 3F       		.byte	63
 2566 0163 21       		.byte	33
 2567 0164 00       		.byte	0
 2568 0165 00       		.byte	0
 2569 0166 00       		.byte	0
 2570 0167 00       		.byte	0
 2571 0168 02       		.byte	2
 2572 0169 04       		.byte	4
 2573 016a 08       		.byte	8
 2574 016b 10       		.byte	16
ARM GAS  /tmp/ccJSMaGx.s 			page 80


 2575 016c 20       		.byte	32
 2576 016d 00       		.byte	0
 2577 016e 21       		.byte	33
 2578 016f 3F       		.byte	63
 2579 0170 00       		.byte	0
 2580 0171 00       		.byte	0
 2581 0172 00       		.byte	0
 2582 0173 00       		.byte	0
 2583 0174 04       		.byte	4
 2584 0175 02       		.byte	2
 2585 0176 3F       		.byte	63
 2586 0177 02       		.byte	2
 2587 0178 04       		.byte	4
 2588 0179 00       		.byte	0
 2589 017a 40       		.byte	64
 2590 017b 40       		.byte	64
 2591 017c 40       		.byte	64
 2592 017d 40       		.byte	64
 2593 017e 40       		.byte	64
 2594 017f 40       		.byte	64
 2595 0180 01       		.byte	1
 2596 0181 02       		.byte	2
 2597 0182 00       		.byte	0
 2598 0183 00       		.byte	0
 2599 0184 00       		.byte	0
 2600 0185 00       		.byte	0
 2601 0186 10       		.byte	16
 2602 0187 30       		.byte	48
 2603 0188 2A       		.byte	42
 2604 0189 2A       		.byte	42
 2605 018a 3C       		.byte	60
 2606 018b 00       		.byte	0
 2607 018c 3F       		.byte	63
 2608 018d 24       		.byte	36
 2609 018e 24       		.byte	36
 2610 018f 24       		.byte	36
 2611 0190 18       		.byte	24
 2612 0191 00       		.byte	0
 2613 0192 0C       		.byte	12
 2614 0193 14       		.byte	20
 2615 0194 22       		.byte	34
 2616 0195 22       		.byte	34
 2617 0196 00       		.byte	0
 2618 0197 00       		.byte	0
 2619 0198 18       		.byte	24
 2620 0199 24       		.byte	36
 2621 019a 24       		.byte	36
 2622 019b 24       		.byte	36
 2623 019c 3F       		.byte	63
 2624 019d 00       		.byte	0
 2625 019e 1C       		.byte	28
 2626 019f 2C       		.byte	44
 2627 01a0 2A       		.byte	42
 2628 01a1 2A       		.byte	42
 2629 01a2 24       		.byte	36
 2630 01a3 00       		.byte	0
 2631 01a4 3E       		.byte	62
ARM GAS  /tmp/ccJSMaGx.s 			page 81


 2632 01a5 05       		.byte	5
 2633 01a6 01       		.byte	1
 2634 01a7 00       		.byte	0
 2635 01a8 00       		.byte	0
 2636 01a9 00       		.byte	0
 2637 01aa 18       		.byte	24
 2638 01ab 28       		.byte	40
 2639 01ac A4       		.byte	-92
 2640 01ad A4       		.byte	-92
 2641 01ae 7C       		.byte	124
 2642 01af 00       		.byte	0
 2643 01b0 3F       		.byte	63
 2644 01b1 04       		.byte	4
 2645 01b2 04       		.byte	4
 2646 01b3 0C       		.byte	12
 2647 01b4 30       		.byte	48
 2648 01b5 00       		.byte	0
 2649 01b6 24       		.byte	36
 2650 01b7 3D       		.byte	61
 2651 01b8 20       		.byte	32
 2652 01b9 00       		.byte	0
 2653 01ba 00       		.byte	0
 2654 01bb 00       		.byte	0
 2655 01bc 20       		.byte	32
 2656 01bd 40       		.byte	64
 2657 01be 40       		.byte	64
 2658 01bf 3D       		.byte	61
 2659 01c0 00       		.byte	0
 2660 01c1 00       		.byte	0
 2661 01c2 3F       		.byte	63
 2662 01c3 0C       		.byte	12
 2663 01c4 12       		.byte	18
 2664 01c5 20       		.byte	32
 2665 01c6 00       		.byte	0
 2666 01c7 00       		.byte	0
 2667 01c8 1F       		.byte	31
 2668 01c9 20       		.byte	32
 2669 01ca 20       		.byte	32
 2670 01cb 00       		.byte	0
 2671 01cc 00       		.byte	0
 2672 01cd 00       		.byte	0
 2673 01ce 3E       		.byte	62
 2674 01cf 02       		.byte	2
 2675 01d0 3C       		.byte	60
 2676 01d1 02       		.byte	2
 2677 01d2 3C       		.byte	60
 2678 01d3 00       		.byte	0
 2679 01d4 3E       		.byte	62
 2680 01d5 02       		.byte	2
 2681 01d6 02       		.byte	2
 2682 01d7 02       		.byte	2
 2683 01d8 3C       		.byte	60
 2684 01d9 00       		.byte	0
 2685 01da 0C       		.byte	12
 2686 01db 14       		.byte	20
 2687 01dc 22       		.byte	34
 2688 01dd 32       		.byte	50
ARM GAS  /tmp/ccJSMaGx.s 			page 82


 2689 01de 0C       		.byte	12
 2690 01df 00       		.byte	0
 2691 01e0 FC       		.byte	-4
 2692 01e1 24       		.byte	36
 2693 01e2 24       		.byte	36
 2694 01e3 24       		.byte	36
 2695 01e4 18       		.byte	24
 2696 01e5 00       		.byte	0
 2697 01e6 18       		.byte	24
 2698 01e7 24       		.byte	36
 2699 01e8 24       		.byte	36
 2700 01e9 24       		.byte	36
 2701 01ea FC       		.byte	-4
 2702 01eb 80       		.byte	-128
 2703 01ec 3C       		.byte	60
 2704 01ed 04       		.byte	4
 2705 01ee 02       		.byte	2
 2706 01ef 02       		.byte	2
 2707 01f0 00       		.byte	0
 2708 01f1 00       		.byte	0
 2709 01f2 24       		.byte	36
 2710 01f3 2C       		.byte	44
 2711 01f4 2A       		.byte	42
 2712 01f5 2A       		.byte	42
 2713 01f6 10       		.byte	16
 2714 01f7 00       		.byte	0
 2715 01f8 02       		.byte	2
 2716 01f9 1F       		.byte	31
 2717 01fa 22       		.byte	34
 2718 01fb 20       		.byte	32
 2719 01fc 00       		.byte	0
 2720 01fd 00       		.byte	0
 2721 01fe 1E       		.byte	30
 2722 01ff 20       		.byte	32
 2723 0200 20       		.byte	32
 2724 0201 20       		.byte	32
 2725 0202 1E       		.byte	30
 2726 0203 00       		.byte	0
 2727 0204 06       		.byte	6
 2728 0205 18       		.byte	24
 2729 0206 20       		.byte	32
 2730 0207 18       		.byte	24
 2731 0208 06       		.byte	6
 2732 0209 00       		.byte	0
 2733 020a 1E       		.byte	30
 2734 020b 30       		.byte	48
 2735 020c 1C       		.byte	28
 2736 020d 30       		.byte	48
 2737 020e 0E       		.byte	14
 2738 020f 00       		.byte	0
 2739 0210 22       		.byte	34
 2740 0211 14       		.byte	20
 2741 0212 08       		.byte	8
 2742 0213 14       		.byte	20
 2743 0214 22       		.byte	34
 2744 0215 00       		.byte	0
 2745 0216 0C       		.byte	12
ARM GAS  /tmp/ccJSMaGx.s 			page 83


 2746 0217 10       		.byte	16
 2747 0218 A0       		.byte	-96
 2748 0219 A0       		.byte	-96
 2749 021a 7C       		.byte	124
 2750 021b 00       		.byte	0
 2751 021c 22       		.byte	34
 2752 021d 32       		.byte	50
 2753 021e 2A       		.byte	42
 2754 021f 26       		.byte	38
 2755 0220 22       		.byte	34
 2756 0221 22       		.byte	34
 2757 0222 0C       		.byte	12
 2758 0223 3F       		.byte	63
 2759 0224 21       		.byte	33
 2760 0225 00       		.byte	0
 2761 0226 00       		.byte	0
 2762 0227 00       		.byte	0
 2763 0228 3F       		.byte	63
 2764 0229 00       		.byte	0
 2765 022a 00       		.byte	0
 2766 022b 00       		.byte	0
 2767 022c 00       		.byte	0
 2768 022d 00       		.byte	0
 2769 022e 21       		.byte	33
 2770 022f 3F       		.byte	63
 2771 0230 0C       		.byte	12
 2772 0231 00       		.byte	0
 2773 0232 00       		.byte	0
 2774 0233 00       		.byte	0
 2775 0234 02       		.byte	2
 2776 0235 01       		.byte	1
 2777 0236 02       		.byte	2
 2778 0237 01       		.byte	1
 2779 0238 00       		.byte	0
 2780 0239 00       		.byte	0
 2781 023a 00       		.byte	0
 2782 023b 00       		.byte	0
 2783 023c 00       		.byte	0
 2784 023d 00       		.byte	0
 2785 023e 00       		.byte	0
 2786 023f 00       		.byte	0
 2787              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2788              		.align	2
 2789              	.LC23:
 2790 0000 64667500 		.ascii	"dfu\000"
 2791              	.LC25:
 2792 0004 4F747465 		.ascii	"Otter-Iron\000"
 2792      722D4972 
 2792      6F6E00
 2793 000f 00       		.space	1
 2794              	.LC27:
 2795 0010 6279204A 		.ascii	"by Jan Henrik\000"
 2795      616E2048 
 2795      656E7269 
 2795      6B00
 2796 001e 0000     		.space	2
 2797              	.LC33:
ARM GAS  /tmp/ccJSMaGx.s 			page 84


 2798 0020 25642043 		.ascii	"%d C\000"
 2798      00
 2799 0025 000000   		.space	3
 2800              	.LC35:
 2801 0028 25642E25 		.ascii	"%d.%d C\000"
 2801      64204300 
 2802              	.LC37:
 2803 0030 25642E25 		.ascii	"%d.%d V\000"
 2803      64205600 
 2804              	.LC39:
 2805 0038 2A00     		.ascii	"*\000"
 2806 003a 0000     		.space	2
 2807              	.LC41:
 2808 003c 2000     		.ascii	" \000"
 2809              		.text
 2810              	.Letext0:
 2811              		.file 4 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machin
 2812              		.file 5 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_s
 2813              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 2814              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 2815              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 2816              		.file 9 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lo
 2817              		.file 10 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_
 2818              		.file 11 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1
 2819              		.file 12 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/r
 2820              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 2821              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 2822              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 2823              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 2824              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 2825              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 2826              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 2827              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 2828              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 2829              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 2830              		.file 23 "Inc/font.h"
 2831              		.file 24 "<built-in>"
 2832              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 2833              		.file 26 "Inc/main.h"
 2834              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 2835              		.file 28 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 2836              		.file 29 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio
ARM GAS  /tmp/ccJSMaGx.s 			page 85


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccJSMaGx.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccJSMaGx.s:100    .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/ccJSMaGx.s:106    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:112    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccJSMaGx.s:154    .text.MX_DMA_Init:000000000000002c $d
     /tmp/ccJSMaGx.s:159    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:165    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/ccJSMaGx.s:297    .text.MX_ADC_Init:00000000000000a0 $d
                            *COM*:000000000000004c hadc
     /tmp/ccJSMaGx.s:304    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:310    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/ccJSMaGx.s:364    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/ccJSMaGx.s:371    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:377    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/ccJSMaGx.s:431    .text.MX_I2C2_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c2
     /tmp/ccJSMaGx.s:438    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:444    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/ccJSMaGx.s:614    .text.MX_TIM1_Init:00000000000000dc $d
                            *COM*:0000000000000040 htim1
     /tmp/ccJSMaGx.s:622    .text.MX_USB_PCD_Init:0000000000000000 $t
     /tmp/ccJSMaGx.s:628    .text.MX_USB_PCD_Init:0000000000000000 MX_USB_PCD_Init
     /tmp/ccJSMaGx.s:667    .text.MX_USB_PCD_Init:0000000000000020 $d
                            *COM*:0000000000000220 hpcd_USB_FS
     /tmp/ccJSMaGx.s:690    .text.reg:0000000000000000 $t
     /tmp/ccJSMaGx.s:697    .text.reg:0000000000000000 reg
     /tmp/ccJSMaGx.s:987    .text.reg:00000000000001d4 $d
                            *COM*:0000000000000018 s
     /tmp/ccJSMaGx.s:1007   .text.disp_init:0000000000000000 $t
     /tmp/ccJSMaGx.s:1014   .text.disp_init:0000000000000000 disp_init
     /tmp/ccJSMaGx.s:1073   .text.disp_init:0000000000000040 $d
                            *COM*:00000000000000da screenBuffer
     /tmp/ccJSMaGx.s:1082   .text.refresh:0000000000000000 $t
     /tmp/ccJSMaGx.s:1089   .text.refresh:0000000000000000 refresh
     /tmp/ccJSMaGx.s:1143   .text.refresh:0000000000000034 $d
     /tmp/ccJSMaGx.s:1150   .text.clear_screen:0000000000000000 $t
     /tmp/ccJSMaGx.s:1157   .text.clear_screen:0000000000000000 clear_screen
     /tmp/ccJSMaGx.s:1180   .text.clear_screen:0000000000000010 $d
     /tmp/ccJSMaGx.s:1185   .text.set_screen:0000000000000000 $t
     /tmp/ccJSMaGx.s:1192   .text.set_screen:0000000000000000 set_screen
     /tmp/ccJSMaGx.s:1215   .text.set_screen:0000000000000010 $d
     /tmp/ccJSMaGx.s:1220   .text.write_pixel:0000000000000000 $t
     /tmp/ccJSMaGx.s:1227   .text.write_pixel:0000000000000000 write_pixel
     /tmp/ccJSMaGx.s:1308   .text.write_pixel:0000000000000068 $d
     /tmp/ccJSMaGx.s:1313   .text.draw_char:0000000000000000 $t
     /tmp/ccJSMaGx.s:1320   .text.draw_char:0000000000000000 draw_char
     /tmp/ccJSMaGx.s:1438   .text.draw_char:0000000000000064 $d
     /tmp/ccJSMaGx.s:2210   .rodata.font:0000000000000000 font
     /tmp/ccJSMaGx.s:1443   .text.draw_string:0000000000000000 $t
     /tmp/ccJSMaGx.s:1450   .text.draw_string:0000000000000000 draw_string
     /tmp/ccJSMaGx.s:1501   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccJSMaGx.s:1508   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccJSMaGx.s:1601   .text.SystemClock_Config:000000000000006c $d
ARM GAS  /tmp/ccJSMaGx.s 			page 86


     /tmp/ccJSMaGx.s:1607   .text.main:0000000000000000 $t
     /tmp/ccJSMaGx.s:1614   .text.main:0000000000000000 main
     /tmp/ccJSMaGx.s:2031   .text.main:0000000000000244 $d
     /tmp/ccJSMaGx.s:2059   .text.Error_Handler:0000000000000000 $t
     /tmp/ccJSMaGx.s:2066   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccJSMaGx.s:2109   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/ccJSMaGx.s:2188   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/ccJSMaGx.s:2180   .data.tipcal:0000000000000000 tipcal
     /tmp/ccJSMaGx.s:2165   .data.r:0000000000000000 r
                            *COM*:0000000000000044 hdma_adc
     /tmp/ccJSMaGx.s:2093   .rodata:0000000000000000 $d
     /tmp/ccJSMaGx.s:2098   .bss.ADC_raw:0000000000000000 $d
     /tmp/ccJSMaGx.s:2102   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/ccJSMaGx.s:2105   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/ccJSMaGx.s:2161   .data.r:0000000000000000 $d
     /tmp/ccJSMaGx.s:2176   .data.tipcal:0000000000000000 $d
     /tmp/ccJSMaGx.s:2184   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/ccJSMaGx.s:2207   .rodata.font:0000000000000000 $d
     /tmp/ccJSMaGx.s:2788   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PCD_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_fcmpge
__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
ARM GAS  /tmp/ccJSMaGx.s 			page 87


__aeabi_f2iz
memcpy
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_f2uiz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
sprintf
