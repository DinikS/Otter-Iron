ARM GAS  /tmp/cc9UFUWX.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB54:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** 
   2:Src/main.c    **** /*
   3:Src/main.c    ****  * Otter-Iron  -  Stm32f072 based soldering iron.
   4:Src/main.c    ****  * Copyright (C) 2019 Jan Henrik Hemsing
   5:Src/main.c    ****  *
   6:Src/main.c    ****  * This program is free software: you can redistribute it and/or modify it
   7:Src/main.c    ****  * under the terms of the GNU General Public License as published by the Free
   8:Src/main.c    ****  * Software Foundation, either version 3 of the License, or (at your option)
   9:Src/main.c    ****  * any later version.
  10:Src/main.c    ****  *
  11:Src/main.c    ****  * This program is distributed in the hope that it will be useful, but WITHOUT
  12:Src/main.c    ****  * ANY WARRANTY; without even the implied warranty of  MERCHANTABILITY or
  13:Src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
  14:Src/main.c    ****  * more details.
  15:Src/main.c    ****  *
  16:Src/main.c    ****  * You should have received a copy of the GNU General Public License along with
  17:Src/main.c    ****  * this program.  If not, see <http://www.gnu.org/licenses/>.
  18:Src/main.c    ****  */
  19:Src/main.c    **** 
  20:Src/main.c    **** #include "main.h"
  21:Src/main.c    **** #include "font.h"
  22:Src/main.c    **** 
  23:Src/main.c    **** #define FILT(a, b, c) ((a) * (c) + (b) * ((1.0f) - (c)))
  24:Src/main.c    **** #define CLAMP(x, low, high) (((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
  25:Src/main.c    **** 
  26:Src/main.c    **** #define TTIP_AVG_FILTER 0.9f
  27:Src/main.c    **** #define MIN_DUTY 0
  28:Src/main.c    **** #define MAX_DUTY 4050
  29:Src/main.c    **** 
  30:Src/main.c    **** ADC_HandleTypeDef hadc;
  31:Src/main.c    **** DMA_HandleTypeDef hdma_adc;
  32:Src/main.c    **** 
  33:Src/main.c    **** I2C_HandleTypeDef hi2c1;
  34:Src/main.c    **** I2C_HandleTypeDef hi2c2;
ARM GAS  /tmp/cc9UFUWX.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** TIM_HandleTypeDef htim1;
  37:Src/main.c    **** 
  38:Src/main.c    **** PCD_HandleTypeDef hpcd_USB_FS;
  39:Src/main.c    **** 
  40:Src/main.c    **** void SystemClock_Config(void);
  41:Src/main.c    **** static void MX_GPIO_Init(void);
  42:Src/main.c    **** static void MX_ADC_Init(void);
  43:Src/main.c    **** static void MX_DMA_Init(void);
  44:Src/main.c    **** static void MX_I2C1_Init(void);
  45:Src/main.c    **** static void MX_I2C2_Init(void);
  46:Src/main.c    **** static void MX_TIM1_Init(void);
  47:Src/main.c    **** static void MX_USB_PCD_Init(void);
  48:Src/main.c    **** 
  49:Src/main.c    **** void reg(void);
  50:Src/main.c    **** void disp_init(void);
  51:Src/main.c    **** void refresh(void);
  52:Src/main.c    **** void clear_screen(void);
  53:Src/main.c    **** void set_screen(void);
  54:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color);
  55:Src/main.c    **** void draw_char(unsigned char  c, uint8_t x, uint8_t y, uint8_t brightness);
  56:Src/main.c    **** void draw_string(const unsigned char * str, uint8_t x, uint8_t y, uint8_t brightness);
  57:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color);
  58:Src/main.c    **** 
  59:Src/main.c    **** struct status_t{
  60:Src/main.c    ****   float ttip;
  61:Src/main.c    ****   float ttipavg;
  62:Src/main.c    ****   float uin;
  63:Src/main.c    ****   float iin;
  64:Src/main.c    ****   float tref;
  65:Src/main.c    ****   uint8_t writeFlash;
  66:Src/main.c    ****   uint8_t button[2];
  67:Src/main.c    **** }s = {.writeFlash = 0};
  68:Src/main.c    **** 
  69:Src/main.c    **** struct reg_t{
  70:Src/main.c    ****   float target;
  71:Src/main.c    ****   float error;
  72:Src/main.c    ****   float errorprior;
  73:Src/main.c    ****   float ierror;
  74:Src/main.c    ****   float imax;
  75:Src/main.c    ****   float derror;
  76:Src/main.c    ****   int16_t duty;
  77:Src/main.c    ****   float cycletime;
  78:Src/main.c    ****   float Kp;
  79:Src/main.c    ****   float Ki;
  80:Src/main.c    ****   float Kd;
  81:Src/main.c    ****   float deadband;
  82:Src/main.c    **** }r = {.Kp = 0.4f,.Ki = 0.05f,.Kd = 0.2f,.cycletime = 0.1f,.imax=200.0f,.target=220.0f,.deadband=12.
  83:Src/main.c    **** 
  84:Src/main.c    **** struct tipcal_t{
  85:Src/main.c    ****   float offset;
  86:Src/main.c    ****   float coefficient;
  87:Src/main.c    **** } tipcal = {.offset = 120, .coefficient = 92};
  88:Src/main.c    **** 
  89:Src/main.c    **** static uint16_t ADC_raw[4];
  90:Src/main.c    **** 
  91:Src/main.c    **** int main(void)
ARM GAS  /tmp/cc9UFUWX.s 			page 3


  92:Src/main.c    **** {
  93:Src/main.c    **** 
  94:Src/main.c    ****   HAL_Init();
  95:Src/main.c    **** 
  96:Src/main.c    ****   SystemClock_Config();
  97:Src/main.c    **** 
  98:Src/main.c    ****   MX_GPIO_Init();
  99:Src/main.c    ****   MX_DMA_Init();
 100:Src/main.c    ****   MX_ADC_Init();
 101:Src/main.c    ****   MX_I2C1_Init();
 102:Src/main.c    ****   MX_I2C2_Init();
 103:Src/main.c    ****   MX_TIM1_Init();
 104:Src/main.c    ****   MX_USB_PCD_Init();
 105:Src/main.c    **** 
 106:Src/main.c    ****   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 107:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 108:Src/main.c    **** 
 109:Src/main.c    ****   HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADC_raw, 4);
 110:Src/main.c    **** 
 111:Src/main.c    ****   HAL_Delay(20);
 112:Src/main.c    ****   disp_init();
 113:Src/main.c    ****   HAL_Delay(60);
 114:Src/main.c    ****   clear_screen();
 115:Src/main.c    ****   // DFU bootloader
 116:Src/main.c    ****   if(HAL_GPIO_ReadPin(GPIOA,B1_Pin) && HAL_GPIO_ReadPin(GPIOA,B2_Pin)){
 117:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 118:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 119:Src/main.c    ****     refresh();
 120:Src/main.c    ****     HAL_Delay(40);
 121:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 122:Src/main.c    ****     NVIC_SystemReset();
 123:Src/main.c    ****   } else {
 124:Src/main.c    ****     draw_string("Otter-Iron", 15, 1 ,1);
 125:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 126:Src/main.c    ****     refresh();
 127:Src/main.c    ****   }
 128:Src/main.c    ****   HAL_Delay(1000);
 129:Src/main.c    **** 
 130:Src/main.c    ****   r.target = *((uint16_t *) 0x0800e400);
 131:Src/main.c    **** 
 132:Src/main.c    ****   while (1)
 133:Src/main.c    ****   {
 134:Src/main.c    ****     HAL_Delay(50);
 135:Src/main.c    **** 
 136:Src/main.c    ****     //UI
 137:Src/main.c    ****     s.button[0] = HAL_GPIO_ReadPin(GPIOA,B1_Pin);
 138:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 139:Src/main.c    **** 
 140:Src/main.c    ****     if(s.button[0] == 1){
 141:Src/main.c    ****       r.target -= 5;
 142:Src/main.c    ****       s.writeFlash = 1;
 143:Src/main.c    ****       HAL_Delay(50);
 144:Src/main.c    ****     }
 145:Src/main.c    **** 
 146:Src/main.c    ****     if(s.button[1] == 1){
 147:Src/main.c    ****       r.target += 5;
 148:Src/main.c    ****       s.writeFlash = 1;
ARM GAS  /tmp/cc9UFUWX.s 			page 4


 149:Src/main.c    ****       HAL_Delay(50);
 150:Src/main.c    ****     }
 151:Src/main.c    **** 
 152:Src/main.c    ****     r.target = CLAMP(r.target, 20, 400);
 153:Src/main.c    **** 
 154:Src/main.c    ****     if(s.writeFlash = 1){
 155:Src/main.c    ****       HAL_FLASH_Unlock();
 156:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 157:Src/main.c    ****       FLASH->AR = 0x0800e400;
 158:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 159:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 160:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 161:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 162:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 163:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
 164:Src/main.c    ****         HAL_FLASH_Lock();
 165:Src/main.c    ****         s.writeFlash = 0;
 166:Src/main.c    ****       }
 167:Src/main.c    ****     }
 168:Src/main.c    **** 
 169:Src/main.c    ****     //super shitty display code
 170:Src/main.c    ****     char str1[10] = "          ";
 171:Src/main.c    ****     char str2[10] = "          ";
 172:Src/main.c    ****     char str3[10] = "          ";
 173:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 174:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 175:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 176:Src/main.c    **** 
 177:Src/main.c    ****     clear_screen();
 178:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 179:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 180:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 181:Src/main.c    **** 
 182:Src/main.c    ****     for(uint16_t i = 0; i <=  CLAMP(r.error*3.0f,0,30); i++){
 183:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 184:Src/main.c    ****     }
 185:Src/main.c    **** 
 186:Src/main.c    ****     refresh();
 187:Src/main.c    ****   }
 188:Src/main.c    **** }
 189:Src/main.c    **** 
 190:Src/main.c    **** // Main PID+two-way controller and ADC readout
 191:Src/main.c    **** void reg(void) {
 192:Src/main.c    **** 
 193:Src/main.c    ****   s.tref = ((((float)ADC_raw[3]/4095.0)*3.3)-0.5)/0.01;
 194:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 195:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 196:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 197:Src/main.c    **** 
 198:Src/main.c    ****   s.ttipavg = FILT(s.ttipavg, s.ttip, TTIP_AVG_FILTER);
 199:Src/main.c    **** 
 200:Src/main.c    ****   // Check if within deadband, decide on two-way or PID control
 201:Src/main.c    ****   if(s.ttipavg >= r.target-r.deadband && s.ttipavg <= r.target+r.deadband){
 202:Src/main.c    ****     r.error = r.target - s.ttipavg;
 203:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 204:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 205:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
ARM GAS  /tmp/cc9UFUWX.s 			page 5


 206:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 207:Src/main.c    ****     r.errorprior = r.error;
 208:Src/main.c    ****   } else {
 209:Src/main.c    ****     if(s.ttipavg <= r.target){
 210:Src/main.c    ****       r.duty = MAX_DUTY;
 211:Src/main.c    ****     } else {
 212:Src/main.c    ****       r.duty = MIN_DUTY;
 213:Src/main.c    ****     }
 214:Src/main.c    ****     r.error = 12.0;
 215:Src/main.c    ****   }
 216:Src/main.c    **** 
 217:Src/main.c    ****   r.duty = CLAMP(r.duty, MIN_DUTY, MAX_DUTY); // Clamp to duty cycle
 218:Src/main.c    **** 
 219:Src/main.c    ****   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, r.duty);
 220:Src/main.c    **** }
 221:Src/main.c    **** 
 222:Src/main.c    **** // init code sequence by Ralim, thanks alot!
 223:Src/main.c    **** #define DEVICEADDR_OLED   (0x3c<<1)
 224:Src/main.c    **** #define OLED_WIDTH        96
 225:Src/main.c    **** #define FRAMEBUFFER_START 17
 226:Src/main.c    **** uint8_t screenBuffer[16 + (OLED_WIDTH * 2) + 10];  // The data buffer
 227:Src/main.c    **** const uint8_t REFRESH_COMMANDS[17] = { 0x80, 0xAF, 0x80, 0x21, 0x80, 0x20, 0x80, 0x7F, 0x80, 0xC0, 
 228:Src/main.c    **** uint8_t OLED_Setup_Array[] = {
 229:Src/main.c    **** 0x80, 0xAE, /*Display off*/
 230:Src/main.c    **** 0x80, 0xD5, /*Set display clock divide ratio / osc freq*/
 231:Src/main.c    **** 0x80, 0x52, /*Divide ratios*/
 232:Src/main.c    **** 0x80, 0xA8, /*Set Multiplex Ratio*/
 233:Src/main.c    **** 0x80, 0x0F, /*16 == max brightness,39==dimmest*/
 234:Src/main.c    **** 0x80, 0xC0, /*Set COM Scan direction*/
 235:Src/main.c    **** 0x80, 0xD3, /*Set vertical Display offset*/
 236:Src/main.c    **** 0x80, 0x00, /*0 Offset*/
 237:Src/main.c    **** 0x80, 0x40, /*Set Display start line to 0*/
 238:Src/main.c    **** 0x80, 0xA0, /*Set Segment remap to normal*/
 239:Src/main.c    **** 0x80, 0x8D, /*Charge Pump*/
 240:Src/main.c    **** 0x80, 0x14, /*Charge Pump settings*/
 241:Src/main.c    **** 0x80, 0xDA, /*Set VCOM Pins hardware config*/
 242:Src/main.c    **** 0x80, 0x02, /*Combination 2*/
 243:Src/main.c    **** 0x80, 0x81, /*Contrast*/
 244:Src/main.c    **** 0x80, 0x33, /*^51*/
 245:Src/main.c    **** 0x80, 0xD9, /*Set pre-charge period*/
 246:Src/main.c    **** 0x80, 0xF1, /*Pre charge period*/
 247:Src/main.c    **** 0x80, 0xDB, /*Adjust VCOMH regulator ouput*/
 248:Src/main.c    **** 0x80, 0x30, /*VCOM level*/
 249:Src/main.c    **** 0x80, 0xA4, /*Enable the display GDDR*/
 250:Src/main.c    **** 0x80, 0XA6, /*Normal display*/
 251:Src/main.c    **** 0x80, 0x20, /*Memory Mode*/
 252:Src/main.c    **** 0x80, 0x00, /*Wrap memory*/
 253:Src/main.c    **** 0x80, 0xAF /*Display on*/
 254:Src/main.c    **** };
 255:Src/main.c    **** //not Ralim anymore
 256:Src/main.c    **** void disp_init(void) {
 257:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 258:Src/main.c    ****   uint16_t _cnt = 0;
 259:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 260:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 261:Src/main.c    **** }
 262:Src/main.c    **** 
ARM GAS  /tmp/cc9UFUWX.s 			page 6


 263:Src/main.c    **** void refresh(void) {
 264:Src/main.c    ****   uint16_t _cnt = 0;
 265:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 266:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 267:Src/main.c    **** }
 268:Src/main.c    **** 
 269:Src/main.c    **** void clear_screen(void) {
 270:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 271:Src/main.c    **** }
 272:Src/main.c    **** void set_screen(void) {
 273:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 274:Src/main.c    **** }
 275:Src/main.c    **** 
 276:Src/main.c    **** void draw_v_line(int16_t x, int16_t y, uint16_t h, uint8_t color){
 277:Src/main.c    ****   for(int i = 0; i <= h; i++){
 278:Src/main.c    ****     write_pixel(x, y+i, color);
 279:Src/main.c    ****   }
 280:Src/main.c    **** }
 281:Src/main.c    **** 
 282:Src/main.c    **** void write_pixel(int16_t x, int16_t y, uint8_t color){
 283:Src/main.c    ****   if(x>95 || y >15){
 284:Src/main.c    ****     return;
 285:Src/main.c    ****   }
 286:Src/main.c    ****   if(color == 1){
 287:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 288:Src/main.c    ****   } else if (color == 0){
 289:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 290:Src/main.c    ****   }
 291:Src/main.c    **** }
 292:Src/main.c    **** 
 293:Src/main.c    **** #define CHAR_WIDTH 6
 294:Src/main.c    **** #define CHAR_HEIGHT 8
 295:Src/main.c    **** void draw_char(unsigned char c, uint8_t x, uint8_t y, uint8_t brightness) {
 296:Src/main.c    ****     c = c & 0x7F;
 297:Src/main.c    ****     if (c < ' ') {
 298:Src/main.c    ****         c = 0;
 299:Src/main.c    ****     } else {
 300:Src/main.c    ****         c -= ' ';
 301:Src/main.c    ****     }
 302:Src/main.c    ****     uint8_t * chr = font[c];
 303:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 304:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 305:Src/main.c    ****             if (chr[j] & (1<<i)) {
 306:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 307:Src/main.c    ****             } else {
 308:Src/main.c    ****                 write_pixel(x+j, y+i, 0);
 309:Src/main.c    ****             }
 310:Src/main.c    ****         }
 311:Src/main.c    ****     }
 312:Src/main.c    **** }
 313:Src/main.c    **** 
 314:Src/main.c    **** void draw_string(const unsigned char* str, uint8_t x, uint8_t y, uint8_t brightness) {
 315:Src/main.c    ****     while (*str) {
 316:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 317:Src/main.c    ****         x += CHAR_WIDTH;
 318:Src/main.c    ****     }
 319:Src/main.c    **** }
ARM GAS  /tmp/cc9UFUWX.s 			page 7


 320:Src/main.c    **** 
 321:Src/main.c    **** void SystemClock_Config(void)
 322:Src/main.c    **** {
 323:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 324:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 325:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 326:Src/main.c    **** 
 327:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 328:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 329:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 330:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 331:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 332:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 333:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 334:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 335:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 336:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 337:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 338:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 339:Src/main.c    **** 
 340:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 341:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 342:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 343:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 344:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 345:Src/main.c    **** 
 346:Src/main.c    ****   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 347:Src/main.c    **** 
 348:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 349:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 350:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 351:Src/main.c    **** 
 352:Src/main.c    ****   HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 353:Src/main.c    **** }
 354:Src/main.c    **** 
 355:Src/main.c    **** static void MX_ADC_Init(void)
 356:Src/main.c    **** {
 357:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 358:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 359:Src/main.c    **** 
 360:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 361:Src/main.c    **** 
 362:Src/main.c    ****   hadc.Instance = ADC1;
 363:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 364:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 365:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 366:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 367:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 368:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 369:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 370:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 371:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 372:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 373:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 374:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 375:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 376:Src/main.c    ****   HAL_ADC_Init(&hadc);
ARM GAS  /tmp/cc9UFUWX.s 			page 8


 377:Src/main.c    **** 
 378:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 379:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 380:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 381:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 382:Src/main.c    **** 
 383:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 384:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 385:Src/main.c    **** 
 386:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_2;
 387:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 388:Src/main.c    **** 
 389:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_5;
 390:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 391:Src/main.c    **** 
 392:Src/main.c    ****   HAL_ADC_MspInit(&hadc);
 393:Src/main.c    **** }
 394:Src/main.c    **** 
 395:Src/main.c    **** static void MX_I2C1_Init(void)
 396:Src/main.c    **** {
 397:Src/main.c    **** 
 398:Src/main.c    ****   hi2c1.Instance = I2C1;
 399:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 400:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 401:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 402:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 403:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 404:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 405:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 406:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 407:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 408:Src/main.c    **** 
 409:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
 410:Src/main.c    **** 
 411:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
 412:Src/main.c    **** }
 413:Src/main.c    **** 
 414:Src/main.c    **** static void MX_I2C2_Init(void)
 415:Src/main.c    **** {
 416:Src/main.c    **** 
 417:Src/main.c    ****   hi2c2.Instance = I2C2;
 418:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 419:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 420:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 421:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 422:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 423:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 424:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 425:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 426:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 427:Src/main.c    **** 
 428:Src/main.c    ****   HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 429:Src/main.c    **** 
 430:Src/main.c    ****   HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 431:Src/main.c    **** }
 432:Src/main.c    **** 
 433:Src/main.c    **** static void MX_TIM1_Init(void)
ARM GAS  /tmp/cc9UFUWX.s 			page 9


 434:Src/main.c    **** {
 435:Src/main.c    **** 
 436:Src/main.c    ****   __HAL_RCC_TIM1_CLK_ENABLE();
 437:Src/main.c    **** 
 438:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 439:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 440:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 441:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 442:Src/main.c    **** 
 443:Src/main.c    ****   htim1.Instance = TIM1;
 444:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 445:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 446:Src/main.c    ****   htim1.Init.Period = 4096;
 447:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 448:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 449:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 450:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 451:Src/main.c    **** 
 452:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 453:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 454:Src/main.c    **** 
 455:Src/main.c    ****   HAL_TIM_PWM_Init(&htim1);
 456:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 457:Src/main.c    **** 
 458:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 459:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 460:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 461:Src/main.c    **** 
 462:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 463:Src/main.c    ****   sConfigOC.Pulse = 50;
 464:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 465:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 466:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 467:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 468:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 469:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 470:Src/main.c    **** 
 471:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM2;
 472:Src/main.c    ****   sConfigOC.Pulse = 4090;
 473:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 474:Src/main.c    **** 
 475:Src/main.c    ****   sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 476:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 477:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 478:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 479:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 480:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 481:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 482:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 483:Src/main.c    **** 
 484:Src/main.c    ****   HAL_TIM_MspPostInit(&htim1);
 485:Src/main.c    **** }
 486:Src/main.c    **** /*
 487:Src/main.c    **** static void MX_TIM2_Init(void)
 488:Src/main.c    **** {
 489:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 490:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/cc9UFUWX.s 			page 10


 491:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 492:Src/main.c    **** 
 493:Src/main.c    ****   htim2.Instance = TIM2;
 494:Src/main.c    ****   htim2.Init.Prescaler = 2096;
 495:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 496:Src/main.c    ****   htim2.Init.Period = 4096;
 497:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 498:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 499:Src/main.c    ****   HAL_TIM_PWM_Init(&htim2);
 500:Src/main.c    **** 
 501:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 502:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 503:Src/main.c    **** 
 504:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 505:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 506:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 507:Src/main.c    **** 
 508:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 509:Src/main.c    ****   sConfigOC.Pulse = 30;
 510:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 511:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 512:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 513:Src/main.c    **** 
 514:Src/main.c    ****   HAL_TIM_MspPostInit(&htim2);
 515:Src/main.c    **** 
 516:Src/main.c    **** }
 517:Src/main.c    **** */
 518:Src/main.c    **** static void MX_USB_PCD_Init(void)
 519:Src/main.c    **** {
 520:Src/main.c    **** 
 521:Src/main.c    ****   hpcd_USB_FS.Instance = USB;
 522:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 523:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 524:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 525:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 526:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 527:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 528:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 529:Src/main.c    **** }
 530:Src/main.c    **** 
 531:Src/main.c    **** static void MX_DMA_Init(void)
 532:Src/main.c    **** {
 533:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 534:Src/main.c    **** 
 535:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 536:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 537:Src/main.c    ****   /*
 538:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 539:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 540:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 541:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 542:Src/main.c    ****   */
 543:Src/main.c    **** 
 544:Src/main.c    **** }
 545:Src/main.c    **** 
 546:Src/main.c    **** static void MX_GPIO_Init(void)
 547:Src/main.c    **** {
ARM GAS  /tmp/cc9UFUWX.s 			page 11


  25              		.loc 1 547 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 00B5     		push	{lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 14, -4
  33 0002 89B0     		sub	sp, sp, #36
  34              	.LCFI1:
  35              		.cfi_def_cfa_offset 40
 548:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  36              		.loc 1 548 0
  37 0004 1022     		movs	r2, #16
  38 0006 0021     		movs	r1, #0
  39 0008 04A8     		add	r0, sp, #16
  40 000a FFF7FEFF 		bl	memset
  41              	.LVL0:
  42              	.LBB8:
 549:Src/main.c    **** 
 550:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  43              		.loc 1 550 0
  44 000e 144B     		ldr	r3, .L2
  45 0010 5969     		ldr	r1, [r3, #20]
  46 0012 8020     		movs	r0, #128
  47 0014 8002     		lsls	r0, r0, #10
  48 0016 0143     		orrs	r1, r0
  49 0018 5961     		str	r1, [r3, #20]
  50 001a 5A69     		ldr	r2, [r3, #20]
  51 001c 0240     		ands	r2, r0
  52 001e 0192     		str	r2, [sp, #4]
  53 0020 019A     		ldr	r2, [sp, #4]
  54              	.LBE8:
  55              	.LBB9:
 551:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  56              		.loc 1 551 0
  57 0022 5A69     		ldr	r2, [r3, #20]
  58 0024 8021     		movs	r1, #128
  59 0026 C902     		lsls	r1, r1, #11
  60 0028 0A43     		orrs	r2, r1
  61 002a 5A61     		str	r2, [r3, #20]
  62 002c 5B69     		ldr	r3, [r3, #20]
  63 002e 0B40     		ands	r3, r1
  64 0030 0293     		str	r3, [sp, #8]
  65 0032 029B     		ldr	r3, [sp, #8]
  66              	.LBE9:
 552:Src/main.c    **** 
 553:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
  67              		.loc 1 553 0
  68 0034 1823     		movs	r3, #24
  69 0036 0393     		str	r3, [sp, #12]
 554:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 555:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  70              		.loc 1 555 0
  71 0038 163B     		subs	r3, r3, #22
  72 003a 0593     		str	r3, [sp, #20]
 556:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
ARM GAS  /tmp/cc9UFUWX.s 			page 12


  73              		.loc 1 556 0
  74 003c 9020     		movs	r0, #144
  75 003e 03A9     		add	r1, sp, #12
  76 0040 C005     		lsls	r0, r0, #23
  77 0042 FFF7FEFF 		bl	HAL_GPIO_Init
  78              	.LVL1:
 557:Src/main.c    **** 
 558:Src/main.c    ****   GPIO_InitStruct.Pin = INT_N_Pin;
  79              		.loc 1 558 0
  80 0046 8023     		movs	r3, #128
  81 0048 5B01     		lsls	r3, r3, #5
  82 004a 0393     		str	r3, [sp, #12]
 559:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  83              		.loc 1 559 0
  84 004c 0023     		movs	r3, #0
  85 004e 0493     		str	r3, [sp, #16]
 560:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  86              		.loc 1 560 0
  87 0050 0593     		str	r3, [sp, #20]
 561:Src/main.c    ****   HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
  88              		.loc 1 561 0
  89 0052 03A9     		add	r1, sp, #12
  90 0054 0348     		ldr	r0, .L2+4
  91 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  92              	.LVL2:
 562:Src/main.c    **** 
 563:Src/main.c    **** }
  93              		.loc 1 563 0
  94 005a 09B0     		add	sp, sp, #36
  95              		@ sp needed
  96 005c 00BD     		pop	{pc}
  97              	.L3:
  98 005e C046     		.align	2
  99              	.L2:
 100 0060 00100240 		.word	1073876992
 101 0064 00040048 		.word	1207960576
 102              		.cfi_endproc
 103              	.LFE54:
 105              		.section	.text.MX_DMA_Init,"ax",%progbits
 106              		.align	1
 107              		.syntax unified
 108              		.code	16
 109              		.thumb_func
 110              		.fpu softvfp
 112              	MX_DMA_Init:
 113              	.LFB53:
 532:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 114              		.loc 1 532 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 8
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 00B5     		push	{lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 14, -4
 122 0002 83B0     		sub	sp, sp, #12
 123              	.LCFI3:
ARM GAS  /tmp/cc9UFUWX.s 			page 13


 124              		.cfi_def_cfa_offset 16
 125              	.LBB10:
 533:Src/main.c    **** 
 126              		.loc 1 533 0
 127 0004 094A     		ldr	r2, .L5
 128 0006 5169     		ldr	r1, [r2, #20]
 129 0008 0123     		movs	r3, #1
 130 000a 1943     		orrs	r1, r3
 131 000c 5161     		str	r1, [r2, #20]
 132 000e 5269     		ldr	r2, [r2, #20]
 133 0010 1340     		ands	r3, r2
 134 0012 0193     		str	r3, [sp, #4]
 135 0014 019B     		ldr	r3, [sp, #4]
 136              	.LBE10:
 535:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 137              		.loc 1 535 0
 138 0016 0022     		movs	r2, #0
 139 0018 0021     		movs	r1, #0
 140 001a 0920     		movs	r0, #9
 141 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 142              	.LVL3:
 536:Src/main.c    ****   /*
 143              		.loc 1 536 0
 144 0020 0920     		movs	r0, #9
 145 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 146              	.LVL4:
 544:Src/main.c    **** 
 147              		.loc 1 544 0
 148 0026 03B0     		add	sp, sp, #12
 149              		@ sp needed
 150 0028 00BD     		pop	{pc}
 151              	.L6:
 152 002a C046     		.align	2
 153              	.L5:
 154 002c 00100240 		.word	1073876992
 155              		.cfi_endproc
 156              	.LFE53:
 158              		.section	.text.MX_ADC_Init,"ax",%progbits
 159              		.align	1
 160              		.syntax unified
 161              		.code	16
 162              		.thumb_func
 163              		.fpu softvfp
 165              	MX_ADC_Init:
 166              	.LFB48:
 356:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 167              		.loc 1 356 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 24
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171 0000 70B5     		push	{r4, r5, r6, lr}
 172              	.LCFI4:
 173              		.cfi_def_cfa_offset 16
 174              		.cfi_offset 4, -16
 175              		.cfi_offset 5, -12
 176              		.cfi_offset 6, -8
 177              		.cfi_offset 14, -4
ARM GAS  /tmp/cc9UFUWX.s 			page 14


 178 0002 86B0     		sub	sp, sp, #24
 179              	.LCFI5:
 180              		.cfi_def_cfa_offset 40
 181              	.LBB11:
 357:Src/main.c    ****   __HAL_RCC_ADC1_CLK_ENABLE();
 182              		.loc 1 357 0
 183 0004 264B     		ldr	r3, .L8
 184 0006 5A69     		ldr	r2, [r3, #20]
 185 0008 0126     		movs	r6, #1
 186 000a 3243     		orrs	r2, r6
 187 000c 5A61     		str	r2, [r3, #20]
 188 000e 5A69     		ldr	r2, [r3, #20]
 189 0010 3240     		ands	r2, r6
 190 0012 0192     		str	r2, [sp, #4]
 191 0014 019A     		ldr	r2, [sp, #4]
 192              	.LBE11:
 193              	.LBB12:
 358:Src/main.c    **** 
 194              		.loc 1 358 0
 195 0016 9A69     		ldr	r2, [r3, #24]
 196 0018 8021     		movs	r1, #128
 197 001a 8900     		lsls	r1, r1, #2
 198 001c 0A43     		orrs	r2, r1
 199 001e 9A61     		str	r2, [r3, #24]
 200 0020 9B69     		ldr	r3, [r3, #24]
 201 0022 0B40     		ands	r3, r1
 202 0024 0293     		str	r3, [sp, #8]
 203 0026 029B     		ldr	r3, [sp, #8]
 204              	.LBE12:
 360:Src/main.c    **** 
 205              		.loc 1 360 0
 206 0028 0C22     		movs	r2, #12
 207 002a 0021     		movs	r1, #0
 208 002c 03A8     		add	r0, sp, #12
 209 002e FFF7FEFF 		bl	memset
 210              	.LVL5:
 362:Src/main.c    ****   hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 211              		.loc 1 362 0
 212 0032 1C4C     		ldr	r4, .L8+4
 213 0034 1C4B     		ldr	r3, .L8+8
 214 0036 2360     		str	r3, [r4]
 363:Src/main.c    ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 215              		.loc 1 363 0
 216 0038 0025     		movs	r5, #0
 217 003a 6560     		str	r5, [r4, #4]
 364:Src/main.c    ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 218              		.loc 1 364 0
 219 003c A560     		str	r5, [r4, #8]
 365:Src/main.c    ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 220              		.loc 1 365 0
 221 003e E560     		str	r5, [r4, #12]
 366:Src/main.c    ****   hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 222              		.loc 1 366 0
 223 0040 2661     		str	r6, [r4, #16]
 367:Src/main.c    ****   hadc.Init.LowPowerAutoWait = DISABLE;
 224              		.loc 1 367 0
 225 0042 0823     		movs	r3, #8
ARM GAS  /tmp/cc9UFUWX.s 			page 15


 226 0044 6361     		str	r3, [r4, #20]
 368:Src/main.c    ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 227              		.loc 1 368 0
 228 0046 A561     		str	r5, [r4, #24]
 369:Src/main.c    ****   hadc.Init.ContinuousConvMode = DISABLE;
 229              		.loc 1 369 0
 230 0048 E561     		str	r5, [r4, #28]
 370:Src/main.c    ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 231              		.loc 1 370 0
 232 004a 2562     		str	r5, [r4, #32]
 371:Src/main.c    ****   hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;//ADC_EXTERNALTRIGCONV_T2_TRGO;
 233              		.loc 1 371 0
 234 004c 6562     		str	r5, [r4, #36]
 372:Src/main.c    ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 235              		.loc 1 372 0
 236 004e 3833     		adds	r3, r3, #56
 237 0050 A362     		str	r3, [r4, #40]
 373:Src/main.c    ****   hadc.Init.DMAContinuousRequests = ENABLE;
 238              		.loc 1 373 0
 239 0052 8023     		movs	r3, #128
 240 0054 DB00     		lsls	r3, r3, #3
 241 0056 E362     		str	r3, [r4, #44]
 374:Src/main.c    ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 242              		.loc 1 374 0
 243 0058 2663     		str	r6, [r4, #48]
 375:Src/main.c    ****   HAL_ADC_Init(&hadc);
 244              		.loc 1 375 0
 245 005a 6663     		str	r6, [r4, #52]
 376:Src/main.c    **** 
 246              		.loc 1 376 0
 247 005c 2000     		movs	r0, r4
 248 005e FFF7FEFF 		bl	HAL_ADC_Init
 249              	.LVL6:
 378:Src/main.c    ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 250              		.loc 1 378 0
 251 0062 0395     		str	r5, [sp, #12]
 379:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 252              		.loc 1 379 0
 253 0064 8023     		movs	r3, #128
 254 0066 5B01     		lsls	r3, r3, #5
 255 0068 0493     		str	r3, [sp, #16]
 380:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 256              		.loc 1 380 0
 257 006a 0235     		adds	r5, r5, #2
 258 006c 0595     		str	r5, [sp, #20]
 381:Src/main.c    **** 
 259              		.loc 1 381 0
 260 006e 03A9     		add	r1, sp, #12
 261 0070 2000     		movs	r0, r4
 262 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 263              	.LVL7:
 383:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 264              		.loc 1 383 0
 265 0076 0396     		str	r6, [sp, #12]
 384:Src/main.c    **** 
 266              		.loc 1 384 0
 267 0078 03A9     		add	r1, sp, #12
ARM GAS  /tmp/cc9UFUWX.s 			page 16


 268 007a 2000     		movs	r0, r4
 269 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 270              	.LVL8:
 386:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 271              		.loc 1 386 0
 272 0080 0395     		str	r5, [sp, #12]
 387:Src/main.c    **** 
 273              		.loc 1 387 0
 274 0082 03A9     		add	r1, sp, #12
 275 0084 2000     		movs	r0, r4
 276 0086 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 277              	.LVL9:
 389:Src/main.c    ****   HAL_ADC_ConfigChannel(&hadc, &sConfig);
 278              		.loc 1 389 0
 279 008a 0523     		movs	r3, #5
 280 008c 0393     		str	r3, [sp, #12]
 390:Src/main.c    **** 
 281              		.loc 1 390 0
 282 008e 03A9     		add	r1, sp, #12
 283 0090 2000     		movs	r0, r4
 284 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 285              	.LVL10:
 392:Src/main.c    **** }
 286              		.loc 1 392 0
 287 0096 2000     		movs	r0, r4
 288 0098 FFF7FEFF 		bl	HAL_ADC_MspInit
 289              	.LVL11:
 393:Src/main.c    **** 
 290              		.loc 1 393 0
 291 009c 06B0     		add	sp, sp, #24
 292              		@ sp needed
 293 009e 70BD     		pop	{r4, r5, r6, pc}
 294              	.L9:
 295              		.align	2
 296              	.L8:
 297 00a0 00100240 		.word	1073876992
 298 00a4 00000000 		.word	hadc
 299 00a8 00240140 		.word	1073816576
 300              		.cfi_endproc
 301              	.LFE48:
 303              		.section	.text.MX_I2C1_Init,"ax",%progbits
 304              		.align	1
 305              		.syntax unified
 306              		.code	16
 307              		.thumb_func
 308              		.fpu softvfp
 310              	MX_I2C1_Init:
 311              	.LFB49:
 396:Src/main.c    **** 
 312              		.loc 1 396 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 10B5     		push	{r4, lr}
 317              	.LCFI6:
 318              		.cfi_def_cfa_offset 8
 319              		.cfi_offset 4, -8
ARM GAS  /tmp/cc9UFUWX.s 			page 17


 320              		.cfi_offset 14, -4
 398:Src/main.c    ****   hi2c1.Init.Timing = 0x2000090E;
 321              		.loc 1 398 0
 322 0002 0D4C     		ldr	r4, .L11
 323 0004 0D4B     		ldr	r3, .L11+4
 324 0006 2360     		str	r3, [r4]
 399:Src/main.c    ****   hi2c1.Init.OwnAddress1 = 0;
 325              		.loc 1 399 0
 326 0008 0D4B     		ldr	r3, .L11+8
 327 000a 6360     		str	r3, [r4, #4]
 400:Src/main.c    ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 328              		.loc 1 400 0
 329 000c 0023     		movs	r3, #0
 330 000e A360     		str	r3, [r4, #8]
 401:Src/main.c    ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 331              		.loc 1 401 0
 332 0010 0122     		movs	r2, #1
 333 0012 E260     		str	r2, [r4, #12]
 402:Src/main.c    ****   hi2c1.Init.OwnAddress2 = 0;
 334              		.loc 1 402 0
 335 0014 2361     		str	r3, [r4, #16]
 403:Src/main.c    ****   hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 336              		.loc 1 403 0
 337 0016 6361     		str	r3, [r4, #20]
 404:Src/main.c    ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 338              		.loc 1 404 0
 339 0018 A361     		str	r3, [r4, #24]
 405:Src/main.c    ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 340              		.loc 1 405 0
 341 001a E361     		str	r3, [r4, #28]
 406:Src/main.c    ****   HAL_I2C_Init(&hi2c1);
 342              		.loc 1 406 0
 343 001c 2362     		str	r3, [r4, #32]
 407:Src/main.c    **** 
 344              		.loc 1 407 0
 345 001e 2000     		movs	r0, r4
 346 0020 FFF7FEFF 		bl	HAL_I2C_Init
 347              	.LVL12:
 409:Src/main.c    **** 
 348              		.loc 1 409 0
 349 0024 0021     		movs	r1, #0
 350 0026 2000     		movs	r0, r4
 351 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 352              	.LVL13:
 411:Src/main.c    **** }
 353              		.loc 1 411 0
 354 002c 0021     		movs	r1, #0
 355 002e 2000     		movs	r0, r4
 356 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 357              	.LVL14:
 412:Src/main.c    **** 
 358              		.loc 1 412 0
 359              		@ sp needed
 360 0034 10BD     		pop	{r4, pc}
 361              	.L12:
 362 0036 C046     		.align	2
 363              	.L11:
ARM GAS  /tmp/cc9UFUWX.s 			page 18


 364 0038 00000000 		.word	hi2c1
 365 003c 00540040 		.word	1073763328
 366 0040 0E090020 		.word	536873230
 367              		.cfi_endproc
 368              	.LFE49:
 370              		.section	.text.MX_I2C2_Init,"ax",%progbits
 371              		.align	1
 372              		.syntax unified
 373              		.code	16
 374              		.thumb_func
 375              		.fpu softvfp
 377              	MX_I2C2_Init:
 378              	.LFB50:
 415:Src/main.c    **** 
 379              		.loc 1 415 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383 0000 10B5     		push	{r4, lr}
 384              	.LCFI7:
 385              		.cfi_def_cfa_offset 8
 386              		.cfi_offset 4, -8
 387              		.cfi_offset 14, -4
 417:Src/main.c    ****   hi2c2.Init.Timing = 0x20303E5D;
 388              		.loc 1 417 0
 389 0002 0D4C     		ldr	r4, .L14
 390 0004 0D4B     		ldr	r3, .L14+4
 391 0006 2360     		str	r3, [r4]
 418:Src/main.c    ****   hi2c2.Init.OwnAddress1 = 0;
 392              		.loc 1 418 0
 393 0008 0D4B     		ldr	r3, .L14+8
 394 000a 6360     		str	r3, [r4, #4]
 419:Src/main.c    ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 395              		.loc 1 419 0
 396 000c 0023     		movs	r3, #0
 397 000e A360     		str	r3, [r4, #8]
 420:Src/main.c    ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 398              		.loc 1 420 0
 399 0010 0122     		movs	r2, #1
 400 0012 E260     		str	r2, [r4, #12]
 421:Src/main.c    ****   hi2c2.Init.OwnAddress2 = 0;
 401              		.loc 1 421 0
 402 0014 2361     		str	r3, [r4, #16]
 422:Src/main.c    ****   hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 403              		.loc 1 422 0
 404 0016 6361     		str	r3, [r4, #20]
 423:Src/main.c    ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 405              		.loc 1 423 0
 406 0018 A361     		str	r3, [r4, #24]
 424:Src/main.c    ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 407              		.loc 1 424 0
 408 001a E361     		str	r3, [r4, #28]
 425:Src/main.c    ****   HAL_I2C_Init(&hi2c2);
 409              		.loc 1 425 0
 410 001c 2362     		str	r3, [r4, #32]
 426:Src/main.c    **** 
 411              		.loc 1 426 0
ARM GAS  /tmp/cc9UFUWX.s 			page 19


 412 001e 2000     		movs	r0, r4
 413 0020 FFF7FEFF 		bl	HAL_I2C_Init
 414              	.LVL15:
 428:Src/main.c    **** 
 415              		.loc 1 428 0
 416 0024 0021     		movs	r1, #0
 417 0026 2000     		movs	r0, r4
 418 0028 FFF7FEFF 		bl	HAL_I2CEx_ConfigAnalogFilter
 419              	.LVL16:
 430:Src/main.c    **** }
 420              		.loc 1 430 0
 421 002c 0021     		movs	r1, #0
 422 002e 2000     		movs	r0, r4
 423 0030 FFF7FEFF 		bl	HAL_I2CEx_ConfigDigitalFilter
 424              	.LVL17:
 431:Src/main.c    **** 
 425              		.loc 1 431 0
 426              		@ sp needed
 427 0034 10BD     		pop	{r4, pc}
 428              	.L15:
 429 0036 C046     		.align	2
 430              	.L14:
 431 0038 00000000 		.word	hi2c2
 432 003c 00580040 		.word	1073764352
 433 0040 5D3E3020 		.word	540032605
 434              		.cfi_endproc
 435              	.LFE50:
 437              		.section	.text.MX_TIM1_Init,"ax",%progbits
 438              		.align	1
 439              		.syntax unified
 440              		.code	16
 441              		.thumb_func
 442              		.fpu softvfp
 444              	MX_TIM1_Init:
 445              	.LFB51:
 434:Src/main.c    **** 
 446              		.loc 1 434 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 88
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450 0000 70B5     		push	{r4, r5, r6, lr}
 451              	.LCFI8:
 452              		.cfi_def_cfa_offset 16
 453              		.cfi_offset 4, -16
 454              		.cfi_offset 5, -12
 455              		.cfi_offset 6, -8
 456              		.cfi_offset 14, -4
 457 0002 96B0     		sub	sp, sp, #88
 458              	.LCFI9:
 459              		.cfi_def_cfa_offset 104
 460              	.LBB13:
 436:Src/main.c    **** 
 461              		.loc 1 436 0
 462 0004 354B     		ldr	r3, .L17
 463 0006 9A69     		ldr	r2, [r3, #24]
 464 0008 8025     		movs	r5, #128
 465 000a 2D01     		lsls	r5, r5, #4
ARM GAS  /tmp/cc9UFUWX.s 			page 20


 466 000c 2A43     		orrs	r2, r5
 467 000e 9A61     		str	r2, [r3, #24]
 468 0010 9B69     		ldr	r3, [r3, #24]
 469 0012 2B40     		ands	r3, r5
 470 0014 0193     		str	r3, [sp, #4]
 471 0016 019B     		ldr	r3, [sp, #4]
 472              	.LBE13:
 438:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 473              		.loc 1 438 0
 474 0018 1022     		movs	r2, #16
 475 001a 0021     		movs	r1, #0
 476 001c 12A8     		add	r0, sp, #72
 477 001e FFF7FEFF 		bl	memset
 478              	.LVL18:
 439:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC = {0};
 479              		.loc 1 439 0
 480 0022 0822     		movs	r2, #8
 481 0024 0021     		movs	r1, #0
 482 0026 10A8     		add	r0, sp, #64
 483 0028 FFF7FEFF 		bl	memset
 484              	.LVL19:
 440:Src/main.c    ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 485              		.loc 1 440 0
 486 002c 1C22     		movs	r2, #28
 487 002e 0021     		movs	r1, #0
 488 0030 09A8     		add	r0, sp, #36
 489 0032 FFF7FEFF 		bl	memset
 490              	.LVL20:
 441:Src/main.c    **** 
 491              		.loc 1 441 0
 492 0036 1C22     		movs	r2, #28
 493 0038 0021     		movs	r1, #0
 494 003a 02A8     		add	r0, sp, #8
 495 003c FFF7FEFF 		bl	memset
 496              	.LVL21:
 443:Src/main.c    ****   htim1.Init.Prescaler = 2048;
 497              		.loc 1 443 0
 498 0040 274C     		ldr	r4, .L17+4
 499 0042 284B     		ldr	r3, .L17+8
 500 0044 2360     		str	r3, [r4]
 444:Src/main.c    ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 501              		.loc 1 444 0
 502 0046 6560     		str	r5, [r4, #4]
 445:Src/main.c    ****   htim1.Init.Period = 4096;
 503              		.loc 1 445 0
 504 0048 0025     		movs	r5, #0
 505 004a A560     		str	r5, [r4, #8]
 446:Src/main.c    ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 506              		.loc 1 446 0
 507 004c 8026     		movs	r6, #128
 508 004e 7601     		lsls	r6, r6, #5
 509 0050 E660     		str	r6, [r4, #12]
 447:Src/main.c    ****   htim1.Init.RepetitionCounter = 0;
 510              		.loc 1 447 0
 511 0052 8023     		movs	r3, #128
 512 0054 9B00     		lsls	r3, r3, #2
 513 0056 2361     		str	r3, [r4, #16]
ARM GAS  /tmp/cc9UFUWX.s 			page 21


 448:Src/main.c    ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 514              		.loc 1 448 0
 515 0058 6561     		str	r5, [r4, #20]
 449:Src/main.c    ****   HAL_TIM_Base_Init(&htim1);
 516              		.loc 1 449 0
 517 005a 813B     		subs	r3, r3, #129
 518 005c FF3B     		subs	r3, r3, #255
 519 005e A361     		str	r3, [r4, #24]
 450:Src/main.c    **** 
 520              		.loc 1 450 0
 521 0060 2000     		movs	r0, r4
 522 0062 FFF7FEFF 		bl	HAL_TIM_Base_Init
 523              	.LVL22:
 452:Src/main.c    ****   HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 524              		.loc 1 452 0
 525 0066 1296     		str	r6, [sp, #72]
 453:Src/main.c    **** 
 526              		.loc 1 453 0
 527 0068 12A9     		add	r1, sp, #72
 528 006a 2000     		movs	r0, r4
 529 006c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 530              	.LVL23:
 455:Src/main.c    ****   HAL_TIM_OC_Init(&htim1);
 531              		.loc 1 455 0
 532 0070 2000     		movs	r0, r4
 533 0072 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 534              	.LVL24:
 456:Src/main.c    **** 
 535              		.loc 1 456 0
 536 0076 2000     		movs	r0, r4
 537 0078 FFF7FEFF 		bl	HAL_TIM_OC_Init
 538              	.LVL25:
 458:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 539              		.loc 1 458 0
 540 007c 1095     		str	r5, [sp, #64]
 459:Src/main.c    ****   HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 541              		.loc 1 459 0
 542 007e 1195     		str	r5, [sp, #68]
 460:Src/main.c    **** 
 543              		.loc 1 460 0
 544 0080 10A9     		add	r1, sp, #64
 545 0082 2000     		movs	r0, r4
 546 0084 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 547              	.LVL26:
 462:Src/main.c    ****   sConfigOC.Pulse = 50;
 548              		.loc 1 462 0
 549 0088 6023     		movs	r3, #96
 550 008a 0993     		str	r3, [sp, #36]
 463:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 551              		.loc 1 463 0
 552 008c 2E3B     		subs	r3, r3, #46
 553 008e 0A93     		str	r3, [sp, #40]
 464:Src/main.c    ****   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 554              		.loc 1 464 0
 555 0090 0B95     		str	r5, [sp, #44]
 465:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 556              		.loc 1 465 0
ARM GAS  /tmp/cc9UFUWX.s 			page 22


 557 0092 0C95     		str	r5, [sp, #48]
 466:Src/main.c    ****   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 558              		.loc 1 466 0
 559 0094 0D95     		str	r5, [sp, #52]
 467:Src/main.c    ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 560              		.loc 1 467 0
 561 0096 0E95     		str	r5, [sp, #56]
 468:Src/main.c    ****   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 562              		.loc 1 468 0
 563 0098 0F95     		str	r5, [sp, #60]
 469:Src/main.c    **** 
 564              		.loc 1 469 0
 565 009a 0022     		movs	r2, #0
 566 009c 09A9     		add	r1, sp, #36
 567 009e 2000     		movs	r0, r4
 568 00a0 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 569              	.LVL27:
 471:Src/main.c    ****   sConfigOC.Pulse = 4090;
 570              		.loc 1 471 0
 571 00a4 7023     		movs	r3, #112
 572 00a6 0993     		str	r3, [sp, #36]
 472:Src/main.c    ****   HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 573              		.loc 1 472 0
 574 00a8 0F4B     		ldr	r3, .L17+12
 575 00aa 0A93     		str	r3, [sp, #40]
 473:Src/main.c    **** 
 576              		.loc 1 473 0
 577 00ac 0C22     		movs	r2, #12
 578 00ae 09A9     		add	r1, sp, #36
 579 00b0 2000     		movs	r0, r4
 580 00b2 FFF7FEFF 		bl	HAL_TIM_OC_ConfigChannel
 581              	.LVL28:
 475:Src/main.c    ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 582              		.loc 1 475 0
 583 00b6 0295     		str	r5, [sp, #8]
 476:Src/main.c    ****   sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 584              		.loc 1 476 0
 585 00b8 0395     		str	r5, [sp, #12]
 477:Src/main.c    ****   sBreakDeadTimeConfig.DeadTime = 0;
 586              		.loc 1 477 0
 587 00ba 0495     		str	r5, [sp, #16]
 478:Src/main.c    ****   sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 588              		.loc 1 478 0
 589 00bc 0595     		str	r5, [sp, #20]
 479:Src/main.c    ****   sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 590              		.loc 1 479 0
 591 00be 0695     		str	r5, [sp, #24]
 480:Src/main.c    ****   sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 592              		.loc 1 480 0
 593 00c0 8023     		movs	r3, #128
 594 00c2 9B01     		lsls	r3, r3, #6
 595 00c4 0793     		str	r3, [sp, #28]
 481:Src/main.c    ****   HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig);
 596              		.loc 1 481 0
 597 00c6 0895     		str	r5, [sp, #32]
 482:Src/main.c    **** 
 598              		.loc 1 482 0
ARM GAS  /tmp/cc9UFUWX.s 			page 23


 599 00c8 02A9     		add	r1, sp, #8
 600 00ca 2000     		movs	r0, r4
 601 00cc FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 602              	.LVL29:
 484:Src/main.c    **** }
 603              		.loc 1 484 0
 604 00d0 2000     		movs	r0, r4
 605 00d2 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 606              	.LVL30:
 485:Src/main.c    **** /*
 607              		.loc 1 485 0
 608 00d6 16B0     		add	sp, sp, #88
 609              		@ sp needed
 610 00d8 70BD     		pop	{r4, r5, r6, pc}
 611              	.L18:
 612 00da C046     		.align	2
 613              	.L17:
 614 00dc 00100240 		.word	1073876992
 615 00e0 00000000 		.word	htim1
 616 00e4 002C0140 		.word	1073818624
 617 00e8 FA0F0000 		.word	4090
 618              		.cfi_endproc
 619              	.LFE51:
 621              		.section	.text.MX_USB_PCD_Init,"ax",%progbits
 622              		.align	1
 623              		.syntax unified
 624              		.code	16
 625              		.thumb_func
 626              		.fpu softvfp
 628              	MX_USB_PCD_Init:
 629              	.LFB52:
 519:Src/main.c    **** 
 630              		.loc 1 519 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634 0000 10B5     		push	{r4, lr}
 635              	.LCFI10:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 4, -8
 638              		.cfi_offset 14, -4
 521:Src/main.c    ****   hpcd_USB_FS.Init.dev_endpoints = 8;
 639              		.loc 1 521 0
 640 0002 0748     		ldr	r0, .L20
 641 0004 074B     		ldr	r3, .L20+4
 642 0006 0360     		str	r3, [r0]
 522:Src/main.c    ****   hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 643              		.loc 1 522 0
 644 0008 0823     		movs	r3, #8
 645 000a 4360     		str	r3, [r0, #4]
 523:Src/main.c    ****   hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 646              		.loc 1 523 0
 647 000c 063B     		subs	r3, r3, #6
 648 000e 8360     		str	r3, [r0, #8]
 524:Src/main.c    ****   hpcd_USB_FS.Init.low_power_enable = DISABLE;
 649              		.loc 1 524 0
 650 0010 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/cc9UFUWX.s 			page 24


 525:Src/main.c    ****   hpcd_USB_FS.Init.lpm_enable = DISABLE;
 651              		.loc 1 525 0
 652 0012 0023     		movs	r3, #0
 653 0014 8361     		str	r3, [r0, #24]
 526:Src/main.c    ****   hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 654              		.loc 1 526 0
 655 0016 C361     		str	r3, [r0, #28]
 527:Src/main.c    ****   HAL_PCD_Init(&hpcd_USB_FS);
 656              		.loc 1 527 0
 657 0018 0362     		str	r3, [r0, #32]
 528:Src/main.c    **** }
 658              		.loc 1 528 0
 659 001a FFF7FEFF 		bl	HAL_PCD_Init
 660              	.LVL31:
 529:Src/main.c    **** 
 661              		.loc 1 529 0
 662              		@ sp needed
 663 001e 10BD     		pop	{r4, pc}
 664              	.L21:
 665              		.align	2
 666              	.L20:
 667 0020 00000000 		.word	hpcd_USB_FS
 668 0024 005C0040 		.word	1073765376
 669              		.cfi_endproc
 670              	.LFE52:
 672              		.global	__aeabi_ui2f
 673              		.global	__aeabi_f2d
 674              		.global	__aeabi_ddiv
 675              		.global	__aeabi_dmul
 676              		.global	__aeabi_dsub
 677              		.global	__aeabi_d2f
 678              		.global	__aeabi_i2f
 679              		.global	__aeabi_fsub
 680              		.global	__aeabi_fmul
 681              		.global	__aeabi_fdiv
 682              		.global	__aeabi_fadd
 683              		.global	__aeabi_i2d
 684              		.global	__aeabi_fcmpge
 685              		.global	__aeabi_fcmple
 686              		.global	__aeabi_fcmpgt
 687              		.global	__aeabi_fcmplt
 688              		.global	__aeabi_f2iz
 689              		.section	.text.reg,"ax",%progbits
 690              		.align	1
 691              		.global	reg
 692              		.syntax unified
 693              		.code	16
 694              		.thumb_func
 695              		.fpu softvfp
 697              	reg:
 698              	.LFB38:
 191:Src/main.c    **** 
 699              		.loc 1 191 0
 700              		.cfi_startproc
 701              		@ args = 0, pretend = 0, frame = 8
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/cc9UFUWX.s 			page 25


 704              	.LCFI11:
 705              		.cfi_def_cfa_offset 20
 706              		.cfi_offset 4, -20
 707              		.cfi_offset 5, -16
 708              		.cfi_offset 6, -12
 709              		.cfi_offset 7, -8
 710              		.cfi_offset 14, -4
 711 0002 C646     		mov	lr, r8
 712 0004 00B5     		push	{lr}
 713              	.LCFI12:
 714              		.cfi_def_cfa_offset 24
 715              		.cfi_offset 8, -24
 716 0006 82B0     		sub	sp, sp, #8
 717              	.LCFI13:
 718              		.cfi_def_cfa_offset 32
 193:Src/main.c    ****   s.ttip = ((ADC_raw[1]-tipcal.offset)*tipcal.coefficient)/1000+s.tref;
 719              		.loc 1 193 0
 720 0008 734D     		ldr	r5, .L41
 721 000a E888     		ldrh	r0, [r5, #6]
 722 000c FFF7FEFF 		bl	__aeabi_ui2f
 723              	.LVL32:
 724 0010 FFF7FEFF 		bl	__aeabi_f2d
 725              	.LVL33:
 726 0014 0022     		movs	r2, #0
 727 0016 714B     		ldr	r3, .L41+4
 728 0018 FFF7FEFF 		bl	__aeabi_ddiv
 729              	.LVL34:
 730 001c 704A     		ldr	r2, .L41+8
 731 001e 714B     		ldr	r3, .L41+12
 732 0020 FFF7FEFF 		bl	__aeabi_dmul
 733              	.LVL35:
 734 0024 0022     		movs	r2, #0
 735 0026 704B     		ldr	r3, .L41+16
 736 0028 FFF7FEFF 		bl	__aeabi_dsub
 737              	.LVL36:
 738 002c 6F4A     		ldr	r2, .L41+20
 739 002e 704B     		ldr	r3, .L41+24
 740 0030 FFF7FEFF 		bl	__aeabi_ddiv
 741              	.LVL37:
 742 0034 FFF7FEFF 		bl	__aeabi_d2f
 743              	.LVL38:
 744 0038 061C     		adds	r6, r0, #0
 745 003a 6E4C     		ldr	r4, .L41+28
 746 003c 2061     		str	r0, [r4, #16]
 194:Src/main.c    ****   s.uin = ((ADC_raw[2]/4095.0)*3.3)*6.6;
 747              		.loc 1 194 0
 748 003e 6888     		ldrh	r0, [r5, #2]
 749 0040 6D4F     		ldr	r7, .L41+32
 750 0042 3B68     		ldr	r3, [r7]
 751 0044 9846     		mov	r8, r3
 752 0046 FFF7FEFF 		bl	__aeabi_i2f
 753              	.LVL39:
 754 004a 4146     		mov	r1, r8
 755 004c FFF7FEFF 		bl	__aeabi_fsub
 756              	.LVL40:
 757 0050 7968     		ldr	r1, [r7, #4]
 758 0052 FFF7FEFF 		bl	__aeabi_fmul
ARM GAS  /tmp/cc9UFUWX.s 			page 26


 759              	.LVL41:
 760 0056 6949     		ldr	r1, .L41+36
 761 0058 FFF7FEFF 		bl	__aeabi_fdiv
 762              	.LVL42:
 763 005c 011C     		adds	r1, r0, #0
 764 005e 301C     		adds	r0, r6, #0
 765 0060 FFF7FEFF 		bl	__aeabi_fadd
 766              	.LVL43:
 767 0064 061C     		adds	r6, r0, #0
 768 0066 2060     		str	r0, [r4]
 195:Src/main.c    ****   s.iin = ((ADC_raw[0]/4095.0)*3.3);
 769              		.loc 1 195 0
 770 0068 A888     		ldrh	r0, [r5, #4]
 771 006a FFF7FEFF 		bl	__aeabi_i2d
 772              	.LVL44:
 773 006e 0022     		movs	r2, #0
 774 0070 5A4B     		ldr	r3, .L41+4
 775 0072 FFF7FEFF 		bl	__aeabi_ddiv
 776              	.LVL45:
 777 0076 5A4A     		ldr	r2, .L41+8
 778 0078 5A4B     		ldr	r3, .L41+12
 779 007a FFF7FEFF 		bl	__aeabi_dmul
 780              	.LVL46:
 781 007e 584A     		ldr	r2, .L41+8
 782 0080 5F4B     		ldr	r3, .L41+40
 783 0082 FFF7FEFF 		bl	__aeabi_dmul
 784              	.LVL47:
 785 0086 FFF7FEFF 		bl	__aeabi_d2f
 786              	.LVL48:
 787 008a A060     		str	r0, [r4, #8]
 196:Src/main.c    **** 
 788              		.loc 1 196 0
 789 008c 2888     		ldrh	r0, [r5]
 790 008e FFF7FEFF 		bl	__aeabi_i2d
 791              	.LVL49:
 792 0092 0022     		movs	r2, #0
 793 0094 514B     		ldr	r3, .L41+4
 794 0096 FFF7FEFF 		bl	__aeabi_ddiv
 795              	.LVL50:
 796 009a 514A     		ldr	r2, .L41+8
 797 009c 514B     		ldr	r3, .L41+12
 798 009e FFF7FEFF 		bl	__aeabi_dmul
 799              	.LVL51:
 800 00a2 FFF7FEFF 		bl	__aeabi_d2f
 801              	.LVL52:
 802 00a6 E060     		str	r0, [r4, #12]
 198:Src/main.c    **** 
 803              		.loc 1 198 0
 804 00a8 5649     		ldr	r1, .L41+44
 805 00aa 6068     		ldr	r0, [r4, #4]
 806 00ac FFF7FEFF 		bl	__aeabi_fmul
 807              	.LVL53:
 808 00b0 051C     		adds	r5, r0, #0
 809 00b2 5549     		ldr	r1, .L41+48
 810 00b4 301C     		adds	r0, r6, #0
 811 00b6 FFF7FEFF 		bl	__aeabi_fmul
 812              	.LVL54:
ARM GAS  /tmp/cc9UFUWX.s 			page 27


 813 00ba 011C     		adds	r1, r0, #0
 814 00bc 281C     		adds	r0, r5, #0
 815 00be FFF7FEFF 		bl	__aeabi_fadd
 816              	.LVL55:
 817 00c2 051C     		adds	r5, r0, #0
 818 00c4 6060     		str	r0, [r4, #4]
 201:Src/main.c    ****     r.error = r.target - s.ttipavg;
 819              		.loc 1 201 0
 820 00c6 514B     		ldr	r3, .L41+52
 821 00c8 1C68     		ldr	r4, [r3]
 822 00ca DE6A     		ldr	r6, [r3, #44]
 823 00cc 311C     		adds	r1, r6, #0
 824 00ce 201C     		adds	r0, r4, #0
 825 00d0 FFF7FEFF 		bl	__aeabi_fsub
 826              	.LVL56:
 827 00d4 011C     		adds	r1, r0, #0
 828 00d6 281C     		adds	r0, r5, #0
 829 00d8 FFF7FEFF 		bl	__aeabi_fcmpge
 830              	.LVL57:
 831 00dc 0028     		cmp	r0, #0
 832 00de 53D0     		beq	.L23
 201:Src/main.c    ****     r.error = r.target - s.ttipavg;
 833              		.loc 1 201 0 is_stmt 0 discriminator 1
 834 00e0 311C     		adds	r1, r6, #0
 835 00e2 201C     		adds	r0, r4, #0
 836 00e4 FFF7FEFF 		bl	__aeabi_fadd
 837              	.LVL58:
 838 00e8 011C     		adds	r1, r0, #0
 839 00ea 281C     		adds	r0, r5, #0
 840 00ec FFF7FEFF 		bl	__aeabi_fcmple
 841              	.LVL59:
 842 00f0 0028     		cmp	r0, #0
 843 00f2 49D0     		beq	.L23
 202:Src/main.c    ****     r.ierror = r.ierror + (r.error*r.cycletime);
 844              		.loc 1 202 0 is_stmt 1
 845 00f4 291C     		adds	r1, r5, #0
 846 00f6 201C     		adds	r0, r4, #0
 847 00f8 FFF7FEFF 		bl	__aeabi_fsub
 848              	.LVL60:
 849 00fc 051C     		adds	r5, r0, #0
 850 00fe 434F     		ldr	r7, .L41+52
 851 0100 7860     		str	r0, [r7, #4]
 203:Src/main.c    ****     r.ierror = CLAMP(r.ierror,-r.imax,r.imax);
 852              		.loc 1 203 0
 853 0102 FC68     		ldr	r4, [r7, #12]
 854 0104 FE69     		ldr	r6, [r7, #28]
 855 0106 311C     		adds	r1, r6, #0
 856 0108 FFF7FEFF 		bl	__aeabi_fmul
 857              	.LVL61:
 858 010c 011C     		adds	r1, r0, #0
 859 010e 201C     		adds	r0, r4, #0
 860 0110 FFF7FEFF 		bl	__aeabi_fadd
 861              	.LVL62:
 862 0114 041C     		adds	r4, r0, #0
 204:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 863              		.loc 1 204 0
 864 0116 3F69     		ldr	r7, [r7, #16]
ARM GAS  /tmp/cc9UFUWX.s 			page 28


 865 0118 391C     		adds	r1, r7, #0
 866 011a FFF7FEFF 		bl	__aeabi_fcmpgt
 867              	.LVL63:
 868 011e 0028     		cmp	r0, #0
 869 0120 09D1     		bne	.L26
 204:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 870              		.loc 1 204 0 is_stmt 0 discriminator 2
 871 0122 8023     		movs	r3, #128
 872 0124 1B06     		lsls	r3, r3, #24
 873 0126 F918     		adds	r1, r7, r3
 874 0128 0F1C     		adds	r7, r1, #0
 875 012a 201C     		adds	r0, r4, #0
 876 012c FFF7FEFF 		bl	__aeabi_fcmplt
 877              	.LVL64:
 878 0130 0028     		cmp	r0, #0
 879 0132 00D1     		bne	.L26
 880 0134 271C     		adds	r7, r4, #0
 881              	.L26:
 204:Src/main.c    ****     r.derror = (r.error - r.errorprior)/r.cycletime;
 882              		.loc 1 204 0 discriminator 8
 883 0136 354C     		ldr	r4, .L41+52
 884 0138 E760     		str	r7, [r4, #12]
 205:Src/main.c    ****     r.duty = (r.Kp*r.error + r.Ki*r.ierror + r.Kd*r.derror)*MAX_DUTY;
 885              		.loc 1 205 0 is_stmt 1 discriminator 8
 886 013a A168     		ldr	r1, [r4, #8]
 887 013c 281C     		adds	r0, r5, #0
 888 013e FFF7FEFF 		bl	__aeabi_fsub
 889              	.LVL65:
 890 0142 311C     		adds	r1, r6, #0
 891 0144 FFF7FEFF 		bl	__aeabi_fdiv
 892              	.LVL66:
 893 0148 061C     		adds	r6, r0, #0
 894 014a 6061     		str	r0, [r4, #20]
 206:Src/main.c    ****     r.errorprior = r.error;
 895              		.loc 1 206 0 discriminator 8
 896 014c 216A     		ldr	r1, [r4, #32]
 897 014e 281C     		adds	r0, r5, #0
 898 0150 FFF7FEFF 		bl	__aeabi_fmul
 899              	.LVL67:
 900 0154 0190     		str	r0, [sp, #4]
 901 0156 391C     		adds	r1, r7, #0
 902 0158 606A     		ldr	r0, [r4, #36]
 903 015a FFF7FEFF 		bl	__aeabi_fmul
 904              	.LVL68:
 905 015e 011C     		adds	r1, r0, #0
 906 0160 0198     		ldr	r0, [sp, #4]
 907 0162 FFF7FEFF 		bl	__aeabi_fadd
 908              	.LVL69:
 909 0166 071C     		adds	r7, r0, #0
 910 0168 A16A     		ldr	r1, [r4, #40]
 911 016a 301C     		adds	r0, r6, #0
 912 016c FFF7FEFF 		bl	__aeabi_fmul
 913              	.LVL70:
 914 0170 011C     		adds	r1, r0, #0
 915 0172 381C     		adds	r0, r7, #0
 916 0174 FFF7FEFF 		bl	__aeabi_fadd
 917              	.LVL71:
ARM GAS  /tmp/cc9UFUWX.s 			page 29


 918 0178 2549     		ldr	r1, .L41+56
 919 017a FFF7FEFF 		bl	__aeabi_fmul
 920              	.LVL72:
 921 017e FFF7FEFF 		bl	__aeabi_f2iz
 922              	.LVL73:
 923 0182 2083     		strh	r0, [r4, #24]
 207:Src/main.c    ****   } else {
 924              		.loc 1 207 0 discriminator 8
 925 0184 A560     		str	r5, [r4, #8]
 926 0186 0BE0     		b	.L28
 927              	.L23:
 209:Src/main.c    ****       r.duty = MAX_DUTY;
 928              		.loc 1 209 0
 929 0188 211C     		adds	r1, r4, #0
 930 018a 281C     		adds	r0, r5, #0
 931 018c FFF7FEFF 		bl	__aeabi_fcmple
 932              	.LVL74:
 933 0190 0028     		cmp	r0, #0
 934 0192 18D0     		beq	.L39
 210:Src/main.c    ****     } else {
 935              		.loc 1 210 0
 936 0194 1D4B     		ldr	r3, .L41+52
 937 0196 1F4A     		ldr	r2, .L41+60
 938 0198 1A83     		strh	r2, [r3, #24]
 939              	.L31:
 214:Src/main.c    ****   }
 940              		.loc 1 214 0
 941 019a 1C4B     		ldr	r3, .L41+52
 942 019c 1E4A     		ldr	r2, .L41+64
 943 019e 5A60     		str	r2, [r3, #4]
 944              	.L28:
 217:Src/main.c    **** 
 945              		.loc 1 217 0
 946 01a0 1A4B     		ldr	r3, .L41+52
 947 01a2 1822     		movs	r2, #24
 948 01a4 9A5E     		ldrsh	r2, [r3, r2]
 949 01a6 1B4B     		ldr	r3, .L41+60
 950 01a8 9A42     		cmp	r2, r3
 951 01aa 12DC     		bgt	.L35
 217:Src/main.c    **** 
 952              		.loc 1 217 0 is_stmt 0 discriminator 1
 953 01ac 131C     		adds	r3, r2, #0
 954 01ae 002A     		cmp	r2, #0
 955 01b0 0DDB     		blt	.L40
 956              	.L33:
 957 01b2 1BB2     		sxth	r3, r3
 958              	.L32:
 217:Src/main.c    **** 
 959              		.loc 1 217 0 discriminator 4
 960 01b4 154A     		ldr	r2, .L41+52
 961 01b6 1383     		strh	r3, [r2, #24]
 219:Src/main.c    **** }
 962              		.loc 1 219 0 is_stmt 1 discriminator 4
 963 01b8 184A     		ldr	r2, .L41+68
 964 01ba 1268     		ldr	r2, [r2]
 965 01bc 5363     		str	r3, [r2, #52]
 220:Src/main.c    **** 
ARM GAS  /tmp/cc9UFUWX.s 			page 30


 966              		.loc 1 220 0 discriminator 4
 967 01be 02B0     		add	sp, sp, #8
 968              		@ sp needed
 969 01c0 04BC     		pop	{r2}
 970 01c2 9046     		mov	r8, r2
 971 01c4 F0BD     		pop	{r4, r5, r6, r7, pc}
 972              	.L39:
 212:Src/main.c    ****     }
 973              		.loc 1 212 0
 974 01c6 114B     		ldr	r3, .L41+52
 975 01c8 0022     		movs	r2, #0
 976 01ca 1A83     		strh	r2, [r3, #24]
 977 01cc E5E7     		b	.L31
 978              	.L40:
 217:Src/main.c    **** 
 979              		.loc 1 217 0 discriminator 1
 980 01ce 0023     		movs	r3, #0
 981 01d0 EFE7     		b	.L33
 982              	.L35:
 217:Src/main.c    **** 
 983              		.loc 1 217 0 is_stmt 0
 984 01d2 104B     		ldr	r3, .L41+60
 985 01d4 EEE7     		b	.L32
 986              	.L42:
 987 01d6 C046     		.align	2
 988              	.L41:
 989 01d8 00000000 		.word	.LANCHOR0
 990 01dc 00FEAF40 		.word	1085275648
 991 01e0 66666666 		.word	1717986918
 992 01e4 66660A40 		.word	1074423398
 993 01e8 0000E03F 		.word	1071644672
 994 01ec 7B14AE47 		.word	1202590843
 995 01f0 E17A843F 		.word	1065646817
 996 01f4 00000000 		.word	.LANCHOR1
 997 01f8 00000000 		.word	.LANCHOR2
 998 01fc 00007A44 		.word	1148846080
 999 0200 66661A40 		.word	1075471974
 1000 0204 6666663F 		.word	1063675494
 1001 0208 D0CCCC3D 		.word	1036831952
 1002 020c 00000000 		.word	.LANCHOR3
 1003 0210 00207D45 		.word	1165828096
 1004 0214 D20F0000 		.word	4050
 1005 0218 00004041 		.word	1094713344
 1006 021c 00000000 		.word	htim1
 1007              		.cfi_endproc
 1008              	.LFE38:
 1010              		.section	.text.disp_init,"ax",%progbits
 1011              		.align	1
 1012              		.global	disp_init
 1013              		.syntax unified
 1014              		.code	16
 1015              		.thumb_func
 1016              		.fpu softvfp
 1018              	disp_init:
 1019              	.LFB39:
 256:Src/main.c    ****   memcpy(&screenBuffer[0], &REFRESH_COMMANDS[0], sizeof(REFRESH_COMMANDS));
 1020              		.loc 1 256 0 is_stmt 1
ARM GAS  /tmp/cc9UFUWX.s 			page 31


 1021              		.cfi_startproc
 1022              		@ args = 0, pretend = 0, frame = 0
 1023              		@ frame_needed = 0, uses_anonymous_args = 0
 1024 0000 10B5     		push	{r4, lr}
 1025              	.LCFI14:
 1026              		.cfi_def_cfa_offset 8
 1027              		.cfi_offset 4, -8
 1028              		.cfi_offset 14, -4
 1029 0002 82B0     		sub	sp, sp, #8
 1030              	.LCFI15:
 1031              		.cfi_def_cfa_offset 16
 257:Src/main.c    ****   uint16_t _cnt = 0;
 1032              		.loc 1 257 0
 1033 0004 1122     		movs	r2, #17
 1034 0006 0E49     		ldr	r1, .L47
 1035 0008 0E48     		ldr	r0, .L47+4
 1036 000a FFF7FEFF 		bl	memcpy
 1037              	.LVL75:
 258:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1038              		.loc 1 258 0
 1039 000e 0024     		movs	r4, #0
 1040              	.LVL76:
 1041              	.L44:
 259:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1042              		.loc 1 259 0 discriminator 1
 1043 0010 0D48     		ldr	r0, .L47+8
 1044 0012 FFF7FEFF 		bl	HAL_I2C_GetState
 1045              	.LVL77:
 1046 0016 2028     		cmp	r0, #32
 1047 0018 06D0     		beq	.L45
 259:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1048              		.loc 1 259 0 is_stmt 0 discriminator 2
 1049 001a 631C     		adds	r3, r4, #1
 1050 001c 9BB2     		uxth	r3, r3
 1051              	.LVL78:
 1052 001e 0B4A     		ldr	r2, .L47+12
 1053 0020 9442     		cmp	r4, r2
 1054 0022 01D8     		bhi	.L45
 259:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, &OLED_Setup_Array[0],sizeof(OLED_Setup_Array),100
 1055              		.loc 1 259 0
 1056 0024 1C00     		movs	r4, r3
 1057 0026 F3E7     		b	.L44
 1058              	.LVL79:
 1059              	.L45:
 260:Src/main.c    **** }
 1060              		.loc 1 260 0 is_stmt 1
 1061 0028 FA23     		movs	r3, #250
 1062 002a 9B00     		lsls	r3, r3, #2
 1063 002c 0093     		str	r3, [sp]
 1064 002e 3223     		movs	r3, #50
 1065 0030 074A     		ldr	r2, .L47+16
 1066 0032 7821     		movs	r1, #120
 1067 0034 0448     		ldr	r0, .L47+8
 1068 0036 FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1069              	.LVL80:
 261:Src/main.c    **** 
 1070              		.loc 1 261 0
ARM GAS  /tmp/cc9UFUWX.s 			page 32


 1071 003a 02B0     		add	sp, sp, #8
 1072              		@ sp needed
 1073 003c 10BD     		pop	{r4, pc}
 1074              	.L48:
 1075 003e C046     		.align	2
 1076              	.L47:
 1077 0040 00000000 		.word	.LANCHOR4
 1078 0044 00000000 		.word	screenBuffer
 1079 0048 00000000 		.word	hi2c1
 1080 004c 10270000 		.word	10000
 1081 0050 00000000 		.word	.LANCHOR5
 1082              		.cfi_endproc
 1083              	.LFE39:
 1085              		.section	.text.refresh,"ax",%progbits
 1086              		.align	1
 1087              		.global	refresh
 1088              		.syntax unified
 1089              		.code	16
 1090              		.thumb_func
 1091              		.fpu softvfp
 1093              	refresh:
 1094              	.LFB40:
 263:Src/main.c    ****   uint16_t _cnt = 0;
 1095              		.loc 1 263 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099 0000 10B5     		push	{r4, lr}
 1100              	.LCFI16:
 1101              		.cfi_def_cfa_offset 8
 1102              		.cfi_offset 4, -8
 1103              		.cfi_offset 14, -4
 1104 0002 82B0     		sub	sp, sp, #8
 1105              	.LCFI17:
 1106              		.cfi_def_cfa_offset 16
 1107              	.LVL81:
 264:Src/main.c    ****   while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) if (_cnt++ > 10000) break;
 1108              		.loc 1 264 0
 1109 0004 0024     		movs	r4, #0
 1110              	.LVL82:
 1111              	.L50:
 265:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1112              		.loc 1 265 0 discriminator 1
 1113 0006 0B48     		ldr	r0, .L53
 1114 0008 FFF7FEFF 		bl	HAL_I2C_GetState
 1115              	.LVL83:
 1116 000c 2028     		cmp	r0, #32
 1117 000e 06D0     		beq	.L51
 265:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
 1118              		.loc 1 265 0 is_stmt 0 discriminator 2
 1119 0010 631C     		adds	r3, r4, #1
 1120 0012 9BB2     		uxth	r3, r3
 1121              	.LVL84:
 1122 0014 084A     		ldr	r2, .L53+4
 1123 0016 9442     		cmp	r4, r2
 1124 0018 01D8     		bhi	.L51
 265:Src/main.c    ****   HAL_I2C_Master_Transmit(&hi2c1,DEVICEADDR_OLED, screenBuffer,FRAMEBUFFER_START + (OLED_WIDTH * 2)
ARM GAS  /tmp/cc9UFUWX.s 			page 33


 1125              		.loc 1 265 0
 1126 001a 1C00     		movs	r4, r3
 1127 001c F3E7     		b	.L50
 1128              	.LVL85:
 1129              	.L51:
 266:Src/main.c    **** }
 1130              		.loc 1 266 0 is_stmt 1
 1131 001e FA23     		movs	r3, #250
 1132 0020 9B00     		lsls	r3, r3, #2
 1133 0022 0093     		str	r3, [sp]
 1134 0024 D123     		movs	r3, #209
 1135 0026 054A     		ldr	r2, .L53+8
 1136 0028 7821     		movs	r1, #120
 1137 002a 0248     		ldr	r0, .L53
 1138 002c FFF7FEFF 		bl	HAL_I2C_Master_Transmit
 1139              	.LVL86:
 267:Src/main.c    **** 
 1140              		.loc 1 267 0
 1141 0030 02B0     		add	sp, sp, #8
 1142              		@ sp needed
 1143 0032 10BD     		pop	{r4, pc}
 1144              	.L54:
 1145              		.align	2
 1146              	.L53:
 1147 0034 00000000 		.word	hi2c1
 1148 0038 10270000 		.word	10000
 1149 003c 00000000 		.word	screenBuffer
 1150              		.cfi_endproc
 1151              	.LFE40:
 1153              		.section	.text.clear_screen,"ax",%progbits
 1154              		.align	1
 1155              		.global	clear_screen
 1156              		.syntax unified
 1157              		.code	16
 1158              		.thumb_func
 1159              		.fpu softvfp
 1161              	clear_screen:
 1162              	.LFB41:
 269:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 0, OLED_WIDTH * 2);
 1163              		.loc 1 269 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 0
 1166              		@ frame_needed = 0, uses_anonymous_args = 0
 1167 0000 10B5     		push	{r4, lr}
 1168              	.LCFI18:
 1169              		.cfi_def_cfa_offset 8
 1170              		.cfi_offset 4, -8
 1171              		.cfi_offset 14, -4
 270:Src/main.c    **** }
 1172              		.loc 1 270 0
 1173 0002 C022     		movs	r2, #192
 1174 0004 0021     		movs	r1, #0
 1175 0006 0248     		ldr	r0, .L56
 1176 0008 FFF7FEFF 		bl	memset
 1177              	.LVL87:
 271:Src/main.c    **** void set_screen(void) {
 1178              		.loc 1 271 0
ARM GAS  /tmp/cc9UFUWX.s 			page 34


 1179              		@ sp needed
 1180 000c 10BD     		pop	{r4, pc}
 1181              	.L57:
 1182 000e C046     		.align	2
 1183              	.L56:
 1184 0010 11000000 		.word	screenBuffer+17
 1185              		.cfi_endproc
 1186              	.LFE41:
 1188              		.section	.text.set_screen,"ax",%progbits
 1189              		.align	1
 1190              		.global	set_screen
 1191              		.syntax unified
 1192              		.code	16
 1193              		.thumb_func
 1194              		.fpu softvfp
 1196              	set_screen:
 1197              	.LFB42:
 272:Src/main.c    ****   memset(&screenBuffer[FRAMEBUFFER_START], 255, OLED_WIDTH * 2);
 1198              		.loc 1 272 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202 0000 10B5     		push	{r4, lr}
 1203              	.LCFI19:
 1204              		.cfi_def_cfa_offset 8
 1205              		.cfi_offset 4, -8
 1206              		.cfi_offset 14, -4
 273:Src/main.c    **** }
 1207              		.loc 1 273 0
 1208 0002 C022     		movs	r2, #192
 1209 0004 FF21     		movs	r1, #255
 1210 0006 0248     		ldr	r0, .L59
 1211 0008 FFF7FEFF 		bl	memset
 1212              	.LVL88:
 274:Src/main.c    **** 
 1213              		.loc 1 274 0
 1214              		@ sp needed
 1215 000c 10BD     		pop	{r4, pc}
 1216              	.L60:
 1217 000e C046     		.align	2
 1218              	.L59:
 1219 0010 11000000 		.word	screenBuffer+17
 1220              		.cfi_endproc
 1221              	.LFE42:
 1223              		.section	.text.write_pixel,"ax",%progbits
 1224              		.align	1
 1225              		.global	write_pixel
 1226              		.syntax unified
 1227              		.code	16
 1228              		.thumb_func
 1229              		.fpu softvfp
 1231              	write_pixel:
 1232              	.LFB44:
 282:Src/main.c    ****   if(x>95 || y >15){
 1233              		.loc 1 282 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc9UFUWX.s 			page 35


 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237              	.LVL89:
 1238 0000 30B5     		push	{r4, r5, lr}
 1239              	.LCFI20:
 1240              		.cfi_def_cfa_offset 12
 1241              		.cfi_offset 4, -12
 1242              		.cfi_offset 5, -8
 1243              		.cfi_offset 14, -4
 283:Src/main.c    ****     return;
 1244              		.loc 1 283 0
 1245 0002 5F28     		cmp	r0, #95
 1246 0004 1BDC     		bgt	.L61
 283:Src/main.c    ****     return;
 1247              		.loc 1 283 0 is_stmt 0 discriminator 1
 1248 0006 0F29     		cmp	r1, #15
 1249 0008 19DC     		bgt	.L61
 286:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] |=  (1 << y % 8);
 1250              		.loc 1 286 0 is_stmt 1
 1251 000a 012A     		cmp	r2, #1
 1252 000c 18D0     		beq	.L64
 288:Src/main.c    ****     screenBuffer[FRAMEBUFFER_START + (x + ((y/8)*96))] &= ~(1 << y % 8);
 1253              		.loc 1 288 0
 1254 000e 002A     		cmp	r2, #0
 1255 0010 15D1     		bne	.L61
 289:Src/main.c    ****   }
 1256              		.loc 1 289 0
 1257 0012 CC17     		asrs	r4, r1, #31
 1258 0014 0723     		movs	r3, #7
 1259 0016 1A00     		movs	r2, r3
 1260              	.LVL90:
 1261 0018 2240     		ands	r2, r4
 1262 001a 5218     		adds	r2, r2, r1
 1263 001c D210     		asrs	r2, r2, #3
 1264 001e 5500     		lsls	r5, r2, #1
 1265 0020 AA18     		adds	r2, r5, r2
 1266 0022 5501     		lsls	r5, r2, #5
 1267 0024 2818     		adds	r0, r5, r0
 1268              	.LVL91:
 1269 0026 1130     		adds	r0, r0, #17
 1270 0028 640F     		lsrs	r4, r4, #29
 1271 002a 0919     		adds	r1, r1, r4
 1272              	.LVL92:
 1273 002c 1940     		ands	r1, r3
 1274 002e 091B     		subs	r1, r1, r4
 1275 0030 09B2     		sxth	r1, r1
 1276 0032 0122     		movs	r2, #1
 1277 0034 8A40     		lsls	r2, r2, r1
 1278 0036 0E49     		ldr	r1, .L65
 1279 0038 0B5C     		ldrb	r3, [r1, r0]
 1280 003a 9343     		bics	r3, r2
 1281 003c 0B54     		strb	r3, [r1, r0]
 1282              	.L61:
 291:Src/main.c    **** 
 1283              		.loc 1 291 0
 1284              		@ sp needed
 1285 003e 30BD     		pop	{r4, r5, pc}
 1286              	.LVL93:
ARM GAS  /tmp/cc9UFUWX.s 			page 36


 1287              	.L64:
 287:Src/main.c    ****   } else if (color == 0){
 1288              		.loc 1 287 0
 1289 0040 CC17     		asrs	r4, r1, #31
 1290 0042 0723     		movs	r3, #7
 1291 0044 1A00     		movs	r2, r3
 1292              	.LVL94:
 1293 0046 2240     		ands	r2, r4
 1294 0048 5218     		adds	r2, r2, r1
 1295 004a D210     		asrs	r2, r2, #3
 1296 004c 5500     		lsls	r5, r2, #1
 1297 004e AA18     		adds	r2, r5, r2
 1298 0050 5501     		lsls	r5, r2, #5
 1299 0052 2818     		adds	r0, r5, r0
 1300              	.LVL95:
 1301 0054 1130     		adds	r0, r0, #17
 1302 0056 640F     		lsrs	r4, r4, #29
 1303 0058 0919     		adds	r1, r1, r4
 1304              	.LVL96:
 1305 005a 0B40     		ands	r3, r1
 1306 005c 1B1B     		subs	r3, r3, r4
 1307 005e 1BB2     		sxth	r3, r3
 1308 0060 0122     		movs	r2, #1
 1309 0062 9A40     		lsls	r2, r2, r3
 1310 0064 0249     		ldr	r1, .L65
 1311 0066 0B5C     		ldrb	r3, [r1, r0]
 1312 0068 1343     		orrs	r3, r2
 1313 006a 0B54     		strb	r3, [r1, r0]
 1314 006c E7E7     		b	.L61
 1315              	.L66:
 1316 006e C046     		.align	2
 1317              	.L65:
 1318 0070 00000000 		.word	screenBuffer
 1319              		.cfi_endproc
 1320              	.LFE44:
 1322              		.section	.text.draw_v_line,"ax",%progbits
 1323              		.align	1
 1324              		.global	draw_v_line
 1325              		.syntax unified
 1326              		.code	16
 1327              		.thumb_func
 1328              		.fpu softvfp
 1330              	draw_v_line:
 1331              	.LFB43:
 276:Src/main.c    ****   for(int i = 0; i <= h; i++){
 1332              		.loc 1 276 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 8
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL97:
 1337 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1338              	.LCFI21:
 1339              		.cfi_def_cfa_offset 20
 1340              		.cfi_offset 4, -20
 1341              		.cfi_offset 5, -16
 1342              		.cfi_offset 6, -12
 1343              		.cfi_offset 7, -8
ARM GAS  /tmp/cc9UFUWX.s 			page 37


 1344              		.cfi_offset 14, -4
 1345 0002 83B0     		sub	sp, sp, #12
 1346              	.LCFI22:
 1347              		.cfi_def_cfa_offset 32
 1348 0004 0600     		movs	r6, r0
 1349 0006 0D00     		movs	r5, r1
 1350 0008 1700     		movs	r7, r2
 1351 000a 0193     		str	r3, [sp, #4]
 1352              	.LVL98:
 1353              	.LBB14:
 277:Src/main.c    ****     write_pixel(x, y+i, color);
 1354              		.loc 1 277 0
 1355 000c 0024     		movs	r4, #0
 1356 000e 06E0     		b	.L68
 1357              	.LVL99:
 1358              	.L69:
 278:Src/main.c    ****   }
 1359              		.loc 1 278 0 discriminator 3
 1360 0010 6119     		adds	r1, r4, r5
 1361 0012 09B2     		sxth	r1, r1
 1362 0014 019A     		ldr	r2, [sp, #4]
 1363 0016 3000     		movs	r0, r6
 1364 0018 FFF7FEFF 		bl	write_pixel
 1365              	.LVL100:
 277:Src/main.c    ****     write_pixel(x, y+i, color);
 1366              		.loc 1 277 0 discriminator 3
 1367 001c 0134     		adds	r4, r4, #1
 1368              	.LVL101:
 1369              	.L68:
 277:Src/main.c    ****     write_pixel(x, y+i, color);
 1370              		.loc 1 277 0 is_stmt 0 discriminator 1
 1371 001e A742     		cmp	r7, r4
 1372 0020 F6DA     		bge	.L69
 1373              	.LBE14:
 280:Src/main.c    **** 
 1374              		.loc 1 280 0 is_stmt 1
 1375 0022 03B0     		add	sp, sp, #12
 1376              		@ sp needed
 1377              	.LVL102:
 1378 0024 F0BD     		pop	{r4, r5, r6, r7, pc}
 1379              		.cfi_endproc
 1380              	.LFE43:
 1382              		.section	.text.draw_char,"ax",%progbits
 1383              		.align	1
 1384              		.global	draw_char
 1385              		.syntax unified
 1386              		.code	16
 1387              		.thumb_func
 1388              		.fpu softvfp
 1390              	draw_char:
 1391              	.LFB45:
 295:Src/main.c    ****     c = c & 0x7F;
 1392              		.loc 1 295 0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 1396              	.LVL103:
ARM GAS  /tmp/cc9UFUWX.s 			page 38


 1397 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1398              	.LCFI23:
 1399              		.cfi_def_cfa_offset 20
 1400              		.cfi_offset 4, -20
 1401              		.cfi_offset 5, -16
 1402              		.cfi_offset 6, -12
 1403              		.cfi_offset 7, -8
 1404              		.cfi_offset 14, -4
 1405 0002 C646     		mov	lr, r8
 1406 0004 00B5     		push	{lr}
 1407              	.LCFI24:
 1408              		.cfi_def_cfa_offset 24
 1409              		.cfi_offset 8, -24
 1410 0006 0F00     		movs	r7, r1
 1411 0008 9046     		mov	r8, r2
 296:Src/main.c    ****     if (c < ' ') {
 1412              		.loc 1 296 0
 1413 000a 7F23     		movs	r3, #127
 1414              	.LVL104:
 1415 000c 0340     		ands	r3, r0
 1416              	.LVL105:
 297:Src/main.c    ****         c = 0;
 1417              		.loc 1 297 0
 1418 000e 1F2B     		cmp	r3, #31
 1419 0010 08D9     		bls	.L77
 300:Src/main.c    ****     }
 1420              		.loc 1 300 0
 1421 0012 203B     		subs	r3, r3, #32
 1422              	.LVL106:
 1423 0014 DBB2     		uxtb	r3, r3
 1424              	.LVL107:
 1425              	.L71:
 302:Src/main.c    ****     for (uint8_t j=0; j<CHAR_WIDTH; j++) {
 1426              		.loc 1 302 0
 1427 0016 5A00     		lsls	r2, r3, #1
 1428              	.LVL108:
 1429 0018 D318     		adds	r3, r2, r3
 1430              	.LVL109:
 1431 001a 5E00     		lsls	r6, r3, #1
 1432 001c 114B     		ldr	r3, .L81
 1433 001e F618     		adds	r6, r6, r3
 1434              	.LVL110:
 1435              	.LBB15:
 303:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1436              		.loc 1 303 0
 1437 0020 0025     		movs	r5, #0
 1438 0022 18E0     		b	.L72
 1439              	.LVL111:
 1440              	.L77:
 1441              	.LBE15:
 298:Src/main.c    ****     } else {
 1442              		.loc 1 298 0
 1443 0024 0023     		movs	r3, #0
 1444              	.LVL112:
 1445 0026 F6E7     		b	.L71
 1446              	.LVL113:
 1447              	.L73:
ARM GAS  /tmp/cc9UFUWX.s 			page 39


 1448              	.LBB18:
 1449              	.LBB16:
 308:Src/main.c    ****             }
 1450              		.loc 1 308 0
 1451 0028 4346     		mov	r3, r8
 1452 002a 1919     		adds	r1, r3, r4
 1453 002c 7819     		adds	r0, r7, r5
 1454 002e 0022     		movs	r2, #0
 1455 0030 FFF7FEFF 		bl	write_pixel
 1456              	.LVL114:
 1457              	.L74:
 304:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1458              		.loc 1 304 0 discriminator 2
 1459 0034 0134     		adds	r4, r4, #1
 1460              	.LVL115:
 1461 0036 E4B2     		uxtb	r4, r4
 1462              	.LVL116:
 1463              	.L76:
 304:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1464              		.loc 1 304 0 is_stmt 0 discriminator 1
 1465 0038 072C     		cmp	r4, #7
 1466 003a 0AD8     		bhi	.L79
 305:Src/main.c    ****                 write_pixel(x+j, y+i, 1);
 1467              		.loc 1 305 0 is_stmt 1
 1468 003c 735D     		ldrb	r3, [r6, r5]
 1469 003e 2341     		asrs	r3, r3, r4
 1470 0040 DB07     		lsls	r3, r3, #31
 1471 0042 F1D5     		bpl	.L73
 306:Src/main.c    ****             } else {
 1472              		.loc 1 306 0
 1473 0044 4346     		mov	r3, r8
 1474 0046 1919     		adds	r1, r3, r4
 1475 0048 7819     		adds	r0, r7, r5
 1476 004a 0122     		movs	r2, #1
 1477 004c FFF7FEFF 		bl	write_pixel
 1478              	.LVL117:
 1479 0050 F0E7     		b	.L74
 1480              	.L79:
 1481              	.LBE16:
 303:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1482              		.loc 1 303 0 discriminator 2
 1483 0052 0135     		adds	r5, r5, #1
 1484              	.LVL118:
 1485 0054 EDB2     		uxtb	r5, r5
 1486              	.LVL119:
 1487              	.L72:
 303:Src/main.c    ****         for (uint8_t i=0; i<CHAR_HEIGHT; i++) {
 1488              		.loc 1 303 0 is_stmt 0 discriminator 1
 1489 0056 052D     		cmp	r5, #5
 1490 0058 01D8     		bhi	.L80
 1491              	.LBB17:
 304:Src/main.c    ****             if (chr[j] & (1<<i)) {
 1492              		.loc 1 304 0 is_stmt 1
 1493 005a 0024     		movs	r4, #0
 1494 005c ECE7     		b	.L76
 1495              	.L80:
 1496              	.LBE17:
ARM GAS  /tmp/cc9UFUWX.s 			page 40


 1497              	.LBE18:
 312:Src/main.c    **** 
 1498              		.loc 1 312 0
 1499              		@ sp needed
 1500              	.LVL120:
 1501              	.LVL121:
 1502 005e 04BC     		pop	{r2}
 1503 0060 9046     		mov	r8, r2
 1504 0062 F0BD     		pop	{r4, r5, r6, r7, pc}
 1505              	.L82:
 1506              		.align	2
 1507              	.L81:
 1508 0064 00000000 		.word	font
 1509              		.cfi_endproc
 1510              	.LFE45:
 1512              		.section	.text.draw_string,"ax",%progbits
 1513              		.align	1
 1514              		.global	draw_string
 1515              		.syntax unified
 1516              		.code	16
 1517              		.thumb_func
 1518              		.fpu softvfp
 1520              	draw_string:
 1521              	.LFB46:
 314:Src/main.c    ****     while (*str) {
 1522              		.loc 1 314 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 0
 1525              		@ frame_needed = 0, uses_anonymous_args = 0
 1526              	.LVL122:
 1527 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1528              	.LCFI25:
 1529              		.cfi_def_cfa_offset 24
 1530              		.cfi_offset 3, -24
 1531              		.cfi_offset 4, -20
 1532              		.cfi_offset 5, -16
 1533              		.cfi_offset 6, -12
 1534              		.cfi_offset 7, -8
 1535              		.cfi_offset 14, -4
 1536 0002 0700     		movs	r7, r0
 1537 0004 0C00     		movs	r4, r1
 1538 0006 1600     		movs	r6, r2
 1539 0008 1D00     		movs	r5, r3
 315:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1540              		.loc 1 315 0
 1541 000a 07E0     		b	.L84
 1542              	.LVL123:
 1543              	.L85:
 316:Src/main.c    ****         x += CHAR_WIDTH;
 1544              		.loc 1 316 0
 1545 000c 0137     		adds	r7, r7, #1
 1546              	.LVL124:
 1547 000e 2B00     		movs	r3, r5
 1548 0010 3200     		movs	r2, r6
 1549 0012 2100     		movs	r1, r4
 1550 0014 FFF7FEFF 		bl	draw_char
 1551              	.LVL125:
ARM GAS  /tmp/cc9UFUWX.s 			page 41


 317:Src/main.c    ****     }
 1552              		.loc 1 317 0
 1553 0018 0634     		adds	r4, r4, #6
 1554              	.LVL126:
 1555 001a E4B2     		uxtb	r4, r4
 1556              	.LVL127:
 1557              	.L84:
 315:Src/main.c    ****         draw_char(*str++, x, y, brightness);
 1558              		.loc 1 315 0
 1559 001c 3878     		ldrb	r0, [r7]
 1560 001e 0028     		cmp	r0, #0
 1561 0020 F4D1     		bne	.L85
 319:Src/main.c    **** 
 1562              		.loc 1 319 0
 1563              		@ sp needed
 1564              	.LVL128:
 1565              	.LVL129:
 1566 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1567              		.cfi_endproc
 1568              	.LFE46:
 1570              		.section	.text.SystemClock_Config,"ax",%progbits
 1571              		.align	1
 1572              		.global	SystemClock_Config
 1573              		.syntax unified
 1574              		.code	16
 1575              		.thumb_func
 1576              		.fpu softvfp
 1578              	SystemClock_Config:
 1579              	.LFB47:
 322:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1580              		.loc 1 322 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 96
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584 0000 10B5     		push	{r4, lr}
 1585              	.LCFI26:
 1586              		.cfi_def_cfa_offset 8
 1587              		.cfi_offset 4, -8
 1588              		.cfi_offset 14, -4
 1589 0002 98B0     		sub	sp, sp, #96
 1590              	.LCFI27:
 1591              		.cfi_def_cfa_offset 104
 323:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1592              		.loc 1 323 0
 1593 0004 2C22     		movs	r2, #44
 1594 0006 0021     		movs	r1, #0
 1595 0008 0CA8     		add	r0, sp, #48
 1596 000a FFF7FEFF 		bl	memset
 1597              	.LVL130:
 324:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1598              		.loc 1 324 0
 1599 000e 1024     		movs	r4, #16
 1600 0010 1022     		movs	r2, #16
 1601 0012 0021     		movs	r1, #0
 1602 0014 07A8     		add	r0, sp, #28
 1603 0016 FFF7FEFF 		bl	memset
 1604              	.LVL131:
ARM GAS  /tmp/cc9UFUWX.s 			page 42


 325:Src/main.c    **** 
 1605              		.loc 1 325 0
 1606 001a 1C22     		movs	r2, #28
 1607 001c 0021     		movs	r1, #0
 1608 001e 6846     		mov	r0, sp
 1609 0020 FFF7FEFF 		bl	memset
 1610              	.LVL132:
 327:Src/main.c    ****                               |RCC_OSCILLATORTYPE_HSI48;
 1611              		.loc 1 327 0
 1612 0024 3223     		movs	r3, #50
 1613 0026 0B93     		str	r3, [sp, #44]
 329:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 1614              		.loc 1 329 0
 1615 0028 313B     		subs	r3, r3, #49
 1616 002a 0E93     		str	r3, [sp, #56]
 330:Src/main.c    ****   RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 1617              		.loc 1 330 0
 1618 002c 1393     		str	r3, [sp, #76]
 331:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1619              		.loc 1 331 0
 1620 002e 1093     		str	r3, [sp, #64]
 332:Src/main.c    ****   RCC_OscInitStruct.HSI14CalibrationValue = 16;
 1621              		.loc 1 332 0
 1622 0030 0F94     		str	r4, [sp, #60]
 333:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1623              		.loc 1 333 0
 1624 0032 1194     		str	r4, [sp, #68]
 334:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 1625              		.loc 1 334 0
 1626 0034 0E3C     		subs	r4, r4, #14
 1627 0036 1494     		str	r4, [sp, #80]
 335:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 1628              		.loc 1 335 0
 1629 0038 C022     		movs	r2, #192
 1630 003a 5202     		lsls	r2, r2, #9
 1631 003c 1592     		str	r2, [sp, #84]
 337:Src/main.c    ****   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 1632              		.loc 1 337 0
 1633 003e 1793     		str	r3, [sp, #92]
 338:Src/main.c    **** 
 1634              		.loc 1 338 0
 1635 0040 0BA8     		add	r0, sp, #44
 1636 0042 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1637              	.LVL133:
 340:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 1638              		.loc 1 340 0
 1639 0046 0723     		movs	r3, #7
 1640 0048 0793     		str	r3, [sp, #28]
 342:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1641              		.loc 1 342 0
 1642 004a 0894     		str	r4, [sp, #32]
 343:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1643              		.loc 1 343 0
 1644 004c 0024     		movs	r4, #0
 1645 004e 0994     		str	r4, [sp, #36]
 344:Src/main.c    **** 
 1646              		.loc 1 344 0
ARM GAS  /tmp/cc9UFUWX.s 			page 43


 1647 0050 0A94     		str	r4, [sp, #40]
 346:Src/main.c    **** 
 1648              		.loc 1 346 0
 1649 0052 0121     		movs	r1, #1
 1650 0054 07A8     		add	r0, sp, #28
 1651 0056 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1652              	.LVL134:
 348:Src/main.c    ****   PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 1653              		.loc 1 348 0
 1654 005a 044B     		ldr	r3, .L87
 1655 005c 0093     		str	r3, [sp]
 349:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 1656              		.loc 1 349 0
 1657 005e 0494     		str	r4, [sp, #16]
 350:Src/main.c    **** 
 1658              		.loc 1 350 0
 1659 0060 0694     		str	r4, [sp, #24]
 352:Src/main.c    **** }
 1660              		.loc 1 352 0
 1661 0062 6846     		mov	r0, sp
 1662 0064 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1663              	.LVL135:
 353:Src/main.c    **** 
 1664              		.loc 1 353 0
 1665 0068 18B0     		add	sp, sp, #96
 1666              		@ sp needed
 1667 006a 10BD     		pop	{r4, pc}
 1668              	.L88:
 1669              		.align	2
 1670              	.L87:
 1671 006c 20000200 		.word	131104
 1672              		.cfi_endproc
 1673              	.LFE47:
 1675              		.global	__aeabi_f2uiz
 1676              		.section	.text.main,"ax",%progbits
 1677              		.align	1
 1678              		.global	main
 1679              		.syntax unified
 1680              		.code	16
 1681              		.thumb_func
 1682              		.fpu softvfp
 1684              	main:
 1685              	.LFB37:
  92:Src/main.c    **** 
 1686              		.loc 1 92 0
 1687              		.cfi_startproc
 1688              		@ args = 0, pretend = 0, frame = 48
 1689              		@ frame_needed = 0, uses_anonymous_args = 0
 1690 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1691              	.LCFI28:
 1692              		.cfi_def_cfa_offset 20
 1693              		.cfi_offset 4, -20
 1694              		.cfi_offset 5, -16
 1695              		.cfi_offset 6, -12
 1696              		.cfi_offset 7, -8
 1697              		.cfi_offset 14, -4
 1698 0002 8DB0     		sub	sp, sp, #52
ARM GAS  /tmp/cc9UFUWX.s 			page 44


 1699              	.LCFI29:
 1700              		.cfi_def_cfa_offset 72
  94:Src/main.c    **** 
 1701              		.loc 1 94 0
 1702 0004 FFF7FEFF 		bl	HAL_Init
 1703              	.LVL136:
  96:Src/main.c    **** 
 1704              		.loc 1 96 0
 1705 0008 FFF7FEFF 		bl	SystemClock_Config
 1706              	.LVL137:
  98:Src/main.c    ****   MX_DMA_Init();
 1707              		.loc 1 98 0
 1708 000c FFF7FEFF 		bl	MX_GPIO_Init
 1709              	.LVL138:
  99:Src/main.c    ****   MX_ADC_Init();
 1710              		.loc 1 99 0
 1711 0010 FFF7FEFF 		bl	MX_DMA_Init
 1712              	.LVL139:
 100:Src/main.c    ****   MX_I2C1_Init();
 1713              		.loc 1 100 0
 1714 0014 FFF7FEFF 		bl	MX_ADC_Init
 1715              	.LVL140:
 101:Src/main.c    ****   MX_I2C2_Init();
 1716              		.loc 1 101 0
 1717 0018 FFF7FEFF 		bl	MX_I2C1_Init
 1718              	.LVL141:
 102:Src/main.c    ****   MX_TIM1_Init();
 1719              		.loc 1 102 0
 1720 001c FFF7FEFF 		bl	MX_I2C2_Init
 1721              	.LVL142:
 103:Src/main.c    ****   MX_USB_PCD_Init();
 1722              		.loc 1 103 0
 1723 0020 FFF7FEFF 		bl	MX_TIM1_Init
 1724              	.LVL143:
 104:Src/main.c    **** 
 1725              		.loc 1 104 0
 1726 0024 FFF7FEFF 		bl	MX_USB_PCD_Init
 1727              	.LVL144:
 106:Src/main.c    ****   HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 1728              		.loc 1 106 0
 1729 0028 B24C     		ldr	r4, .L111
 1730 002a 0021     		movs	r1, #0
 1731 002c 2000     		movs	r0, r4
 1732 002e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1733              	.LVL145:
 107:Src/main.c    **** 
 1734              		.loc 1 107 0
 1735 0032 0C21     		movs	r1, #12
 1736 0034 2000     		movs	r0, r4
 1737 0036 FFF7FEFF 		bl	HAL_TIM_OC_Start
 1738              	.LVL146:
 109:Src/main.c    **** 
 1739              		.loc 1 109 0
 1740 003a 0422     		movs	r2, #4
 1741 003c AE49     		ldr	r1, .L111+4
 1742 003e AF48     		ldr	r0, .L111+8
 1743 0040 FFF7FEFF 		bl	HAL_ADC_Start_DMA
ARM GAS  /tmp/cc9UFUWX.s 			page 45


 1744              	.LVL147:
 111:Src/main.c    ****   disp_init();
 1745              		.loc 1 111 0
 1746 0044 1420     		movs	r0, #20
 1747 0046 FFF7FEFF 		bl	HAL_Delay
 1748              	.LVL148:
 112:Src/main.c    ****   HAL_Delay(60);
 1749              		.loc 1 112 0
 1750 004a FFF7FEFF 		bl	disp_init
 1751              	.LVL149:
 113:Src/main.c    ****   clear_screen();
 1752              		.loc 1 113 0
 1753 004e 3C20     		movs	r0, #60
 1754 0050 FFF7FEFF 		bl	HAL_Delay
 1755              	.LVL150:
 114:Src/main.c    ****   // DFU bootloader
 1756              		.loc 1 114 0
 1757 0054 FFF7FEFF 		bl	clear_screen
 1758              	.LVL151:
 116:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 1759              		.loc 1 116 0
 1760 0058 9020     		movs	r0, #144
 1761 005a 0821     		movs	r1, #8
 1762 005c C005     		lsls	r0, r0, #23
 1763 005e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1764              	.LVL152:
 1765 0062 0028     		cmp	r0, #0
 1766 0064 24D0     		beq	.L90
 116:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 1 ,1);
 1767              		.loc 1 116 0 is_stmt 0 discriminator 1
 1768 0066 9020     		movs	r0, #144
 1769 0068 1021     		movs	r1, #16
 1770 006a C005     		lsls	r0, r0, #23
 1771 006c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1772              	.LVL153:
 1773 0070 0028     		cmp	r0, #0
 1774 0072 1DD0     		beq	.L90
 117:Src/main.c    ****     draw_string("dfudfudfudfudfu", 1, 8 ,1);
 1775              		.loc 1 117 0 is_stmt 1
 1776 0074 A24C     		ldr	r4, .L111+12
 1777 0076 0123     		movs	r3, #1
 1778 0078 0122     		movs	r2, #1
 1779 007a 0121     		movs	r1, #1
 1780 007c 2000     		movs	r0, r4
 1781 007e FFF7FEFF 		bl	draw_string
 1782              	.LVL154:
 118:Src/main.c    ****     refresh();
 1783              		.loc 1 118 0
 1784 0082 0123     		movs	r3, #1
 1785 0084 0822     		movs	r2, #8
 1786 0086 0121     		movs	r1, #1
 1787 0088 2000     		movs	r0, r4
 1788 008a FFF7FEFF 		bl	draw_string
 1789              	.LVL155:
 119:Src/main.c    ****     HAL_Delay(40);
 1790              		.loc 1 119 0
 1791 008e FFF7FEFF 		bl	refresh
ARM GAS  /tmp/cc9UFUWX.s 			page 46


 1792              	.LVL156:
 120:Src/main.c    ****     *((unsigned long *)0x20003FF0) = 0xDEADBEEF;
 1793              		.loc 1 120 0
 1794 0092 2820     		movs	r0, #40
 1795 0094 FFF7FEFF 		bl	HAL_Delay
 1796              	.LVL157:
 121:Src/main.c    ****     NVIC_SystemReset();
 1797              		.loc 1 121 0
 1798 0098 9A4B     		ldr	r3, .L111+16
 1799 009a 9B4A     		ldr	r2, .L111+20
 1800 009c 1A60     		str	r2, [r3]
 1801              	.LBB29:
 1802              	.LBB30:
 1803              	.LBB31:
 1804              	.LBB32:
 1805              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
ARM GAS  /tmp/cc9UFUWX.s 			page 47


  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9UFUWX.s 			page 48


  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc9UFUWX.s 			page 49


 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc9UFUWX.s 			page 50


 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
ARM GAS  /tmp/cc9UFUWX.s 			page 51


 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc9UFUWX.s 			page 52


 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
ARM GAS  /tmp/cc9UFUWX.s 			page 53


 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1806              		.loc 2 429 0
 1807              		.syntax divided
 1808              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1809 009e BFF34F8F 		dsb 0xF
 1810              	@ 0 "" 2
 1811              		.thumb
 1812              		.syntax unified
 1813              	.LBE32:
 1814              	.LBE31:
 1815              		.file 3 "Drivers/CMSIS/Include/core_cm0.h"
   1:Drivers/CMSIS/Include/core_cm0.h **** /**************************************************************************//**
ARM GAS  /tmp/cc9UFUWX.s 			page 54


   2:Drivers/CMSIS/Include/core_cm0.h ****  * @file     core_cm0.h
   3:Drivers/CMSIS/Include/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm0.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/core_cm0.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm0.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/core_cm0.h **** 
   9:Drivers/CMSIS/Include/core_cm0.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/core_cm0.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/core_cm0.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/core_cm0.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/core_cm0.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/core_cm0.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/core_cm0.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/core_cm0.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/core_cm0.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/core_cm0.h ****    *
  21:Drivers/CMSIS/Include/core_cm0.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/core_cm0.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/core_cm0.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/core_cm0.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/core_cm0.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/core_cm0.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/core_cm0.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/core_cm0.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/core_cm0.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/core_cm0.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/core_cm0.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/core_cm0.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/core_cm0.h **** 
  34:Drivers/CMSIS/Include/core_cm0.h **** 
  35:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __ICCARM__ )
  36:Drivers/CMSIS/Include/core_cm0.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:Drivers/CMSIS/Include/core_cm0.h ****   #pragma clang system_header   /* treat file as system include file */
  39:Drivers/CMSIS/Include/core_cm0.h **** #endif
  40:Drivers/CMSIS/Include/core_cm0.h **** 
  41:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_GENERIC
  42:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_GENERIC
  43:Drivers/CMSIS/Include/core_cm0.h **** 
  44:Drivers/CMSIS/Include/core_cm0.h **** #include <stdint.h>
  45:Drivers/CMSIS/Include/core_cm0.h **** 
  46:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
  47:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
  48:Drivers/CMSIS/Include/core_cm0.h **** #endif
  49:Drivers/CMSIS/Include/core_cm0.h **** 
  50:Drivers/CMSIS/Include/core_cm0.h **** /**
  51:Drivers/CMSIS/Include/core_cm0.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:Drivers/CMSIS/Include/core_cm0.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:Drivers/CMSIS/Include/core_cm0.h **** 
  54:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:Drivers/CMSIS/Include/core_cm0.h ****      Function definitions in header files are used to allow 'inlining'.
  56:Drivers/CMSIS/Include/core_cm0.h **** 
  57:Drivers/CMSIS/Include/core_cm0.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:Drivers/CMSIS/Include/core_cm0.h ****      Unions are used for effective representation of core registers.
ARM GAS  /tmp/cc9UFUWX.s 			page 55


  59:Drivers/CMSIS/Include/core_cm0.h **** 
  60:Drivers/CMSIS/Include/core_cm0.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:Drivers/CMSIS/Include/core_cm0.h ****      Function-like macros are used to allow more efficient code.
  62:Drivers/CMSIS/Include/core_cm0.h ****  */
  63:Drivers/CMSIS/Include/core_cm0.h **** 
  64:Drivers/CMSIS/Include/core_cm0.h **** 
  65:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
  66:Drivers/CMSIS/Include/core_cm0.h ****  *                 CMSIS definitions
  67:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
  68:Drivers/CMSIS/Include/core_cm0.h **** /**
  69:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup Cortex_M0
  70:Drivers/CMSIS/Include/core_cm0.h ****   @{
  71:Drivers/CMSIS/Include/core_cm0.h ****  */
  72:Drivers/CMSIS/Include/core_cm0.h **** 
  73:Drivers/CMSIS/Include/core_cm0.h **** /*  CMSIS CM0 definitions */
  74:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:Drivers/CMSIS/Include/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
  77:Drivers/CMSIS/Include/core_cm0.h ****                                     __CM0_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:Drivers/CMSIS/Include/core_cm0.h **** 
  79:Drivers/CMSIS/Include/core_cm0.h **** #define __CORTEX_M                (0x00U)                                      /*!< Cortex-M Core *
  80:Drivers/CMSIS/Include/core_cm0.h **** 
  81:Drivers/CMSIS/Include/core_cm0.h **** 
  82:Drivers/CMSIS/Include/core_cm0.h **** #if   defined ( __CC_ARM )
  83:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  86:Drivers/CMSIS/Include/core_cm0.h **** 
  87:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static __inline
  91:Drivers/CMSIS/Include/core_cm0.h **** 
  92:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
  93:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
  96:Drivers/CMSIS/Include/core_cm0.h **** 
  97:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
  98:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 101:Drivers/CMSIS/Include/core_cm0.h **** 
 102:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 103:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 105:Drivers/CMSIS/Include/core_cm0.h **** 
 106:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 107:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
 110:Drivers/CMSIS/Include/core_cm0.h **** 
 111:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 112:Drivers/CMSIS/Include/core_cm0.h ****   #define __packed
 113:Drivers/CMSIS/Include/core_cm0.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:Drivers/CMSIS/Include/core_cm0.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:Drivers/CMSIS/Include/core_cm0.h ****   #define __STATIC_INLINE  static inline
ARM GAS  /tmp/cc9UFUWX.s 			page 56


 116:Drivers/CMSIS/Include/core_cm0.h **** 
 117:Drivers/CMSIS/Include/core_cm0.h **** #else
 118:Drivers/CMSIS/Include/core_cm0.h ****   #error Unknown compiler
 119:Drivers/CMSIS/Include/core_cm0.h **** #endif
 120:Drivers/CMSIS/Include/core_cm0.h **** 
 121:Drivers/CMSIS/Include/core_cm0.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:Drivers/CMSIS/Include/core_cm0.h ****     This core does not support an FPU at all
 123:Drivers/CMSIS/Include/core_cm0.h **** */
 124:Drivers/CMSIS/Include/core_cm0.h **** #define __FPU_USED       0U
 125:Drivers/CMSIS/Include/core_cm0.h **** 
 126:Drivers/CMSIS/Include/core_cm0.h **** #if defined ( __CC_ARM )
 127:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TARGET_FPU_VFP
 128:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 129:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 130:Drivers/CMSIS/Include/core_cm0.h **** 
 131:Drivers/CMSIS/Include/core_cm0.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 132:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARM_PCS_VFP
 133:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 134:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm0.h **** 
 136:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __GNUC__ )
 137:Drivers/CMSIS/Include/core_cm0.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 138:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 140:Drivers/CMSIS/Include/core_cm0.h **** 
 141:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __ICCARM__ )
 142:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __ARMVFP__
 143:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 145:Drivers/CMSIS/Include/core_cm0.h **** 
 146:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TMS470__ )
 147:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __TI_VFP_SUPPORT__
 148:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 149:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 150:Drivers/CMSIS/Include/core_cm0.h **** 
 151:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __TASKING__ )
 152:Drivers/CMSIS/Include/core_cm0.h ****   #if defined __FPU_VFP__
 153:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 154:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 155:Drivers/CMSIS/Include/core_cm0.h **** 
 156:Drivers/CMSIS/Include/core_cm0.h **** #elif defined ( __CSMC__ )
 157:Drivers/CMSIS/Include/core_cm0.h ****   #if ( __CSMC__ & 0x400U)
 158:Drivers/CMSIS/Include/core_cm0.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 159:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 160:Drivers/CMSIS/Include/core_cm0.h **** 
 161:Drivers/CMSIS/Include/core_cm0.h **** #endif
 162:Drivers/CMSIS/Include/core_cm0.h **** 
 163:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 164:Drivers/CMSIS/Include/core_cm0.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 165:Drivers/CMSIS/Include/core_cm0.h **** 
 166:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 167:Drivers/CMSIS/Include/core_cm0.h **** }
 168:Drivers/CMSIS/Include/core_cm0.h **** #endif
 169:Drivers/CMSIS/Include/core_cm0.h **** 
 170:Drivers/CMSIS/Include/core_cm0.h **** #endif /* __CORE_CM0_H_GENERIC */
 171:Drivers/CMSIS/Include/core_cm0.h **** 
 172:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CMSIS_GENERIC
ARM GAS  /tmp/cc9UFUWX.s 			page 57


 173:Drivers/CMSIS/Include/core_cm0.h **** 
 174:Drivers/CMSIS/Include/core_cm0.h **** #ifndef __CORE_CM0_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm0.h **** #define __CORE_CM0_H_DEPENDANT
 176:Drivers/CMSIS/Include/core_cm0.h **** 
 177:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 178:Drivers/CMSIS/Include/core_cm0.h ****  extern "C" {
 179:Drivers/CMSIS/Include/core_cm0.h **** #endif
 180:Drivers/CMSIS/Include/core_cm0.h **** 
 181:Drivers/CMSIS/Include/core_cm0.h **** /* check device defines and use defaults */
 182:Drivers/CMSIS/Include/core_cm0.h **** #if defined __CHECK_DEVICE_DEFINES
 183:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __CM0_REV
 184:Drivers/CMSIS/Include/core_cm0.h ****     #define __CM0_REV               0x0000U
 185:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__CM0_REV not defined in device header file; using default!"
 186:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 187:Drivers/CMSIS/Include/core_cm0.h **** 
 188:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __NVIC_PRIO_BITS
 189:Drivers/CMSIS/Include/core_cm0.h ****     #define __NVIC_PRIO_BITS          2U
 190:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 191:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 192:Drivers/CMSIS/Include/core_cm0.h **** 
 193:Drivers/CMSIS/Include/core_cm0.h ****   #ifndef __Vendor_SysTickConfig
 194:Drivers/CMSIS/Include/core_cm0.h ****     #define __Vendor_SysTickConfig    0U
 195:Drivers/CMSIS/Include/core_cm0.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 196:Drivers/CMSIS/Include/core_cm0.h ****   #endif
 197:Drivers/CMSIS/Include/core_cm0.h **** #endif
 198:Drivers/CMSIS/Include/core_cm0.h **** 
 199:Drivers/CMSIS/Include/core_cm0.h **** /* IO definitions (access restrictions to peripheral registers) */
 200:Drivers/CMSIS/Include/core_cm0.h **** /**
 201:Drivers/CMSIS/Include/core_cm0.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 202:Drivers/CMSIS/Include/core_cm0.h **** 
 203:Drivers/CMSIS/Include/core_cm0.h ****     <strong>IO Type Qualifiers</strong> are used
 204:Drivers/CMSIS/Include/core_cm0.h ****     \li to specify the access to peripheral variables.
 205:Drivers/CMSIS/Include/core_cm0.h ****     \li for automatic generation of peripheral register debug information.
 206:Drivers/CMSIS/Include/core_cm0.h **** */
 207:Drivers/CMSIS/Include/core_cm0.h **** #ifdef __cplusplus
 208:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 209:Drivers/CMSIS/Include/core_cm0.h **** #else
 210:Drivers/CMSIS/Include/core_cm0.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 211:Drivers/CMSIS/Include/core_cm0.h **** #endif
 212:Drivers/CMSIS/Include/core_cm0.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 213:Drivers/CMSIS/Include/core_cm0.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 214:Drivers/CMSIS/Include/core_cm0.h **** 
 215:Drivers/CMSIS/Include/core_cm0.h **** /* following defines should be used for structure members */
 216:Drivers/CMSIS/Include/core_cm0.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 217:Drivers/CMSIS/Include/core_cm0.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 218:Drivers/CMSIS/Include/core_cm0.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 219:Drivers/CMSIS/Include/core_cm0.h **** 
 220:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group Cortex_M0 */
 221:Drivers/CMSIS/Include/core_cm0.h **** 
 222:Drivers/CMSIS/Include/core_cm0.h **** 
 223:Drivers/CMSIS/Include/core_cm0.h **** 
 224:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 225:Drivers/CMSIS/Include/core_cm0.h ****  *                 Register Abstraction
 226:Drivers/CMSIS/Include/core_cm0.h ****   Core Register contain:
 227:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register
 228:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Register
 229:Drivers/CMSIS/Include/core_cm0.h ****   - Core SCB Register
ARM GAS  /tmp/cc9UFUWX.s 			page 58


 230:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Register
 231:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 232:Drivers/CMSIS/Include/core_cm0.h **** /**
 233:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 234:Drivers/CMSIS/Include/core_cm0.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 235:Drivers/CMSIS/Include/core_cm0.h **** */
 236:Drivers/CMSIS/Include/core_cm0.h **** 
 237:Drivers/CMSIS/Include/core_cm0.h **** /**
 238:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 239:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 240:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Core Register type definitions.
 241:Drivers/CMSIS/Include/core_cm0.h ****   @{
 242:Drivers/CMSIS/Include/core_cm0.h ****  */
 243:Drivers/CMSIS/Include/core_cm0.h **** 
 244:Drivers/CMSIS/Include/core_cm0.h **** /**
 245:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 246:Drivers/CMSIS/Include/core_cm0.h ****  */
 247:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 248:Drivers/CMSIS/Include/core_cm0.h **** {
 249:Drivers/CMSIS/Include/core_cm0.h ****   struct
 250:Drivers/CMSIS/Include/core_cm0.h ****   {
 251:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 252:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 253:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 254:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 255:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 256:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 257:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 258:Drivers/CMSIS/Include/core_cm0.h **** } APSR_Type;
 259:Drivers/CMSIS/Include/core_cm0.h **** 
 260:Drivers/CMSIS/Include/core_cm0.h **** /* APSR Register Definitions */
 261:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 262:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 263:Drivers/CMSIS/Include/core_cm0.h **** 
 264:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 265:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 266:Drivers/CMSIS/Include/core_cm0.h **** 
 267:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 268:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 269:Drivers/CMSIS/Include/core_cm0.h **** 
 270:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 271:Drivers/CMSIS/Include/core_cm0.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 272:Drivers/CMSIS/Include/core_cm0.h **** 
 273:Drivers/CMSIS/Include/core_cm0.h **** 
 274:Drivers/CMSIS/Include/core_cm0.h **** /**
 275:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 276:Drivers/CMSIS/Include/core_cm0.h ****  */
 277:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 278:Drivers/CMSIS/Include/core_cm0.h **** {
 279:Drivers/CMSIS/Include/core_cm0.h ****   struct
 280:Drivers/CMSIS/Include/core_cm0.h ****   {
 281:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 282:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 283:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 284:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 285:Drivers/CMSIS/Include/core_cm0.h **** } IPSR_Type;
 286:Drivers/CMSIS/Include/core_cm0.h **** 
ARM GAS  /tmp/cc9UFUWX.s 			page 59


 287:Drivers/CMSIS/Include/core_cm0.h **** /* IPSR Register Definitions */
 288:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 289:Drivers/CMSIS/Include/core_cm0.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 290:Drivers/CMSIS/Include/core_cm0.h **** 
 291:Drivers/CMSIS/Include/core_cm0.h **** 
 292:Drivers/CMSIS/Include/core_cm0.h **** /**
 293:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 294:Drivers/CMSIS/Include/core_cm0.h ****  */
 295:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 296:Drivers/CMSIS/Include/core_cm0.h **** {
 297:Drivers/CMSIS/Include/core_cm0.h ****   struct
 298:Drivers/CMSIS/Include/core_cm0.h ****   {
 299:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 300:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 301:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 302:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 303:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 304:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 305:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 306:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 307:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 308:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 309:Drivers/CMSIS/Include/core_cm0.h **** } xPSR_Type;
 310:Drivers/CMSIS/Include/core_cm0.h **** 
 311:Drivers/CMSIS/Include/core_cm0.h **** /* xPSR Register Definitions */
 312:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 313:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 314:Drivers/CMSIS/Include/core_cm0.h **** 
 315:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 316:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 317:Drivers/CMSIS/Include/core_cm0.h **** 
 318:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 319:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 320:Drivers/CMSIS/Include/core_cm0.h **** 
 321:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 322:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 323:Drivers/CMSIS/Include/core_cm0.h **** 
 324:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 325:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 326:Drivers/CMSIS/Include/core_cm0.h **** 
 327:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 328:Drivers/CMSIS/Include/core_cm0.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 329:Drivers/CMSIS/Include/core_cm0.h **** 
 330:Drivers/CMSIS/Include/core_cm0.h **** 
 331:Drivers/CMSIS/Include/core_cm0.h **** /**
 332:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Union type to access the Control Registers (CONTROL).
 333:Drivers/CMSIS/Include/core_cm0.h ****  */
 334:Drivers/CMSIS/Include/core_cm0.h **** typedef union
 335:Drivers/CMSIS/Include/core_cm0.h **** {
 336:Drivers/CMSIS/Include/core_cm0.h ****   struct
 337:Drivers/CMSIS/Include/core_cm0.h ****   {
 338:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
 339:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 340:Drivers/CMSIS/Include/core_cm0.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 341:Drivers/CMSIS/Include/core_cm0.h ****   } b;                                   /*!< Structure used for bit  access */
 342:Drivers/CMSIS/Include/core_cm0.h ****   uint32_t w;                            /*!< Type      used for word access */
 343:Drivers/CMSIS/Include/core_cm0.h **** } CONTROL_Type;
ARM GAS  /tmp/cc9UFUWX.s 			page 60


 344:Drivers/CMSIS/Include/core_cm0.h **** 
 345:Drivers/CMSIS/Include/core_cm0.h **** /* CONTROL Register Definitions */
 346:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 347:Drivers/CMSIS/Include/core_cm0.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 348:Drivers/CMSIS/Include/core_cm0.h **** 
 349:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CORE */
 350:Drivers/CMSIS/Include/core_cm0.h **** 
 351:Drivers/CMSIS/Include/core_cm0.h **** 
 352:Drivers/CMSIS/Include/core_cm0.h **** /**
 353:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 354:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 355:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Type definitions for the NVIC Registers
 356:Drivers/CMSIS/Include/core_cm0.h ****   @{
 357:Drivers/CMSIS/Include/core_cm0.h ****  */
 358:Drivers/CMSIS/Include/core_cm0.h **** 
 359:Drivers/CMSIS/Include/core_cm0.h **** /**
 360:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 361:Drivers/CMSIS/Include/core_cm0.h ****  */
 362:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 363:Drivers/CMSIS/Include/core_cm0.h **** {
 364:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 365:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0[31U];
 366:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 367:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RSERVED1[31U];
 368:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 369:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED2[31U];
 370:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 371:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED3[31U];
 372:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED4[64U];
 373:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 374:Drivers/CMSIS/Include/core_cm0.h **** }  NVIC_Type;
 375:Drivers/CMSIS/Include/core_cm0.h **** 
 376:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_NVIC */
 377:Drivers/CMSIS/Include/core_cm0.h **** 
 378:Drivers/CMSIS/Include/core_cm0.h **** 
 379:Drivers/CMSIS/Include/core_cm0.h **** /**
 380:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 381:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 382:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Control Block Registers
 383:Drivers/CMSIS/Include/core_cm0.h ****   @{
 384:Drivers/CMSIS/Include/core_cm0.h ****  */
 385:Drivers/CMSIS/Include/core_cm0.h **** 
 386:Drivers/CMSIS/Include/core_cm0.h **** /**
 387:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Control Block (SCB).
 388:Drivers/CMSIS/Include/core_cm0.h ****  */
 389:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 390:Drivers/CMSIS/Include/core_cm0.h **** {
 391:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 392:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 393:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED0;
 394:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 395:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 396:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 397:Drivers/CMSIS/Include/core_cm0.h ****         uint32_t RESERVED1;
 398:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 399:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 400:Drivers/CMSIS/Include/core_cm0.h **** } SCB_Type;
ARM GAS  /tmp/cc9UFUWX.s 			page 61


 401:Drivers/CMSIS/Include/core_cm0.h **** 
 402:Drivers/CMSIS/Include/core_cm0.h **** /* SCB CPUID Register Definitions */
 403:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 404:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 405:Drivers/CMSIS/Include/core_cm0.h **** 
 406:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 407:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 408:Drivers/CMSIS/Include/core_cm0.h **** 
 409:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 410:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 411:Drivers/CMSIS/Include/core_cm0.h **** 
 412:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 413:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 414:Drivers/CMSIS/Include/core_cm0.h **** 
 415:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 416:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 417:Drivers/CMSIS/Include/core_cm0.h **** 
 418:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 419:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 420:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 421:Drivers/CMSIS/Include/core_cm0.h **** 
 422:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 423:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 424:Drivers/CMSIS/Include/core_cm0.h **** 
 425:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 426:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 427:Drivers/CMSIS/Include/core_cm0.h **** 
 428:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 429:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 430:Drivers/CMSIS/Include/core_cm0.h **** 
 431:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 432:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 433:Drivers/CMSIS/Include/core_cm0.h **** 
 434:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 435:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 436:Drivers/CMSIS/Include/core_cm0.h **** 
 437:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 438:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 439:Drivers/CMSIS/Include/core_cm0.h **** 
 440:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 441:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 442:Drivers/CMSIS/Include/core_cm0.h **** 
 443:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 444:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 445:Drivers/CMSIS/Include/core_cm0.h **** 
 446:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 447:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 448:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 449:Drivers/CMSIS/Include/core_cm0.h **** 
 450:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 451:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 452:Drivers/CMSIS/Include/core_cm0.h **** 
 453:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 454:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 455:Drivers/CMSIS/Include/core_cm0.h **** 
 456:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 457:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
ARM GAS  /tmp/cc9UFUWX.s 			page 62


 458:Drivers/CMSIS/Include/core_cm0.h **** 
 459:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 460:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 461:Drivers/CMSIS/Include/core_cm0.h **** 
 462:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Control Register Definitions */
 463:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 464:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 465:Drivers/CMSIS/Include/core_cm0.h **** 
 466:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 467:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 468:Drivers/CMSIS/Include/core_cm0.h **** 
 469:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 470:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 471:Drivers/CMSIS/Include/core_cm0.h **** 
 472:Drivers/CMSIS/Include/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 473:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 474:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 475:Drivers/CMSIS/Include/core_cm0.h **** 
 476:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 477:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 478:Drivers/CMSIS/Include/core_cm0.h **** 
 479:Drivers/CMSIS/Include/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 480:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 481:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 482:Drivers/CMSIS/Include/core_cm0.h **** 
 483:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SCB */
 484:Drivers/CMSIS/Include/core_cm0.h **** 
 485:Drivers/CMSIS/Include/core_cm0.h **** 
 486:Drivers/CMSIS/Include/core_cm0.h **** /**
 487:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 488:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 489:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Type definitions for the System Timer Registers.
 490:Drivers/CMSIS/Include/core_cm0.h ****   @{
 491:Drivers/CMSIS/Include/core_cm0.h ****  */
 492:Drivers/CMSIS/Include/core_cm0.h **** 
 493:Drivers/CMSIS/Include/core_cm0.h **** /**
 494:Drivers/CMSIS/Include/core_cm0.h ****   \brief  Structure type to access the System Timer (SysTick).
 495:Drivers/CMSIS/Include/core_cm0.h ****  */
 496:Drivers/CMSIS/Include/core_cm0.h **** typedef struct
 497:Drivers/CMSIS/Include/core_cm0.h **** {
 498:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 499:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 500:Drivers/CMSIS/Include/core_cm0.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 501:Drivers/CMSIS/Include/core_cm0.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 502:Drivers/CMSIS/Include/core_cm0.h **** } SysTick_Type;
 503:Drivers/CMSIS/Include/core_cm0.h **** 
 504:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 505:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 506:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 507:Drivers/CMSIS/Include/core_cm0.h **** 
 508:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 509:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 510:Drivers/CMSIS/Include/core_cm0.h **** 
 511:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 512:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 513:Drivers/CMSIS/Include/core_cm0.h **** 
 514:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
ARM GAS  /tmp/cc9UFUWX.s 			page 63


 515:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 516:Drivers/CMSIS/Include/core_cm0.h **** 
 517:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Reload Register Definitions */
 518:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 519:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 520:Drivers/CMSIS/Include/core_cm0.h **** 
 521:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Current Register Definitions */
 522:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 523:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 524:Drivers/CMSIS/Include/core_cm0.h **** 
 525:Drivers/CMSIS/Include/core_cm0.h **** /* SysTick Calibration Register Definitions */
 526:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 527:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 528:Drivers/CMSIS/Include/core_cm0.h **** 
 529:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 530:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 531:Drivers/CMSIS/Include/core_cm0.h **** 
 532:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 533:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 534:Drivers/CMSIS/Include/core_cm0.h **** 
 535:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_SysTick */
 536:Drivers/CMSIS/Include/core_cm0.h **** 
 537:Drivers/CMSIS/Include/core_cm0.h **** 
 538:Drivers/CMSIS/Include/core_cm0.h **** /**
 539:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_core_register
 540:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 541:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ove
 542:Drivers/CMSIS/Include/core_cm0.h ****             Therefore they are not covered by the Cortex-M0 header file.
 543:Drivers/CMSIS/Include/core_cm0.h ****   @{
 544:Drivers/CMSIS/Include/core_cm0.h ****  */
 545:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_CoreDebug */
 546:Drivers/CMSIS/Include/core_cm0.h **** 
 547:Drivers/CMSIS/Include/core_cm0.h **** 
 548:Drivers/CMSIS/Include/core_cm0.h **** /**
 549:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 550:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 551:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 552:Drivers/CMSIS/Include/core_cm0.h ****   @{
 553:Drivers/CMSIS/Include/core_cm0.h ****  */
 554:Drivers/CMSIS/Include/core_cm0.h **** 
 555:Drivers/CMSIS/Include/core_cm0.h **** /**
 556:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 557:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 558:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of the bit field.
 559:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted value.
 560:Drivers/CMSIS/Include/core_cm0.h **** */
 561:Drivers/CMSIS/Include/core_cm0.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
 562:Drivers/CMSIS/Include/core_cm0.h **** 
 563:Drivers/CMSIS/Include/core_cm0.h **** /**
 564:Drivers/CMSIS/Include/core_cm0.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 565:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] field  Name of the register bit field.
 566:Drivers/CMSIS/Include/core_cm0.h ****   \param[in] value  Value of register.
 567:Drivers/CMSIS/Include/core_cm0.h ****   \return           Masked and shifted bit field value.
 568:Drivers/CMSIS/Include/core_cm0.h **** */
 569:Drivers/CMSIS/Include/core_cm0.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
 570:Drivers/CMSIS/Include/core_cm0.h **** 
 571:Drivers/CMSIS/Include/core_cm0.h **** /*@} end of group CMSIS_core_bitfield */
ARM GAS  /tmp/cc9UFUWX.s 			page 64


 572:Drivers/CMSIS/Include/core_cm0.h **** 
 573:Drivers/CMSIS/Include/core_cm0.h **** 
 574:Drivers/CMSIS/Include/core_cm0.h **** /**
 575:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup    CMSIS_core_register
 576:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup   CMSIS_core_base     Core Definitions
 577:Drivers/CMSIS/Include/core_cm0.h ****   \brief      Definitions for base addresses, unions, and structures.
 578:Drivers/CMSIS/Include/core_cm0.h ****   @{
 579:Drivers/CMSIS/Include/core_cm0.h ****  */
 580:Drivers/CMSIS/Include/core_cm0.h **** 
 581:Drivers/CMSIS/Include/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 582:Drivers/CMSIS/Include/core_cm0.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 583:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 584:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 585:Drivers/CMSIS/Include/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 586:Drivers/CMSIS/Include/core_cm0.h **** 
 587:Drivers/CMSIS/Include/core_cm0.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 588:Drivers/CMSIS/Include/core_cm0.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 589:Drivers/CMSIS/Include/core_cm0.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 590:Drivers/CMSIS/Include/core_cm0.h **** 
 591:Drivers/CMSIS/Include/core_cm0.h **** 
 592:Drivers/CMSIS/Include/core_cm0.h **** /*@} */
 593:Drivers/CMSIS/Include/core_cm0.h **** 
 594:Drivers/CMSIS/Include/core_cm0.h **** 
 595:Drivers/CMSIS/Include/core_cm0.h **** 
 596:Drivers/CMSIS/Include/core_cm0.h **** /*******************************************************************************
 597:Drivers/CMSIS/Include/core_cm0.h ****  *                Hardware Abstraction Layer
 598:Drivers/CMSIS/Include/core_cm0.h ****   Core Function Interface contains:
 599:Drivers/CMSIS/Include/core_cm0.h ****   - Core NVIC Functions
 600:Drivers/CMSIS/Include/core_cm0.h ****   - Core SysTick Functions
 601:Drivers/CMSIS/Include/core_cm0.h ****   - Core Register Access Functions
 602:Drivers/CMSIS/Include/core_cm0.h ****  ******************************************************************************/
 603:Drivers/CMSIS/Include/core_cm0.h **** /**
 604:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 605:Drivers/CMSIS/Include/core_cm0.h **** */
 606:Drivers/CMSIS/Include/core_cm0.h **** 
 607:Drivers/CMSIS/Include/core_cm0.h **** 
 608:Drivers/CMSIS/Include/core_cm0.h **** 
 609:Drivers/CMSIS/Include/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 610:Drivers/CMSIS/Include/core_cm0.h **** /**
 611:Drivers/CMSIS/Include/core_cm0.h ****   \ingroup  CMSIS_Core_FunctionInterface
 612:Drivers/CMSIS/Include/core_cm0.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 613:Drivers/CMSIS/Include/core_cm0.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 614:Drivers/CMSIS/Include/core_cm0.h ****   @{
 615:Drivers/CMSIS/Include/core_cm0.h ****  */
 616:Drivers/CMSIS/Include/core_cm0.h **** 
 617:Drivers/CMSIS/Include/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 618:Drivers/CMSIS/Include/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 619:Drivers/CMSIS/Include/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 620:Drivers/CMSIS/Include/core_cm0.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 621:Drivers/CMSIS/Include/core_cm0.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 622:Drivers/CMSIS/Include/core_cm0.h **** 
 623:Drivers/CMSIS/Include/core_cm0.h **** 
 624:Drivers/CMSIS/Include/core_cm0.h **** /**
 625:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Enable External Interrupt
 626:Drivers/CMSIS/Include/core_cm0.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
 627:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 628:Drivers/CMSIS/Include/core_cm0.h ****  */
ARM GAS  /tmp/cc9UFUWX.s 			page 65


 629:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 630:Drivers/CMSIS/Include/core_cm0.h **** {
 631:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 632:Drivers/CMSIS/Include/core_cm0.h **** }
 633:Drivers/CMSIS/Include/core_cm0.h **** 
 634:Drivers/CMSIS/Include/core_cm0.h **** 
 635:Drivers/CMSIS/Include/core_cm0.h **** /**
 636:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Disable External Interrupt
 637:Drivers/CMSIS/Include/core_cm0.h ****   \details Disables a device-specific interrupt in the NVIC interrupt controller.
 638:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 639:Drivers/CMSIS/Include/core_cm0.h ****  */
 640:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 641:Drivers/CMSIS/Include/core_cm0.h **** {
 642:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 643:Drivers/CMSIS/Include/core_cm0.h **** }
 644:Drivers/CMSIS/Include/core_cm0.h **** 
 645:Drivers/CMSIS/Include/core_cm0.h **** 
 646:Drivers/CMSIS/Include/core_cm0.h **** /**
 647:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Pending Interrupt
 648:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the pending register in the NVIC and returns the pending bit for the specified int
 649:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
 650:Drivers/CMSIS/Include/core_cm0.h ****   \return             0  Interrupt status is not pending.
 651:Drivers/CMSIS/Include/core_cm0.h ****   \return             1  Interrupt status is pending.
 652:Drivers/CMSIS/Include/core_cm0.h ****  */
 653:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 654:Drivers/CMSIS/Include/core_cm0.h **** {
 655:Drivers/CMSIS/Include/core_cm0.h ****   return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL
 656:Drivers/CMSIS/Include/core_cm0.h **** }
 657:Drivers/CMSIS/Include/core_cm0.h **** 
 658:Drivers/CMSIS/Include/core_cm0.h **** 
 659:Drivers/CMSIS/Include/core_cm0.h **** /**
 660:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Pending Interrupt
 661:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the pending bit of an external interrupt.
 662:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number. Value cannot be negative.
 663:Drivers/CMSIS/Include/core_cm0.h ****  */
 664:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 665:Drivers/CMSIS/Include/core_cm0.h **** {
 666:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 667:Drivers/CMSIS/Include/core_cm0.h **** }
 668:Drivers/CMSIS/Include/core_cm0.h **** 
 669:Drivers/CMSIS/Include/core_cm0.h **** 
 670:Drivers/CMSIS/Include/core_cm0.h **** /**
 671:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Clear Pending Interrupt
 672:Drivers/CMSIS/Include/core_cm0.h ****   \details Clears the pending bit of an external interrupt.
 673:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
 674:Drivers/CMSIS/Include/core_cm0.h ****  */
 675:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 676:Drivers/CMSIS/Include/core_cm0.h **** {
 677:Drivers/CMSIS/Include/core_cm0.h ****   NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 678:Drivers/CMSIS/Include/core_cm0.h **** }
 679:Drivers/CMSIS/Include/core_cm0.h **** 
 680:Drivers/CMSIS/Include/core_cm0.h **** 
 681:Drivers/CMSIS/Include/core_cm0.h **** /**
 682:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Set Interrupt Priority
 683:Drivers/CMSIS/Include/core_cm0.h ****   \details Sets the priority of an interrupt.
 684:Drivers/CMSIS/Include/core_cm0.h ****   \note    The priority cannot be set for every core interrupt.
 685:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]      IRQn  Interrupt number.
ARM GAS  /tmp/cc9UFUWX.s 			page 66


 686:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]  priority  Priority to set.
 687:Drivers/CMSIS/Include/core_cm0.h ****  */
 688:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 689:Drivers/CMSIS/Include/core_cm0.h **** {
 690:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 691:Drivers/CMSIS/Include/core_cm0.h ****   {
 692:Drivers/CMSIS/Include/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 693:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 694:Drivers/CMSIS/Include/core_cm0.h ****   }
 695:Drivers/CMSIS/Include/core_cm0.h ****   else
 696:Drivers/CMSIS/Include/core_cm0.h ****   {
 697:Drivers/CMSIS/Include/core_cm0.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
 698:Drivers/CMSIS/Include/core_cm0.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 699:Drivers/CMSIS/Include/core_cm0.h ****   }
 700:Drivers/CMSIS/Include/core_cm0.h **** }
 701:Drivers/CMSIS/Include/core_cm0.h **** 
 702:Drivers/CMSIS/Include/core_cm0.h **** 
 703:Drivers/CMSIS/Include/core_cm0.h **** /**
 704:Drivers/CMSIS/Include/core_cm0.h ****   \brief   Get Interrupt Priority
 705:Drivers/CMSIS/Include/core_cm0.h ****   \details Reads the priority of an interrupt.
 706:Drivers/CMSIS/Include/core_cm0.h ****            The interrupt number can be positive to specify an external (device specific) interrupt,
 707:Drivers/CMSIS/Include/core_cm0.h ****            or negative to specify an internal (core) interrupt.
 708:Drivers/CMSIS/Include/core_cm0.h ****   \param [in]   IRQn  Interrupt number.
 709:Drivers/CMSIS/Include/core_cm0.h ****   \return             Interrupt Priority.
 710:Drivers/CMSIS/Include/core_cm0.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 711:Drivers/CMSIS/Include/core_cm0.h ****  */
 712:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 713:Drivers/CMSIS/Include/core_cm0.h **** {
 714:Drivers/CMSIS/Include/core_cm0.h **** 
 715:Drivers/CMSIS/Include/core_cm0.h ****   if ((int32_t)(IRQn) < 0)
 716:Drivers/CMSIS/Include/core_cm0.h ****   {
 717:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 718:Drivers/CMSIS/Include/core_cm0.h ****   }
 719:Drivers/CMSIS/Include/core_cm0.h ****   else
 720:Drivers/CMSIS/Include/core_cm0.h ****   {
 721:Drivers/CMSIS/Include/core_cm0.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 722:Drivers/CMSIS/Include/core_cm0.h ****   }
 723:Drivers/CMSIS/Include/core_cm0.h **** }
 724:Drivers/CMSIS/Include/core_cm0.h **** 
 725:Drivers/CMSIS/Include/core_cm0.h **** 
 726:Drivers/CMSIS/Include/core_cm0.h **** /**
 727:Drivers/CMSIS/Include/core_cm0.h ****   \brief   System Reset
 728:Drivers/CMSIS/Include/core_cm0.h ****   \details Initiates a system reset request to reset the MCU.
 729:Drivers/CMSIS/Include/core_cm0.h ****  */
 730:Drivers/CMSIS/Include/core_cm0.h **** __STATIC_INLINE void NVIC_SystemReset(void)
 731:Drivers/CMSIS/Include/core_cm0.h **** {
 732:Drivers/CMSIS/Include/core_cm0.h ****   __DSB();                                                          /* Ensure all outstanding memor
 733:Drivers/CMSIS/Include/core_cm0.h ****                                                                        buffered write are completed
 734:Drivers/CMSIS/Include/core_cm0.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 1816              		.loc 3 734 0
 1817 00a2 9A4B     		ldr	r3, .L111+24
 1818 00a4 9A4A     		ldr	r2, .L111+28
 1819 00a6 DA60     		str	r2, [r3, #12]
 1820              	.LBB33:
 1821              	.LBB34:
 1822              		.loc 2 429 0
 1823              		.syntax divided
ARM GAS  /tmp/cc9UFUWX.s 			page 67


 1824              	@ 429 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1825 00a8 BFF34F8F 		dsb 0xF
 1826              	@ 0 "" 2
 1827              		.thumb
 1828              		.syntax unified
 1829              	.L91:
 1830              	.LBE34:
 1831              	.LBE33:
 1832              	.LBB35:
 1833              	.LBB36:
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1834              		.loc 2 375 0
 1835              		.syntax divided
 1836              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1837 00ac C046     		nop
 1838              	@ 0 "" 2
 1839              		.thumb
 1840              		.syntax unified
 1841 00ae FDE7     		b	.L91
 1842              	.L90:
 1843              	.LBE36:
 1844              	.LBE35:
 1845              	.LBE30:
 1846              	.LBE29:
 124:Src/main.c    ****     draw_string("by Jan Henrik", 10, 9 ,1);
 1847              		.loc 1 124 0
 1848 00b0 0123     		movs	r3, #1
 1849 00b2 0122     		movs	r2, #1
 1850 00b4 0F21     		movs	r1, #15
 1851 00b6 9748     		ldr	r0, .L111+32
 1852 00b8 FFF7FEFF 		bl	draw_string
 1853              	.LVL158:
 125:Src/main.c    ****     refresh();
 1854              		.loc 1 125 0
 1855 00bc 0123     		movs	r3, #1
 1856 00be 0922     		movs	r2, #9
 1857 00c0 0A21     		movs	r1, #10
 1858 00c2 9548     		ldr	r0, .L111+36
 1859 00c4 FFF7FEFF 		bl	draw_string
 1860              	.LVL159:
 126:Src/main.c    ****   }
 1861              		.loc 1 126 0
 1862 00c8 FFF7FEFF 		bl	refresh
 1863              	.LVL160:
 128:Src/main.c    **** 
 1864              		.loc 1 128 0
 1865 00cc FA20     		movs	r0, #250
 1866 00ce 8000     		lsls	r0, r0, #2
 1867 00d0 FFF7FEFF 		bl	HAL_Delay
 1868              	.LVL161:
 130:Src/main.c    **** 
 1869              		.loc 1 130 0
 1870 00d4 914B     		ldr	r3, .L111+40
 1871 00d6 1888     		ldrh	r0, [r3]
 1872 00d8 FFF7FEFF 		bl	__aeabi_ui2f
 1873              	.LVL162:
 1874 00dc 904B     		ldr	r3, .L111+44
ARM GAS  /tmp/cc9UFUWX.s 			page 68


 1875 00de 1860     		str	r0, [r3]
 1876 00e0 DDE0     		b	.L102
 1877              	.L109:
 1878              	.LBB37:
 141:Src/main.c    ****       s.writeFlash = 1;
 1879              		.loc 1 141 0
 1880 00e2 8F4C     		ldr	r4, .L111+44
 1881 00e4 8F49     		ldr	r1, .L111+48
 1882 00e6 2068     		ldr	r0, [r4]
 1883 00e8 FFF7FEFF 		bl	__aeabi_fsub
 1884              	.LVL163:
 1885 00ec 2060     		str	r0, [r4]
 142:Src/main.c    ****       HAL_Delay(50);
 1886              		.loc 1 142 0
 1887 00ee 8E4B     		ldr	r3, .L111+52
 1888 00f0 0122     		movs	r2, #1
 1889 00f2 1A75     		strb	r2, [r3, #20]
 143:Src/main.c    ****     }
 1890              		.loc 1 143 0
 1891 00f4 3220     		movs	r0, #50
 1892 00f6 FFF7FEFF 		bl	HAL_Delay
 1893              	.LVL164:
 1894 00fa E4E0     		b	.L92
 1895              	.L110:
 147:Src/main.c    ****       s.writeFlash = 1;
 1896              		.loc 1 147 0
 1897 00fc 884C     		ldr	r4, .L111+44
 1898 00fe 8949     		ldr	r1, .L111+48
 1899 0100 2068     		ldr	r0, [r4]
 1900 0102 FFF7FEFF 		bl	__aeabi_fadd
 1901              	.LVL165:
 1902 0106 2060     		str	r0, [r4]
 148:Src/main.c    ****       HAL_Delay(50);
 1903              		.loc 1 148 0
 1904 0108 874B     		ldr	r3, .L111+52
 1905 010a 0122     		movs	r2, #1
 1906 010c 1A75     		strb	r2, [r3, #20]
 149:Src/main.c    ****     }
 1907              		.loc 1 149 0
 1908 010e 3220     		movs	r0, #50
 1909 0110 FFF7FEFF 		bl	HAL_Delay
 1910              	.LVL166:
 1911 0114 DCE0     		b	.L93
 1912              	.L103:
 152:Src/main.c    **** 
 1913              		.loc 1 152 0
 1914 0116 854C     		ldr	r4, .L111+56
 1915              	.L94:
 152:Src/main.c    **** 
 1916              		.loc 1 152 0 is_stmt 0 discriminator 8
 1917 0118 814B     		ldr	r3, .L111+44
 1918 011a 1C60     		str	r4, [r3]
 154:Src/main.c    ****       HAL_FLASH_Unlock();
 1919              		.loc 1 154 0 is_stmt 1 discriminator 8
 1920 011c 824B     		ldr	r3, .L111+52
 1921 011e 0122     		movs	r2, #1
 1922 0120 1A75     		strb	r2, [r3, #20]
ARM GAS  /tmp/cc9UFUWX.s 			page 69


 155:Src/main.c    ****       FLASH->CR |= FLASH_CR_PER;
 1923              		.loc 1 155 0 discriminator 8
 1924 0122 FFF7FEFF 		bl	HAL_FLASH_Unlock
 1925              	.LVL167:
 156:Src/main.c    ****       FLASH->AR = 0x0800e400;
 1926              		.loc 1 156 0 discriminator 8
 1927 0126 824B     		ldr	r3, .L111+60
 1928 0128 1A69     		ldr	r2, [r3, #16]
 1929 012a 0221     		movs	r1, #2
 1930 012c 0A43     		orrs	r2, r1
 1931 012e 1A61     		str	r2, [r3, #16]
 157:Src/main.c    ****       FLASH->CR |= FLASH_CR_STRT;
 1932              		.loc 1 157 0 discriminator 8
 1933 0130 7A4A     		ldr	r2, .L111+40
 1934 0132 5A61     		str	r2, [r3, #20]
 158:Src/main.c    ****       while ((FLASH->SR & FLASH_SR_BSY) != 0){}
 1935              		.loc 1 158 0 discriminator 8
 1936 0134 1A69     		ldr	r2, [r3, #16]
 1937 0136 3E31     		adds	r1, r1, #62
 1938 0138 0A43     		orrs	r2, r1
 1939 013a 1A61     		str	r2, [r3, #16]
 1940              	.L96:
 159:Src/main.c    ****       if ((FLASH->SR & FLASH_SR_EOP) != 0){
 1941              		.loc 1 159 0 discriminator 1
 1942 013c 7C4B     		ldr	r3, .L111+60
 1943 013e DB68     		ldr	r3, [r3, #12]
 1944 0140 DB07     		lsls	r3, r3, #31
 1945 0142 FBD4     		bmi	.L96
 160:Src/main.c    ****         FLASH->SR |= FLASH_SR_EOP;
 1946              		.loc 1 160 0
 1947 0144 7A4B     		ldr	r3, .L111+60
 1948 0146 DB68     		ldr	r3, [r3, #12]
 1949 0148 9B06     		lsls	r3, r3, #26
 1950 014a 65D4     		bmi	.L107
 1951              	.L97:
 170:Src/main.c    ****     char str2[10] = "          ";
 1952              		.loc 1 170 0
 1953 014c 03AE     		add	r6, sp, #12
 1954 014e 794B     		ldr	r3, .L111+64
 1955 0150 3100     		movs	r1, r6
 1956 0152 1A00     		movs	r2, r3
 1957 0154 11CA     		ldmia	r2!, {r0, r4}
 1958 0156 11C1     		stmia	r1!, {r0, r4}
 1959 0158 1088     		ldrh	r0, [r2]
 1960 015a 0880     		strh	r0, [r1]
 171:Src/main.c    ****     char str3[10] = "          ";
 1961              		.loc 1 171 0
 1962 015c 06AD     		add	r5, sp, #24
 1963 015e 2900     		movs	r1, r5
 1964 0160 1800     		movs	r0, r3
 1965 0162 90C8     		ldmia	r0!, {r4, r7}
 1966 0164 90C1     		stmia	r1!, {r4, r7}
 1967 0166 1088     		ldrh	r0, [r2]
 1968 0168 0880     		strh	r0, [r1]
 172:Src/main.c    ****     sprintf(str1, "%d C", (uint16_t)r.target);
 1969              		.loc 1 172 0
 1970 016a 09AC     		add	r4, sp, #36
ARM GAS  /tmp/cc9UFUWX.s 			page 70


 1971 016c 2100     		movs	r1, r4
 1972 016e 81CB     		ldmia	r3!, {r0, r7}
 1973 0170 81C1     		stmia	r1!, {r0, r7}
 1974 0172 1388     		ldrh	r3, [r2]
 1975 0174 0B80     		strh	r3, [r1]
 173:Src/main.c    ****     sprintf(str2, "%d.%d C", (uint16_t)s.ttipavg,(uint16_t)((s.ttipavg-(uint16_t)s.ttipavg)*10.0f))
 1976              		.loc 1 173 0
 1977 0176 6A4B     		ldr	r3, .L111+44
 1978 0178 1868     		ldr	r0, [r3]
 1979 017a FFF7FEFF 		bl	__aeabi_f2uiz
 1980              	.LVL168:
 1981 017e 82B2     		uxth	r2, r0
 1982 0180 6D49     		ldr	r1, .L111+68
 1983 0182 3000     		movs	r0, r6
 1984 0184 FFF7FEFF 		bl	sprintf
 1985              	.LVL169:
 174:Src/main.c    ****     sprintf(str3, "%d.%d V", (uint16_t)s.uin,(uint16_t)((s.uin-(uint16_t)s.uin)*10.0f));
 1986              		.loc 1 174 0
 1987 0188 674F     		ldr	r7, .L111+52
 1988 018a 7B68     		ldr	r3, [r7, #4]
 1989 018c 0093     		str	r3, [sp]
 1990 018e 181C     		adds	r0, r3, #0
 1991 0190 FFF7FEFF 		bl	__aeabi_f2uiz
 1992              	.LVL170:
 1993 0194 82B2     		uxth	r2, r0
 1994 0196 0192     		str	r2, [sp, #4]
 1995 0198 1000     		movs	r0, r2
 1996 019a FFF7FEFF 		bl	__aeabi_i2f
 1997              	.LVL171:
 1998 019e 011C     		adds	r1, r0, #0
 1999 01a0 0098     		ldr	r0, [sp]
 2000 01a2 FFF7FEFF 		bl	__aeabi_fsub
 2001              	.LVL172:
 2002 01a6 6549     		ldr	r1, .L111+72
 2003 01a8 FFF7FEFF 		bl	__aeabi_fmul
 2004              	.LVL173:
 2005 01ac FFF7FEFF 		bl	__aeabi_f2uiz
 2006              	.LVL174:
 2007 01b0 83B2     		uxth	r3, r0
 2008 01b2 019A     		ldr	r2, [sp, #4]
 2009 01b4 6249     		ldr	r1, .L111+76
 2010 01b6 2800     		movs	r0, r5
 2011 01b8 FFF7FEFF 		bl	sprintf
 2012              	.LVL175:
 175:Src/main.c    **** 
 2013              		.loc 1 175 0
 2014 01bc BF68     		ldr	r7, [r7, #8]
 2015 01be 381C     		adds	r0, r7, #0
 2016 01c0 FFF7FEFF 		bl	__aeabi_f2uiz
 2017              	.LVL176:
 2018 01c4 83B2     		uxth	r3, r0
 2019 01c6 0093     		str	r3, [sp]
 2020 01c8 1800     		movs	r0, r3
 2021 01ca FFF7FEFF 		bl	__aeabi_i2f
 2022              	.LVL177:
 2023 01ce 011C     		adds	r1, r0, #0
 2024 01d0 381C     		adds	r0, r7, #0
ARM GAS  /tmp/cc9UFUWX.s 			page 71


 2025 01d2 FFF7FEFF 		bl	__aeabi_fsub
 2026              	.LVL178:
 2027 01d6 5949     		ldr	r1, .L111+72
 2028 01d8 FFF7FEFF 		bl	__aeabi_fmul
 2029              	.LVL179:
 2030 01dc FFF7FEFF 		bl	__aeabi_f2uiz
 2031              	.LVL180:
 2032 01e0 83B2     		uxth	r3, r0
 2033 01e2 009A     		ldr	r2, [sp]
 2034 01e4 5749     		ldr	r1, .L111+80
 2035 01e6 2000     		movs	r0, r4
 2036 01e8 FFF7FEFF 		bl	sprintf
 2037              	.LVL181:
 177:Src/main.c    ****     draw_string(str1, 10, 1 ,1);
 2038              		.loc 1 177 0
 2039 01ec FFF7FEFF 		bl	clear_screen
 2040              	.LVL182:
 178:Src/main.c    ****     draw_string(str2, 10, 9 ,1);
 2041              		.loc 1 178 0
 2042 01f0 0123     		movs	r3, #1
 2043 01f2 0122     		movs	r2, #1
 2044 01f4 0A21     		movs	r1, #10
 2045 01f6 3000     		movs	r0, r6
 2046 01f8 FFF7FEFF 		bl	draw_string
 2047              	.LVL183:
 179:Src/main.c    ****     draw_string(str3, 60, 1 ,1);
 2048              		.loc 1 179 0
 2049 01fc 0123     		movs	r3, #1
 2050 01fe 0922     		movs	r2, #9
 2051 0200 0A21     		movs	r1, #10
 2052 0202 2800     		movs	r0, r5
 2053 0204 FFF7FEFF 		bl	draw_string
 2054              	.LVL184:
 180:Src/main.c    **** 
 2055              		.loc 1 180 0
 2056 0208 0123     		movs	r3, #1
 2057 020a 0122     		movs	r2, #1
 2058 020c 3C21     		movs	r1, #60
 2059 020e 2000     		movs	r0, r4
 2060 0210 FFF7FEFF 		bl	draw_string
 2061              	.LVL185:
 2062              	.LBB38:
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2063              		.loc 1 182 0
 2064 0214 0024     		movs	r4, #0
 2065 0216 29E0     		b	.L98
 2066              	.LVL186:
 2067              	.L107:
 2068              	.LBE38:
 161:Src/main.c    ****         FLASH->CR &= ~FLASH_CR_PER;
 2069              		.loc 1 161 0
 2070 0218 454B     		ldr	r3, .L111+60
 2071 021a DA68     		ldr	r2, [r3, #12]
 2072 021c 2021     		movs	r1, #32
 2073 021e 0A43     		orrs	r2, r1
 2074 0220 DA60     		str	r2, [r3, #12]
 162:Src/main.c    ****         HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, 0x0800e400, (uint16_t)r.target);
ARM GAS  /tmp/cc9UFUWX.s 			page 72


 2075              		.loc 1 162 0
 2076 0222 1A69     		ldr	r2, [r3, #16]
 2077 0224 1E39     		subs	r1, r1, #30
 2078 0226 8A43     		bics	r2, r1
 2079 0228 1A61     		str	r2, [r3, #16]
 163:Src/main.c    ****         HAL_FLASH_Lock();
 2080              		.loc 1 163 0
 2081 022a 3D4B     		ldr	r3, .L111+44
 2082 022c 1868     		ldr	r0, [r3]
 2083 022e FFF7FEFF 		bl	__aeabi_f2uiz
 2084              	.LVL187:
 2085 0232 82B2     		uxth	r2, r0
 2086 0234 0023     		movs	r3, #0
 2087 0236 3949     		ldr	r1, .L111+40
 2088 0238 0120     		movs	r0, #1
 2089 023a FFF7FEFF 		bl	HAL_FLASH_Program
 2090              	.LVL188:
 164:Src/main.c    ****         s.writeFlash = 0;
 2091              		.loc 1 164 0
 2092 023e FFF7FEFF 		bl	HAL_FLASH_Lock
 2093              	.LVL189:
 165:Src/main.c    ****       }
 2094              		.loc 1 165 0
 2095 0242 0022     		movs	r2, #0
 2096 0244 384B     		ldr	r3, .L111+52
 2097 0246 1A75     		strb	r2, [r3, #20]
 2098 0248 80E7     		b	.L97
 2099              	.LVL190:
 2100              	.L104:
 2101              	.LBB39:
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2102              		.loc 1 182 0
 2103 024a 3F4D     		ldr	r5, .L111+84
 2104              	.L99:
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2105              		.loc 1 182 0 is_stmt 0 discriminator 10
 2106 024c 291C     		adds	r1, r5, #0
 2107 024e 301C     		adds	r0, r6, #0
 2108 0250 FFF7FEFF 		bl	__aeabi_fcmple
 2109              	.LVL191:
 2110 0254 0028     		cmp	r0, #0
 2111 0256 20D0     		beq	.L108
 183:Src/main.c    ****     }
 2112              		.loc 1 183 0 is_stmt 1 discriminator 11
 2113 0258 2000     		movs	r0, r4
 2114 025a 3C30     		adds	r0, r0, #60
 2115 025c 00B2     		sxth	r0, r0
 2116 025e 0123     		movs	r3, #1
 2117 0260 0822     		movs	r2, #8
 2118 0262 0821     		movs	r1, #8
 2119 0264 FFF7FEFF 		bl	draw_v_line
 2120              	.LVL192:
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2121              		.loc 1 182 0 discriminator 11
 2122 0268 0134     		adds	r4, r4, #1
 2123              	.LVL193:
 2124 026a A4B2     		uxth	r4, r4
ARM GAS  /tmp/cc9UFUWX.s 			page 73


 2125              	.LVL194:
 2126              	.L98:
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2127              		.loc 1 182 0 is_stmt 0 discriminator 1
 2128 026c 2000     		movs	r0, r4
 2129 026e FFF7FEFF 		bl	__aeabi_i2f
 2130              	.LVL195:
 2131 0272 061C     		adds	r6, r0, #0
 2132 0274 2A4B     		ldr	r3, .L111+44
 2133 0276 5868     		ldr	r0, [r3, #4]
 2134 0278 3449     		ldr	r1, .L111+88
 2135 027a FFF7FEFF 		bl	__aeabi_fmul
 2136              	.LVL196:
 2137 027e 051C     		adds	r5, r0, #0
 2138 0280 3149     		ldr	r1, .L111+84
 2139 0282 FFF7FEFF 		bl	__aeabi_fcmpgt
 2140              	.LVL197:
 2141 0286 0028     		cmp	r0, #0
 2142 0288 DFD1     		bne	.L104
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2143              		.loc 1 182 0 discriminator 4
 2144 028a 0021     		movs	r1, #0
 2145 028c 281C     		adds	r0, r5, #0
 2146 028e FFF7FEFF 		bl	__aeabi_fcmplt
 2147              	.LVL198:
 2148 0292 0028     		cmp	r0, #0
 2149 0294 DAD0     		beq	.L99
 182:Src/main.c    ****       draw_v_line(60+i, 8, 8, 1);
 2150              		.loc 1 182 0
 2151 0296 0025     		movs	r5, #0
 2152 0298 D8E7     		b	.L99
 2153              	.L108:
 2154              	.LBE39:
 186:Src/main.c    ****   }
 2155              		.loc 1 186 0 is_stmt 1
 2156 029a FFF7FEFF 		bl	refresh
 2157              	.LVL199:
 2158              	.L102:
 134:Src/main.c    **** 
 2159              		.loc 1 134 0
 2160 029e 3220     		movs	r0, #50
 2161 02a0 FFF7FEFF 		bl	HAL_Delay
 2162              	.LVL200:
 137:Src/main.c    ****     s.button[1] = HAL_GPIO_ReadPin(GPIOA,B2_Pin);
 2163              		.loc 1 137 0
 2164 02a4 9025     		movs	r5, #144
 2165 02a6 ED05     		lsls	r5, r5, #23
 2166 02a8 0821     		movs	r1, #8
 2167 02aa 2800     		movs	r0, r5
 2168 02ac FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2169              	.LVL201:
 2170 02b0 1D4C     		ldr	r4, .L111+52
 2171 02b2 6075     		strb	r0, [r4, #21]
 138:Src/main.c    **** 
 2172              		.loc 1 138 0
 2173 02b4 1021     		movs	r1, #16
 2174 02b6 2800     		movs	r0, r5
ARM GAS  /tmp/cc9UFUWX.s 			page 74


 2175 02b8 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2176              	.LVL202:
 2177 02bc A075     		strb	r0, [r4, #22]
 140:Src/main.c    ****       r.target -= 5;
 2178              		.loc 1 140 0
 2179 02be 637D     		ldrb	r3, [r4, #21]
 2180 02c0 012B     		cmp	r3, #1
 2181 02c2 00D1     		bne	.LCB1883
 2182 02c4 0DE7     		b	.L109	@long jump
 2183              	.LCB1883:
 2184              	.L92:
 146:Src/main.c    ****       r.target += 5;
 2185              		.loc 1 146 0
 2186 02c6 184B     		ldr	r3, .L111+52
 2187 02c8 9B7D     		ldrb	r3, [r3, #22]
 2188 02ca 012B     		cmp	r3, #1
 2189 02cc 00D1     		bne	.LCB1888
 2190 02ce 15E7     		b	.L110	@long jump
 2191              	.LCB1888:
 2192              	.L93:
 152:Src/main.c    **** 
 2193              		.loc 1 152 0
 2194 02d0 134B     		ldr	r3, .L111+44
 2195 02d2 1C68     		ldr	r4, [r3]
 2196 02d4 1549     		ldr	r1, .L111+56
 2197 02d6 201C     		adds	r0, r4, #0
 2198 02d8 FFF7FEFF 		bl	__aeabi_fcmpgt
 2199              	.LVL203:
 2200 02dc 0028     		cmp	r0, #0
 2201 02de 00D0     		beq	.LCB1897
 2202 02e0 19E7     		b	.L103	@long jump
 2203              	.LCB1897:
 152:Src/main.c    **** 
 2204              		.loc 1 152 0 is_stmt 0 discriminator 2
 2205 02e2 1B49     		ldr	r1, .L111+92
 2206 02e4 201C     		adds	r0, r4, #0
 2207 02e6 FFF7FEFF 		bl	__aeabi_fcmplt
 2208              	.LVL204:
 2209 02ea 0028     		cmp	r0, #0
 2210 02ec 00D1     		bne	.LCB1903
 2211 02ee 13E7     		b	.L94	@long jump
 2212              	.LCB1903:
 152:Src/main.c    **** 
 2213              		.loc 1 152 0
 2214 02f0 174C     		ldr	r4, .L111+92
 2215 02f2 11E7     		b	.L94
 2216              	.L112:
 2217              		.align	2
 2218              	.L111:
 2219 02f4 00000000 		.word	htim1
 2220 02f8 00000000 		.word	.LANCHOR0
 2221 02fc 00000000 		.word	hadc
 2222 0300 00000000 		.word	.LC23
 2223 0304 F03F0020 		.word	536887280
 2224 0308 EFBEADDE 		.word	-559038737
 2225 030c 00ED00E0 		.word	-536810240
 2226 0310 0400FA05 		.word	100270084
ARM GAS  /tmp/cc9UFUWX.s 			page 75


 2227 0314 10000000 		.word	.LC25
 2228 0318 1C000000 		.word	.LC27
 2229 031c 00E40008 		.word	134276096
 2230 0320 00000000 		.word	.LANCHOR3
 2231 0324 0000A040 		.word	1084227584
 2232 0328 00000000 		.word	.LANCHOR1
 2233 032c 0000C843 		.word	1137180672
 2234 0330 00200240 		.word	1073881088
 2235 0334 00000000 		.word	.LANCHOR6
 2236 0338 2C000000 		.word	.LC33
 2237 033c 00002041 		.word	1092616192
 2238 0340 34000000 		.word	.LC35
 2239 0344 3C000000 		.word	.LC37
 2240 0348 0000F041 		.word	1106247680
 2241 034c 00004040 		.word	1077936128
 2242 0350 0000A041 		.word	1101004800
 2243              	.LBE37:
 2244              		.cfi_endproc
 2245              	.LFE37:
 2247              		.section	.text.Error_Handler,"ax",%progbits
 2248              		.align	1
 2249              		.global	Error_Handler
 2250              		.syntax unified
 2251              		.code	16
 2252              		.thumb_func
 2253              		.fpu softvfp
 2255              	Error_Handler:
 2256              	.LFB55:
 564:Src/main.c    **** 
 565:Src/main.c    **** void Error_Handler(void)
 566:Src/main.c    **** {
 2257              		.loc 1 566 0 is_stmt 1
 2258              		.cfi_startproc
 2259              		@ args = 0, pretend = 0, frame = 0
 2260              		@ frame_needed = 0, uses_anonymous_args = 0
 2261              		@ link register save eliminated.
 567:Src/main.c    **** 
 568:Src/main.c    **** }
 2262              		.loc 1 568 0
 2263              		@ sp needed
 2264 0000 7047     		bx	lr
 2265              		.cfi_endproc
 2266              	.LFE55:
 2268              		.global	OLED_Setup_Array
 2269              		.global	REFRESH_COMMANDS
 2270              		.comm	screenBuffer,218,4
 2271              		.global	tipcal
 2272              		.global	r
 2273              		.global	s
 2274              		.comm	hpcd_USB_FS,544,4
 2275              		.comm	htim1,64,4
 2276              		.comm	hi2c2,76,4
 2277              		.comm	hi2c1,76,4
 2278              		.comm	hdma_adc,68,4
 2279              		.comm	hadc,76,4
 2280              		.global	font
 2281              		.section	.rodata
ARM GAS  /tmp/cc9UFUWX.s 			page 76


 2282              		.align	2
 2283              		.set	.LANCHOR6,. + 0
 2284              	.LC31:
 2285 0000 20202020 		.ascii	"          \000"
 2285      20202020 
 2285      202000
 2286              		.section	.bss.ADC_raw,"aw",%nobits
 2287              		.align	2
 2288              		.set	.LANCHOR0,. + 0
 2291              	ADC_raw:
 2292 0000 00000000 		.space	8
 2292      00000000 
 2293              		.section	.bss.s,"aw",%nobits
 2294              		.align	2
 2295              		.set	.LANCHOR1,. + 0
 2298              	s:
 2299 0000 00000000 		.space	24
 2299      00000000 
 2299      00000000 
 2299      00000000 
 2299      00000000 
 2300              		.section	.data.OLED_Setup_Array,"aw",%progbits
 2301              		.align	2
 2302              		.set	.LANCHOR5,. + 0
 2305              	OLED_Setup_Array:
 2306 0000 80       		.byte	-128
 2307 0001 AE       		.byte	-82
 2308 0002 80       		.byte	-128
 2309 0003 D5       		.byte	-43
 2310 0004 80       		.byte	-128
 2311 0005 52       		.byte	82
 2312 0006 80       		.byte	-128
 2313 0007 A8       		.byte	-88
 2314 0008 80       		.byte	-128
 2315 0009 0F       		.byte	15
 2316 000a 80       		.byte	-128
 2317 000b C0       		.byte	-64
 2318 000c 80       		.byte	-128
 2319 000d D3       		.byte	-45
 2320 000e 80       		.byte	-128
 2321 000f 00       		.byte	0
 2322 0010 80       		.byte	-128
 2323 0011 40       		.byte	64
 2324 0012 80       		.byte	-128
 2325 0013 A0       		.byte	-96
 2326 0014 80       		.byte	-128
 2327 0015 8D       		.byte	-115
 2328 0016 80       		.byte	-128
 2329 0017 14       		.byte	20
 2330 0018 80       		.byte	-128
 2331 0019 DA       		.byte	-38
 2332 001a 80       		.byte	-128
 2333 001b 02       		.byte	2
 2334 001c 80       		.byte	-128
 2335 001d 81       		.byte	-127
 2336 001e 80       		.byte	-128
 2337 001f 33       		.byte	51
ARM GAS  /tmp/cc9UFUWX.s 			page 77


 2338 0020 80       		.byte	-128
 2339 0021 D9       		.byte	-39
 2340 0022 80       		.byte	-128
 2341 0023 F1       		.byte	-15
 2342 0024 80       		.byte	-128
 2343 0025 DB       		.byte	-37
 2344 0026 80       		.byte	-128
 2345 0027 30       		.byte	48
 2346 0028 80       		.byte	-128
 2347 0029 A4       		.byte	-92
 2348 002a 80       		.byte	-128
 2349 002b A6       		.byte	-90
 2350 002c 80       		.byte	-128
 2351 002d 20       		.byte	32
 2352 002e 80       		.byte	-128
 2353 002f 00       		.byte	0
 2354 0030 80       		.byte	-128
 2355 0031 AF       		.byte	-81
 2356              		.section	.data.r,"aw",%progbits
 2357              		.align	2
 2358              		.set	.LANCHOR3,. + 0
 2361              	r:
 2362 0000 00005C43 		.word	1130102784
 2363 0004 00000000 		.space	12
 2363      00000000 
 2363      00000000 
 2364 0010 00004843 		.word	1128792064
 2365 0014 00000000 		.space	8
 2365      00000000 
 2366 001c CDCCCC3D 		.word	1036831949
 2367 0020 CDCCCC3E 		.word	1053609165
 2368 0024 CDCC4C3D 		.word	1028443341
 2369 0028 CDCC4C3E 		.word	1045220557
 2370 002c 00004041 		.word	1094713344
 2371              		.section	.data.tipcal,"aw",%progbits
 2372              		.align	2
 2373              		.set	.LANCHOR2,. + 0
 2376              	tipcal:
 2377 0000 0000F042 		.word	1123024896
 2378 0004 0000B842 		.word	1119354880
 2379              		.section	.rodata.REFRESH_COMMANDS,"a",%progbits
 2380              		.align	2
 2381              		.set	.LANCHOR4,. + 0
 2384              	REFRESH_COMMANDS:
 2385 0000 80       		.byte	-128
 2386 0001 AF       		.byte	-81
 2387 0002 80       		.byte	-128
 2388 0003 21       		.byte	33
 2389 0004 80       		.byte	-128
 2390 0005 20       		.byte	32
 2391 0006 80       		.byte	-128
 2392 0007 7F       		.byte	127
 2393 0008 80       		.byte	-128
 2394 0009 C0       		.byte	-64
 2395 000a 80       		.byte	-128
 2396 000b 22       		.byte	34
 2397 000c 80       		.byte	-128
ARM GAS  /tmp/cc9UFUWX.s 			page 78


 2398 000d 00       		.byte	0
 2399 000e 80       		.byte	-128
 2400 000f 01       		.byte	1
 2401 0010 40       		.byte	64
 2402              		.section	.rodata.font,"a",%progbits
 2403              		.align	2
 2406              	font:
 2407 0000 00       		.byte	0
 2408 0001 00       		.byte	0
 2409 0002 00       		.byte	0
 2410 0003 00       		.byte	0
 2411 0004 00       		.byte	0
 2412 0005 00       		.byte	0
 2413 0006 2F       		.byte	47
 2414 0007 00       		.byte	0
 2415 0008 00       		.byte	0
 2416 0009 00       		.byte	0
 2417 000a 00       		.byte	0
 2418 000b 00       		.byte	0
 2419 000c 03       		.byte	3
 2420 000d 00       		.byte	0
 2421 000e 03       		.byte	3
 2422 000f 00       		.byte	0
 2423 0010 00       		.byte	0
 2424 0011 00       		.byte	0
 2425 0012 12       		.byte	18
 2426 0013 3F       		.byte	63
 2427 0014 12       		.byte	18
 2428 0015 12       		.byte	18
 2429 0016 3F       		.byte	63
 2430 0017 12       		.byte	18
 2431 0018 2E       		.byte	46
 2432 0019 2A       		.byte	42
 2433 001a 7F       		.byte	127
 2434 001b 2A       		.byte	42
 2435 001c 3A       		.byte	58
 2436 001d 00       		.byte	0
 2437 001e 23       		.byte	35
 2438 001f 13       		.byte	19
 2439 0020 08       		.byte	8
 2440 0021 04       		.byte	4
 2441 0022 32       		.byte	50
 2442 0023 31       		.byte	49
 2443 0024 10       		.byte	16
 2444 0025 2A       		.byte	42
 2445 0026 25       		.byte	37
 2446 0027 2A       		.byte	42
 2447 0028 10       		.byte	16
 2448 0029 20       		.byte	32
 2449 002a 02       		.byte	2
 2450 002b 01       		.byte	1
 2451 002c 00       		.byte	0
 2452 002d 00       		.byte	0
 2453 002e 00       		.byte	0
 2454 002f 00       		.byte	0
 2455 0030 1E       		.byte	30
 2456 0031 21       		.byte	33
ARM GAS  /tmp/cc9UFUWX.s 			page 79


 2457 0032 00       		.byte	0
 2458 0033 00       		.byte	0
 2459 0034 00       		.byte	0
 2460 0035 00       		.byte	0
 2461 0036 21       		.byte	33
 2462 0037 1E       		.byte	30
 2463 0038 00       		.byte	0
 2464 0039 00       		.byte	0
 2465 003a 00       		.byte	0
 2466 003b 00       		.byte	0
 2467 003c 08       		.byte	8
 2468 003d 2A       		.byte	42
 2469 003e 1C       		.byte	28
 2470 003f 2A       		.byte	42
 2471 0040 08       		.byte	8
 2472 0041 08       		.byte	8
 2473 0042 08       		.byte	8
 2474 0043 08       		.byte	8
 2475 0044 3E       		.byte	62
 2476 0045 08       		.byte	8
 2477 0046 08       		.byte	8
 2478 0047 08       		.byte	8
 2479 0048 80       		.byte	-128
 2480 0049 60       		.byte	96
 2481 004a 00       		.byte	0
 2482 004b 00       		.byte	0
 2483 004c 00       		.byte	0
 2484 004d 00       		.byte	0
 2485 004e 08       		.byte	8
 2486 004f 08       		.byte	8
 2487 0050 08       		.byte	8
 2488 0051 08       		.byte	8
 2489 0052 08       		.byte	8
 2490 0053 00       		.byte	0
 2491 0054 30       		.byte	48
 2492 0055 30       		.byte	48
 2493 0056 00       		.byte	0
 2494 0057 00       		.byte	0
 2495 0058 00       		.byte	0
 2496 0059 00       		.byte	0
 2497 005a 20       		.byte	32
 2498 005b 10       		.byte	16
 2499 005c 08       		.byte	8
 2500 005d 04       		.byte	4
 2501 005e 02       		.byte	2
 2502 005f 00       		.byte	0
 2503 0060 1E       		.byte	30
 2504 0061 31       		.byte	49
 2505 0062 29       		.byte	41
 2506 0063 25       		.byte	37
 2507 0064 23       		.byte	35
 2508 0065 1E       		.byte	30
 2509 0066 22       		.byte	34
 2510 0067 21       		.byte	33
 2511 0068 3F       		.byte	63
 2512 0069 20       		.byte	32
 2513 006a 20       		.byte	32
ARM GAS  /tmp/cc9UFUWX.s 			page 80


 2514 006b 20       		.byte	32
 2515 006c 32       		.byte	50
 2516 006d 29       		.byte	41
 2517 006e 29       		.byte	41
 2518 006f 29       		.byte	41
 2519 0070 29       		.byte	41
 2520 0071 26       		.byte	38
 2521 0072 12       		.byte	18
 2522 0073 21       		.byte	33
 2523 0074 21       		.byte	33
 2524 0075 25       		.byte	37
 2525 0076 25       		.byte	37
 2526 0077 1A       		.byte	26
 2527 0078 18       		.byte	24
 2528 0079 14       		.byte	20
 2529 007a 12       		.byte	18
 2530 007b 3F       		.byte	63
 2531 007c 10       		.byte	16
 2532 007d 10       		.byte	16
 2533 007e 17       		.byte	23
 2534 007f 25       		.byte	37
 2535 0080 25       		.byte	37
 2536 0081 25       		.byte	37
 2537 0082 25       		.byte	37
 2538 0083 19       		.byte	25
 2539 0084 1E       		.byte	30
 2540 0085 25       		.byte	37
 2541 0086 25       		.byte	37
 2542 0087 25       		.byte	37
 2543 0088 25       		.byte	37
 2544 0089 18       		.byte	24
 2545 008a 01       		.byte	1
 2546 008b 01       		.byte	1
 2547 008c 31       		.byte	49
 2548 008d 09       		.byte	9
 2549 008e 05       		.byte	5
 2550 008f 03       		.byte	3
 2551 0090 1A       		.byte	26
 2552 0091 25       		.byte	37
 2553 0092 25       		.byte	37
 2554 0093 25       		.byte	37
 2555 0094 25       		.byte	37
 2556 0095 1A       		.byte	26
 2557 0096 06       		.byte	6
 2558 0097 29       		.byte	41
 2559 0098 29       		.byte	41
 2560 0099 29       		.byte	41
 2561 009a 29       		.byte	41
 2562 009b 1E       		.byte	30
 2563 009c 24       		.byte	36
 2564 009d 00       		.byte	0
 2565 009e 00       		.byte	0
 2566 009f 00       		.byte	0
 2567 00a0 00       		.byte	0
 2568 00a1 00       		.byte	0
 2569 00a2 80       		.byte	-128
 2570 00a3 64       		.byte	100
ARM GAS  /tmp/cc9UFUWX.s 			page 81


 2571 00a4 00       		.byte	0
 2572 00a5 00       		.byte	0
 2573 00a6 00       		.byte	0
 2574 00a7 00       		.byte	0
 2575 00a8 08       		.byte	8
 2576 00a9 14       		.byte	20
 2577 00aa 22       		.byte	34
 2578 00ab 00       		.byte	0
 2579 00ac 00       		.byte	0
 2580 00ad 00       		.byte	0
 2581 00ae 14       		.byte	20
 2582 00af 14       		.byte	20
 2583 00b0 14       		.byte	20
 2584 00b1 14       		.byte	20
 2585 00b2 14       		.byte	20
 2586 00b3 00       		.byte	0
 2587 00b4 22       		.byte	34
 2588 00b5 14       		.byte	20
 2589 00b6 08       		.byte	8
 2590 00b7 00       		.byte	0
 2591 00b8 00       		.byte	0
 2592 00b9 00       		.byte	0
 2593 00ba 02       		.byte	2
 2594 00bb 01       		.byte	1
 2595 00bc 01       		.byte	1
 2596 00bd 29       		.byte	41
 2597 00be 05       		.byte	5
 2598 00bf 02       		.byte	2
 2599 00c0 1E       		.byte	30
 2600 00c1 21       		.byte	33
 2601 00c2 2D       		.byte	45
 2602 00c3 2B       		.byte	43
 2603 00c4 2D       		.byte	45
 2604 00c5 0E       		.byte	14
 2605 00c6 3E       		.byte	62
 2606 00c7 09       		.byte	9
 2607 00c8 09       		.byte	9
 2608 00c9 09       		.byte	9
 2609 00ca 09       		.byte	9
 2610 00cb 3E       		.byte	62
 2611 00cc 3F       		.byte	63
 2612 00cd 25       		.byte	37
 2613 00ce 25       		.byte	37
 2614 00cf 25       		.byte	37
 2615 00d0 25       		.byte	37
 2616 00d1 1A       		.byte	26
 2617 00d2 1E       		.byte	30
 2618 00d3 21       		.byte	33
 2619 00d4 21       		.byte	33
 2620 00d5 21       		.byte	33
 2621 00d6 21       		.byte	33
 2622 00d7 12       		.byte	18
 2623 00d8 3F       		.byte	63
 2624 00d9 21       		.byte	33
 2625 00da 21       		.byte	33
 2626 00db 21       		.byte	33
 2627 00dc 12       		.byte	18
ARM GAS  /tmp/cc9UFUWX.s 			page 82


 2628 00dd 0C       		.byte	12
 2629 00de 3F       		.byte	63
 2630 00df 25       		.byte	37
 2631 00e0 25       		.byte	37
 2632 00e1 25       		.byte	37
 2633 00e2 25       		.byte	37
 2634 00e3 21       		.byte	33
 2635 00e4 3F       		.byte	63
 2636 00e5 05       		.byte	5
 2637 00e6 05       		.byte	5
 2638 00e7 05       		.byte	5
 2639 00e8 05       		.byte	5
 2640 00e9 01       		.byte	1
 2641 00ea 1E       		.byte	30
 2642 00eb 21       		.byte	33
 2643 00ec 21       		.byte	33
 2644 00ed 21       		.byte	33
 2645 00ee 29       		.byte	41
 2646 00ef 1A       		.byte	26
 2647 00f0 3F       		.byte	63
 2648 00f1 04       		.byte	4
 2649 00f2 04       		.byte	4
 2650 00f3 04       		.byte	4
 2651 00f4 04       		.byte	4
 2652 00f5 3F       		.byte	63
 2653 00f6 21       		.byte	33
 2654 00f7 21       		.byte	33
 2655 00f8 3F       		.byte	63
 2656 00f9 21       		.byte	33
 2657 00fa 21       		.byte	33
 2658 00fb 21       		.byte	33
 2659 00fc 10       		.byte	16
 2660 00fd 20       		.byte	32
 2661 00fe 20       		.byte	32
 2662 00ff 20       		.byte	32
 2663 0100 20       		.byte	32
 2664 0101 1F       		.byte	31
 2665 0102 3F       		.byte	63
 2666 0103 04       		.byte	4
 2667 0104 0C       		.byte	12
 2668 0105 0A       		.byte	10
 2669 0106 11       		.byte	17
 2670 0107 20       		.byte	32
 2671 0108 3F       		.byte	63
 2672 0109 20       		.byte	32
 2673 010a 20       		.byte	32
 2674 010b 20       		.byte	32
 2675 010c 20       		.byte	32
 2676 010d 20       		.byte	32
 2677 010e 3F       		.byte	63
 2678 010f 02       		.byte	2
 2679 0110 04       		.byte	4
 2680 0111 04       		.byte	4
 2681 0112 02       		.byte	2
 2682 0113 3F       		.byte	63
 2683 0114 3F       		.byte	63
 2684 0115 02       		.byte	2
ARM GAS  /tmp/cc9UFUWX.s 			page 83


 2685 0116 04       		.byte	4
 2686 0117 08       		.byte	8
 2687 0118 10       		.byte	16
 2688 0119 3F       		.byte	63
 2689 011a 1E       		.byte	30
 2690 011b 21       		.byte	33
 2691 011c 21       		.byte	33
 2692 011d 21       		.byte	33
 2693 011e 21       		.byte	33
 2694 011f 1E       		.byte	30
 2695 0120 3F       		.byte	63
 2696 0121 09       		.byte	9
 2697 0122 09       		.byte	9
 2698 0123 09       		.byte	9
 2699 0124 09       		.byte	9
 2700 0125 06       		.byte	6
 2701 0126 1E       		.byte	30
 2702 0127 21       		.byte	33
 2703 0128 29       		.byte	41
 2704 0129 31       		.byte	49
 2705 012a 21       		.byte	33
 2706 012b 1E       		.byte	30
 2707 012c 3F       		.byte	63
 2708 012d 09       		.byte	9
 2709 012e 09       		.byte	9
 2710 012f 09       		.byte	9
 2711 0130 19       		.byte	25
 2712 0131 26       		.byte	38
 2713 0132 12       		.byte	18
 2714 0133 25       		.byte	37
 2715 0134 25       		.byte	37
 2716 0135 25       		.byte	37
 2717 0136 25       		.byte	37
 2718 0137 18       		.byte	24
 2719 0138 01       		.byte	1
 2720 0139 01       		.byte	1
 2721 013a 01       		.byte	1
 2722 013b 3F       		.byte	63
 2723 013c 01       		.byte	1
 2724 013d 01       		.byte	1
 2725 013e 1F       		.byte	31
 2726 013f 20       		.byte	32
 2727 0140 20       		.byte	32
 2728 0141 20       		.byte	32
 2729 0142 20       		.byte	32
 2730 0143 1F       		.byte	31
 2731 0144 0F       		.byte	15
 2732 0145 10       		.byte	16
 2733 0146 20       		.byte	32
 2734 0147 20       		.byte	32
 2735 0148 10       		.byte	16
 2736 0149 0F       		.byte	15
 2737 014a 1F       		.byte	31
 2738 014b 20       		.byte	32
 2739 014c 10       		.byte	16
 2740 014d 10       		.byte	16
 2741 014e 20       		.byte	32
ARM GAS  /tmp/cc9UFUWX.s 			page 84


 2742 014f 1F       		.byte	31
 2743 0150 21       		.byte	33
 2744 0151 12       		.byte	18
 2745 0152 0C       		.byte	12
 2746 0153 0C       		.byte	12
 2747 0154 12       		.byte	18
 2748 0155 21       		.byte	33
 2749 0156 01       		.byte	1
 2750 0157 02       		.byte	2
 2751 0158 0C       		.byte	12
 2752 0159 38       		.byte	56
 2753 015a 04       		.byte	4
 2754 015b 02       		.byte	2
 2755 015c 21       		.byte	33
 2756 015d 31       		.byte	49
 2757 015e 29       		.byte	41
 2758 015f 25       		.byte	37
 2759 0160 23       		.byte	35
 2760 0161 21       		.byte	33
 2761 0162 3F       		.byte	63
 2762 0163 21       		.byte	33
 2763 0164 00       		.byte	0
 2764 0165 00       		.byte	0
 2765 0166 00       		.byte	0
 2766 0167 00       		.byte	0
 2767 0168 02       		.byte	2
 2768 0169 04       		.byte	4
 2769 016a 08       		.byte	8
 2770 016b 10       		.byte	16
 2771 016c 20       		.byte	32
 2772 016d 00       		.byte	0
 2773 016e 21       		.byte	33
 2774 016f 3F       		.byte	63
 2775 0170 00       		.byte	0
 2776 0171 00       		.byte	0
 2777 0172 00       		.byte	0
 2778 0173 00       		.byte	0
 2779 0174 04       		.byte	4
 2780 0175 02       		.byte	2
 2781 0176 3F       		.byte	63
 2782 0177 02       		.byte	2
 2783 0178 04       		.byte	4
 2784 0179 00       		.byte	0
 2785 017a 40       		.byte	64
 2786 017b 40       		.byte	64
 2787 017c 40       		.byte	64
 2788 017d 40       		.byte	64
 2789 017e 40       		.byte	64
 2790 017f 40       		.byte	64
 2791 0180 01       		.byte	1
 2792 0181 02       		.byte	2
 2793 0182 00       		.byte	0
 2794 0183 00       		.byte	0
 2795 0184 00       		.byte	0
 2796 0185 00       		.byte	0
 2797 0186 10       		.byte	16
 2798 0187 30       		.byte	48
ARM GAS  /tmp/cc9UFUWX.s 			page 85


 2799 0188 2A       		.byte	42
 2800 0189 2A       		.byte	42
 2801 018a 3C       		.byte	60
 2802 018b 00       		.byte	0
 2803 018c 3F       		.byte	63
 2804 018d 24       		.byte	36
 2805 018e 24       		.byte	36
 2806 018f 24       		.byte	36
 2807 0190 18       		.byte	24
 2808 0191 00       		.byte	0
 2809 0192 0C       		.byte	12
 2810 0193 14       		.byte	20
 2811 0194 22       		.byte	34
 2812 0195 22       		.byte	34
 2813 0196 00       		.byte	0
 2814 0197 00       		.byte	0
 2815 0198 18       		.byte	24
 2816 0199 24       		.byte	36
 2817 019a 24       		.byte	36
 2818 019b 24       		.byte	36
 2819 019c 3F       		.byte	63
 2820 019d 00       		.byte	0
 2821 019e 1C       		.byte	28
 2822 019f 2C       		.byte	44
 2823 01a0 2A       		.byte	42
 2824 01a1 2A       		.byte	42
 2825 01a2 24       		.byte	36
 2826 01a3 00       		.byte	0
 2827 01a4 3E       		.byte	62
 2828 01a5 05       		.byte	5
 2829 01a6 01       		.byte	1
 2830 01a7 00       		.byte	0
 2831 01a8 00       		.byte	0
 2832 01a9 00       		.byte	0
 2833 01aa 18       		.byte	24
 2834 01ab 28       		.byte	40
 2835 01ac A4       		.byte	-92
 2836 01ad A4       		.byte	-92
 2837 01ae 7C       		.byte	124
 2838 01af 00       		.byte	0
 2839 01b0 3F       		.byte	63
 2840 01b1 04       		.byte	4
 2841 01b2 04       		.byte	4
 2842 01b3 0C       		.byte	12
 2843 01b4 30       		.byte	48
 2844 01b5 00       		.byte	0
 2845 01b6 24       		.byte	36
 2846 01b7 3D       		.byte	61
 2847 01b8 20       		.byte	32
 2848 01b9 00       		.byte	0
 2849 01ba 00       		.byte	0
 2850 01bb 00       		.byte	0
 2851 01bc 20       		.byte	32
 2852 01bd 40       		.byte	64
 2853 01be 40       		.byte	64
 2854 01bf 3D       		.byte	61
 2855 01c0 00       		.byte	0
ARM GAS  /tmp/cc9UFUWX.s 			page 86


 2856 01c1 00       		.byte	0
 2857 01c2 3F       		.byte	63
 2858 01c3 0C       		.byte	12
 2859 01c4 12       		.byte	18
 2860 01c5 20       		.byte	32
 2861 01c6 00       		.byte	0
 2862 01c7 00       		.byte	0
 2863 01c8 1F       		.byte	31
 2864 01c9 20       		.byte	32
 2865 01ca 20       		.byte	32
 2866 01cb 00       		.byte	0
 2867 01cc 00       		.byte	0
 2868 01cd 00       		.byte	0
 2869 01ce 3E       		.byte	62
 2870 01cf 02       		.byte	2
 2871 01d0 3C       		.byte	60
 2872 01d1 02       		.byte	2
 2873 01d2 3C       		.byte	60
 2874 01d3 00       		.byte	0
 2875 01d4 3E       		.byte	62
 2876 01d5 02       		.byte	2
 2877 01d6 02       		.byte	2
 2878 01d7 02       		.byte	2
 2879 01d8 3C       		.byte	60
 2880 01d9 00       		.byte	0
 2881 01da 0C       		.byte	12
 2882 01db 14       		.byte	20
 2883 01dc 22       		.byte	34
 2884 01dd 32       		.byte	50
 2885 01de 0C       		.byte	12
 2886 01df 00       		.byte	0
 2887 01e0 FC       		.byte	-4
 2888 01e1 24       		.byte	36
 2889 01e2 24       		.byte	36
 2890 01e3 24       		.byte	36
 2891 01e4 18       		.byte	24
 2892 01e5 00       		.byte	0
 2893 01e6 18       		.byte	24
 2894 01e7 24       		.byte	36
 2895 01e8 24       		.byte	36
 2896 01e9 24       		.byte	36
 2897 01ea FC       		.byte	-4
 2898 01eb 80       		.byte	-128
 2899 01ec 3C       		.byte	60
 2900 01ed 04       		.byte	4
 2901 01ee 02       		.byte	2
 2902 01ef 02       		.byte	2
 2903 01f0 00       		.byte	0
 2904 01f1 00       		.byte	0
 2905 01f2 24       		.byte	36
 2906 01f3 2C       		.byte	44
 2907 01f4 2A       		.byte	42
 2908 01f5 2A       		.byte	42
 2909 01f6 10       		.byte	16
 2910 01f7 00       		.byte	0
 2911 01f8 02       		.byte	2
 2912 01f9 1F       		.byte	31
ARM GAS  /tmp/cc9UFUWX.s 			page 87


 2913 01fa 22       		.byte	34
 2914 01fb 20       		.byte	32
 2915 01fc 00       		.byte	0
 2916 01fd 00       		.byte	0
 2917 01fe 1E       		.byte	30
 2918 01ff 20       		.byte	32
 2919 0200 20       		.byte	32
 2920 0201 20       		.byte	32
 2921 0202 1E       		.byte	30
 2922 0203 00       		.byte	0
 2923 0204 06       		.byte	6
 2924 0205 18       		.byte	24
 2925 0206 20       		.byte	32
 2926 0207 18       		.byte	24
 2927 0208 06       		.byte	6
 2928 0209 00       		.byte	0
 2929 020a 1E       		.byte	30
 2930 020b 30       		.byte	48
 2931 020c 1C       		.byte	28
 2932 020d 30       		.byte	48
 2933 020e 0E       		.byte	14
 2934 020f 00       		.byte	0
 2935 0210 22       		.byte	34
 2936 0211 14       		.byte	20
 2937 0212 08       		.byte	8
 2938 0213 14       		.byte	20
 2939 0214 22       		.byte	34
 2940 0215 00       		.byte	0
 2941 0216 0C       		.byte	12
 2942 0217 10       		.byte	16
 2943 0218 A0       		.byte	-96
 2944 0219 A0       		.byte	-96
 2945 021a 7C       		.byte	124
 2946 021b 00       		.byte	0
 2947 021c 22       		.byte	34
 2948 021d 32       		.byte	50
 2949 021e 2A       		.byte	42
 2950 021f 26       		.byte	38
 2951 0220 22       		.byte	34
 2952 0221 22       		.byte	34
 2953 0222 0C       		.byte	12
 2954 0223 3F       		.byte	63
 2955 0224 21       		.byte	33
 2956 0225 00       		.byte	0
 2957 0226 00       		.byte	0
 2958 0227 00       		.byte	0
 2959 0228 3F       		.byte	63
 2960 0229 00       		.byte	0
 2961 022a 00       		.byte	0
 2962 022b 00       		.byte	0
 2963 022c 00       		.byte	0
 2964 022d 00       		.byte	0
 2965 022e 21       		.byte	33
 2966 022f 3F       		.byte	63
 2967 0230 0C       		.byte	12
 2968 0231 00       		.byte	0
 2969 0232 00       		.byte	0
ARM GAS  /tmp/cc9UFUWX.s 			page 88


 2970 0233 00       		.byte	0
 2971 0234 02       		.byte	2
 2972 0235 01       		.byte	1
 2973 0236 02       		.byte	2
 2974 0237 01       		.byte	1
 2975 0238 00       		.byte	0
 2976 0239 00       		.byte	0
 2977 023a 00       		.byte	0
 2978 023b 00       		.byte	0
 2979 023c 00       		.byte	0
 2980 023d 00       		.byte	0
 2981 023e 00       		.byte	0
 2982 023f 00       		.byte	0
 2983              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 2984              		.align	2
 2985              	.LC23:
 2986 0000 64667564 		.ascii	"dfudfudfudfudfu\000"
 2986      66756466 
 2986      75646675 
 2986      64667500 
 2987              	.LC25:
 2988 0010 4F747465 		.ascii	"Otter-Iron\000"
 2988      722D4972 
 2988      6F6E00
 2989 001b 00       		.space	1
 2990              	.LC27:
 2991 001c 6279204A 		.ascii	"by Jan Henrik\000"
 2991      616E2048 
 2991      656E7269 
 2991      6B00
 2992 002a 0000     		.space	2
 2993              	.LC33:
 2994 002c 25642043 		.ascii	"%d C\000"
 2994      00
 2995 0031 000000   		.space	3
 2996              	.LC35:
 2997 0034 25642E25 		.ascii	"%d.%d C\000"
 2997      64204300 
 2998              	.LC37:
 2999 003c 25642E25 		.ascii	"%d.%d V\000"
 2999      64205600 
 3000              		.text
 3001              	.Letext0:
 3002              		.file 4 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machin
 3003              		.file 5 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_s
 3004              		.file 6 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 3005              		.file 7 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f072xb.h"
 3006              		.file 8 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f0xx.h"
 3007              		.file 9 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lo
 3008              		.file 10 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_
 3009              		.file 11 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1
 3010              		.file 12 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/r
 3011              		.file 13 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 3012              		.file 14 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 3013              		.file 15 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc_ex.h"
 3014              		.file 16 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 3015              		.file 17 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
ARM GAS  /tmp/cc9UFUWX.s 			page 89


 3016              		.file 18 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_adc.h"
 3017              		.file 19 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c.h"
 3018              		.file 20 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_pcd.h"
 3019              		.file 21 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim.h"
 3020              		.file 22 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_tim_ex.h"
 3021              		.file 23 "Inc/font.h"
 3022              		.file 24 "<built-in>"
 3023              		.file 25 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_cortex.h"
 3024              		.file 26 "Inc/main.h"
 3025              		.file 27 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_i2c_ex.h"
 3026              		.file 28 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 3027              		.file 29 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_flash.h"
 3028              		.file 30 "/home/janhenrik/programme/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdio
ARM GAS  /tmp/cc9UFUWX.s 			page 90


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc9UFUWX.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc9UFUWX.s:100    .text.MX_GPIO_Init:0000000000000060 $d
     /tmp/cc9UFUWX.s:106    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:112    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc9UFUWX.s:154    .text.MX_DMA_Init:000000000000002c $d
     /tmp/cc9UFUWX.s:159    .text.MX_ADC_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:165    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
     /tmp/cc9UFUWX.s:297    .text.MX_ADC_Init:00000000000000a0 $d
                            *COM*:000000000000004c hadc
     /tmp/cc9UFUWX.s:304    .text.MX_I2C1_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:310    .text.MX_I2C1_Init:0000000000000000 MX_I2C1_Init
     /tmp/cc9UFUWX.s:364    .text.MX_I2C1_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c1
     /tmp/cc9UFUWX.s:371    .text.MX_I2C2_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:377    .text.MX_I2C2_Init:0000000000000000 MX_I2C2_Init
     /tmp/cc9UFUWX.s:431    .text.MX_I2C2_Init:0000000000000038 $d
                            *COM*:000000000000004c hi2c2
     /tmp/cc9UFUWX.s:438    .text.MX_TIM1_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:444    .text.MX_TIM1_Init:0000000000000000 MX_TIM1_Init
     /tmp/cc9UFUWX.s:614    .text.MX_TIM1_Init:00000000000000dc $d
                            *COM*:0000000000000040 htim1
     /tmp/cc9UFUWX.s:622    .text.MX_USB_PCD_Init:0000000000000000 $t
     /tmp/cc9UFUWX.s:628    .text.MX_USB_PCD_Init:0000000000000000 MX_USB_PCD_Init
     /tmp/cc9UFUWX.s:667    .text.MX_USB_PCD_Init:0000000000000020 $d
                            *COM*:0000000000000220 hpcd_USB_FS
     /tmp/cc9UFUWX.s:690    .text.reg:0000000000000000 $t
     /tmp/cc9UFUWX.s:697    .text.reg:0000000000000000 reg
     /tmp/cc9UFUWX.s:989    .text.reg:00000000000001d8 $d
     /tmp/cc9UFUWX.s:1011   .text.disp_init:0000000000000000 $t
     /tmp/cc9UFUWX.s:1018   .text.disp_init:0000000000000000 disp_init
     /tmp/cc9UFUWX.s:1077   .text.disp_init:0000000000000040 $d
                            *COM*:00000000000000da screenBuffer
     /tmp/cc9UFUWX.s:1086   .text.refresh:0000000000000000 $t
     /tmp/cc9UFUWX.s:1093   .text.refresh:0000000000000000 refresh
     /tmp/cc9UFUWX.s:1147   .text.refresh:0000000000000034 $d
     /tmp/cc9UFUWX.s:1154   .text.clear_screen:0000000000000000 $t
     /tmp/cc9UFUWX.s:1161   .text.clear_screen:0000000000000000 clear_screen
     /tmp/cc9UFUWX.s:1184   .text.clear_screen:0000000000000010 $d
     /tmp/cc9UFUWX.s:1189   .text.set_screen:0000000000000000 $t
     /tmp/cc9UFUWX.s:1196   .text.set_screen:0000000000000000 set_screen
     /tmp/cc9UFUWX.s:1219   .text.set_screen:0000000000000010 $d
     /tmp/cc9UFUWX.s:1224   .text.write_pixel:0000000000000000 $t
     /tmp/cc9UFUWX.s:1231   .text.write_pixel:0000000000000000 write_pixel
     /tmp/cc9UFUWX.s:1318   .text.write_pixel:0000000000000070 $d
     /tmp/cc9UFUWX.s:1323   .text.draw_v_line:0000000000000000 $t
     /tmp/cc9UFUWX.s:1330   .text.draw_v_line:0000000000000000 draw_v_line
     /tmp/cc9UFUWX.s:1383   .text.draw_char:0000000000000000 $t
     /tmp/cc9UFUWX.s:1390   .text.draw_char:0000000000000000 draw_char
     /tmp/cc9UFUWX.s:1508   .text.draw_char:0000000000000064 $d
     /tmp/cc9UFUWX.s:2406   .rodata.font:0000000000000000 font
     /tmp/cc9UFUWX.s:1513   .text.draw_string:0000000000000000 $t
     /tmp/cc9UFUWX.s:1520   .text.draw_string:0000000000000000 draw_string
     /tmp/cc9UFUWX.s:1571   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc9UFUWX.s:1578   .text.SystemClock_Config:0000000000000000 SystemClock_Config
ARM GAS  /tmp/cc9UFUWX.s 			page 91


     /tmp/cc9UFUWX.s:1671   .text.SystemClock_Config:000000000000006c $d
     /tmp/cc9UFUWX.s:1677   .text.main:0000000000000000 $t
     /tmp/cc9UFUWX.s:1684   .text.main:0000000000000000 main
     /tmp/cc9UFUWX.s:2219   .text.main:00000000000002f4 $d
     /tmp/cc9UFUWX.s:2248   .text.Error_Handler:0000000000000000 $t
     /tmp/cc9UFUWX.s:2255   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc9UFUWX.s:2305   .data.OLED_Setup_Array:0000000000000000 OLED_Setup_Array
     /tmp/cc9UFUWX.s:2384   .rodata.REFRESH_COMMANDS:0000000000000000 REFRESH_COMMANDS
     /tmp/cc9UFUWX.s:2376   .data.tipcal:0000000000000000 tipcal
     /tmp/cc9UFUWX.s:2361   .data.r:0000000000000000 r
     /tmp/cc9UFUWX.s:2298   .bss.s:0000000000000000 s
                            *COM*:0000000000000044 hdma_adc
     /tmp/cc9UFUWX.s:2282   .rodata:0000000000000000 $d
     /tmp/cc9UFUWX.s:2287   .bss.ADC_raw:0000000000000000 $d
     /tmp/cc9UFUWX.s:2291   .bss.ADC_raw:0000000000000000 ADC_raw
     /tmp/cc9UFUWX.s:2294   .bss.s:0000000000000000 $d
     /tmp/cc9UFUWX.s:2301   .data.OLED_Setup_Array:0000000000000000 $d
     /tmp/cc9UFUWX.s:2357   .data.r:0000000000000000 $d
     /tmp/cc9UFUWX.s:2372   .data.tipcal:0000000000000000 $d
     /tmp/cc9UFUWX.s:2380   .rodata.REFRESH_COMMANDS:0000000000000000 $d
     /tmp/cc9UFUWX.s:2403   .rodata.font:0000000000000000 $d
     /tmp/cc9UFUWX.s:2984   .rodata.main.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_ADC_MspInit
HAL_I2C_Init
HAL_I2CEx_ConfigAnalogFilter
HAL_I2CEx_ConfigDigitalFilter
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_PWM_Init
HAL_TIM_OC_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_OC_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_MspPostInit
HAL_PCD_Init
__aeabi_ui2f
__aeabi_f2d
__aeabi_ddiv
__aeabi_dmul
__aeabi_dsub
__aeabi_d2f
__aeabi_i2f
__aeabi_fsub
__aeabi_fmul
__aeabi_fdiv
__aeabi_fadd
__aeabi_i2d
__aeabi_fcmpge
ARM GAS  /tmp/cc9UFUWX.s 			page 92


__aeabi_fcmple
__aeabi_fcmpgt
__aeabi_fcmplt
__aeabi_f2iz
memcpy
HAL_I2C_GetState
HAL_I2C_Master_Transmit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
__aeabi_f2uiz
HAL_Init
HAL_TIM_PWM_Start
HAL_TIM_OC_Start
HAL_ADC_Start_DMA
HAL_Delay
HAL_GPIO_ReadPin
HAL_FLASH_Unlock
sprintf
HAL_FLASH_Program
HAL_FLASH_Lock
